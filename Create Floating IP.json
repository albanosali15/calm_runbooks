{"status":{},"contains_secrets":true,"product_version":"3.2.7","spec":{"description":"","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Create Floating IP"}],"name":"10318349_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create Floating IP","attrs":{"script":"import requests\nfrom requests.auth import HTTPBasicAuth\n\ndef _build_url(scheme, resource_type, host=@@{PC_IP}@@, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_default_spec(**params):\n    return ({\n              \"spec\": {\n                \"description\": params.get('description', \"Floating IP for VM\"),\n                \"resources\": {\n                  \"external_subnet_reference\": {\n                    \"kind\": \"subnet\",\n                    \"uuid\": params['external_subnet_uuid']\n                  },\n                  \"vm_nic_reference\": {\n                    \"kind\": \"vm_nic\",\n                        \"uuid\": params['nic_uuid']\n                  }\n            },\n                \"name\": params.get('name', \"Test_Floating_IP\")\n              },\n              \"api_version\": \"3.1.0\",\n              \"metadata\": {\n                \"kind\": \"floating_ip\"\n                  }\n            })\n            \ndef generate_floating_ip(**params):\n    payload = _get_default_spec(**params)\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/floating_ips\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(\"admin\", \"Nutanix.123\"),\n                        timeout=None, verify=False)\n    task_uuid = wait_for_completion(data, params['name'])\n    print(\"floating_ip_details={}\".format({\"IP_uuid\": data.json()['metadata']['uuid'],\n                                          \"IP_creation_task_uuid\": task_uuid,\n                                          \"name\":params['name']}))\n\ndef wait_for_completion(data, name):\n    if data.status_code in [200, 202]:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(\"admin\",\"Nutanix.123\"), \n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Got error while generating floating IP ---> \",responce.json()['message_list'])\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = 'SUCCESSED'\n    else:\n        state = data.json().get('state')\n        print(\"Got error while generating floating IP --->\",data.json())\n        exit(1)\n    return data.json()['status']['execution_context']['task_uuid']\n\ndef validate_params():\n    params = @@{floating_ip_items}@@\n    print(\"##### Generating Floating IP #####\")\n    for _param in params:\n        generate_floating_ip(**_param)                                                      \n\nvalidate_params()","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"cb404d1c_runbook","main_task_local_reference":{"kind":"app_task","name":"10318349_dag"},"variable_list":[{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"floating_ip_items","value":"[\n    {\"name\":\"APP_Floating_IP\",\n     \"external_subnet_uuid\":\"\",\n     \"nic_uuid\":\"\",\n     \"description\": \"Test floating IP\"\n    }\n]","label":"Floating IP Items","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"\"10.44.76.88\"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_passwd","value":"bcIV+gPsqMIdkzGzAJXxj\/pihsETkgtr9QkfSyRJfqhJFVMk8Evc3AJ7mq5e:utf-8","label":"","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_username","value":"5Igo5netftWtTBwDoWhHE5oj6H8d+gaQGAQcmsqvpGTyK5i47dn7:utf-8","label":"","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"Create Floating IP"},"api_version":"3.0","metadata":{"last_update_time":"1646304196973043","kind":"runbook","spec_version":65,"creation_time":"1645526256820860","name":"Create Floating IP"}}