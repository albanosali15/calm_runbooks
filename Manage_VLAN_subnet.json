{"status":{},"contains_secrets":true,"product_version":"3.2.7","spec":{"description":"runbook_for_subnet","resources":{"endpoints_information":[],"endpoint_definition_list":[],"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Manage Subnet"}],"name":"e45355be_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_endpoint","name":"escript_test"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Manage Subnet","attrs":{"script":"#script\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\nfrom base64 import b64encode\n\ndef _build_url(scheme, resource_type, host=@@{PC_IP}@@, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_virtual_switch_uuid(virtual_switch_name):\n    payload = {\"entity_type\": \"distributed_virtual_switch\", \n               \"filter\": \"name==%s\"%virtual_switch_name}\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/groups\")                \n    data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(@@{prism_central_username}@@, @@{prism_central_passwd}@@),\n                         verify=False)\n    print(\"virtual switch uuid ----> \",data.json()['group_results'][0]['entity_results'][0]['entity_id'])\n    return str(data.json()['group_results'][0]['entity_results'][0]['entity_id'])\n  \ndef _get_cluster_details(cluster_name):\n    cluster_details = {'kind':'cluster'}\n    payload = {\"entity_type\": \"cluster\", \"filter\": \"name==%s\"%cluster_name}\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/groups\")\n    data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(@@{prism_central_username}@@, @@{prism_central_passwd}@@), \n                         verify=False)\n    cluster_details['uuid'] = str(data.json()['group_results'][0]['entity_results'][0]['entity_id'])\n    return cluster_details\n\ndef _get_default_spec():\n    return (\n        {\n          \"api_version\": \"3.1.0\",\n          \"metadata\": {\"kind\": \"subnet\"},\n          \"spec\": {\n                  \"name\": \"\",\n                  \"resources\": {\n                      \"ip_config\": {},\n                      \"subnet_type\": None,\n                      },\n                  },\n              }\n          )\n\ndef _get_default_spec_update():\n    return (\n        {\n          \"api_version\": \"3.1.0\",\n          \"metadata\": {\n                        \"spec_version\" : 5,\n                        \"kind\": \"subnet\"\n                      },\n          \"spec\": {\n                  \"name\": \"\",\n                  \"resources\": {\n                      \"ip_config\": {},\n                      \"subnet_type\": None,\n                      },\n                  },\n              }\n          )\n\ndef _get_ipam_spec(**params):\n    ipam_spec = {}\n    if params['set_ipam'] == 'yes':\n        ipam_spec = _get_default_ipconfig_spec()\n        ipam_config = params[\"ipam\"]\n        ipam_spec[\"subnet_ip\"] = ipam_config[\"network_ip\"]\n        ipam_spec[\"prefix_length\"] = ipam_config[\"network_prefix\"]\n        ipam_spec[\"default_gateway_ip\"] = ipam_config[\"gateway_ip\"]\n        if \"ip_pools\" in ipam_config and ipam_config[\"ip_pools\"] != \"NA\":\n            pools = \"\"\n            for l_index in ipam_config[\"ip_pools\"]:\n                pools += \"%s %s\"%(l_index['start_ip'], l_index['end_ip'])\n            ipam_spec[\"pool_list\"] = [{\"range\": pools}]\n        if \"dhcp_options\" in ipam_config:\n            dhcp_spec = _get_default_dhcp_spec()\n            dhcp_config = ipam_config[\"dhcp_options\"]\n            if dhcp_config['domain_name_server_list'] != 'NA': \n                dhcp_spec[\"domain_name_server_list\"] = dhcp_config[\"domain_name_server_list\"]\n            if dhcp_config[\"domain_search_list\"] != 'NA':\n                dhcp_spec[\"domain_search_list\"] = dhcp_config[\"domain_search_list\"]\n            if dhcp_config[\"domain_name\"] != 'NA':\n                dhcp_spec[\"domain_name\"] = dhcp_config[\"domain_name\"]\n            if dhcp_config[\"boot_file_name\"] != 'NA':\n              dhcp_spec[\"boot_file_name\"] = dhcp_config[\"boot_file_name\"]\n            if dhcp_config[\"tftp_server_name\"] != 'NA':\n                dhcp_spec[\"tftp_server_name\"] = dhcp_config[\"tftp_server_name\"]\n            ipam_spec[\"dhcp_options\"] = dhcp_spec\n    return ipam_spec\n\ndef _get_default_ipconfig_spec():\n    return (\n        {\n         \"subnet_ip\": None,\n         \"prefix_length\": None,\n         \"default_gateway_ip\": None,\n         \"pool_list\": [],\n        }\n      )\n\ndef _get_default_dhcp_spec():\n    return (\n      {\n        \"domain_name_server_list\": [],\n        \"domain_search_list\": [],\n        \"domain_name\": \"\",\n                \"boot_file_name\": \"\",\n                \"tftp_server_name\": \"\",\n       }\n    )\n\ndef vlan_subnet(**params):\n    params['virtual_switch_uuid'] = params.get('virtual_switch_uuid',\\\n                _get_virtual_switch_uuid(params['Virtual_switch_name']))\n    params['cluster_reference'] = _get_cluster_details(\n                                    cluster_name=params['cluster_name'])\n    params['ipam_spec'] = _get_ipam_spec(**params)\n    payload = _get_default_spec()\n    payload[\"spec\"]['name'] = @@{vlan_name}@@\n    payload[\"spec\"][\"resources\"][\"subnet_type\"] = \"VLAN\"\n    payload[\"spec\"][\"resources\"][\"vlan_id\"] = params['vlan_id']\n    payload[\"spec\"][\"resources\"][\"is_external\"] = False\n    payload[\"spec\"][\"resources\"][\"virtual_switch_uuid\"] = params['virtual_switch_uuid']\n    payload[\"spec\"][\"cluster_reference\"] = params['cluster_reference']\n    payload[\"spec\"][\"resources\"][\"ip_config\"] = params['ipam_spec']\n    if params['operation'] == \"update\":\n        update_subnet(**payload)\n    else:\n        print(\"vlan subnet payload -----> \",payload)\n        url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\")        \n        data = requests.post(url, json=payload,\n                             auth=HTTPBasicAuth(@@{prism_central_username}@@, @@{prism_central_passwd}@@),\n                             timeout=None, verify=False)\n        wait_for_completion(data)\n\ndef update_subnet(**payload):\n    _url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/list\")\n    _data = requests.post(_url, json={\"kind\": \"subnet\"},\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, @@{prism_central_passwd}@@),\n                        verify=False)\n    _uuid = \"\"\n    if payload[\"spec\"]['name'] in str(_data.json()):\n        for x in range(len(_data.json()['entities'])):\n            if str(_data.json()['entities'][x]['spec']['name']) == payload[\"spec\"]['name']:\n                _uuid = str(_data.json()['entities'][x]['metadata']['uuid'])\n                print(\"_uuid of subnet ----> \", _uuid)\n                payload['metadata']['spec_version'] = _data.json()['entities'][x]['metadata']['spec_version']\n    else:\n        print(\"Error ---> %s subnet not present on host\"%payload[\"spec\"]['name'])\n        exit(1)\n    print(\"_uuid of subnet ----> \", _uuid)\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%_uuid)\n    data = requests.put(url, json=payload,\n                         auth=HTTPBasicAuth(@@{prism_central_username}@@, @@{prism_central_passwd}@@),\n                         timeout=None, verify=False)\n    wait_for_completion(data)\n\n\ndef delete_subnet(**params):\n    _url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/list\")\n    _data = requests.post(_url, json={\"kind\": \"subnet\"},\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, @@{prism_central_passwd}@@),\n                        verify=False)\n    _uuid = \"\"\n    if params['subnet_name'] in str(_data.json()):\n        for x in range(len(_data.json()['entities'])):\n            if str(_data.json()['entities'][x]['spec']['name']) == params['subnet_name']:\n                _uuid = str(_data.json()['entities'][x]['metadata']['uuid'])\n    else:\n        print(\"Error ---> %s subnet not present on host\"%params['subnet_name'])\n        exit(1)\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%_uuid)\n    data = requests.delete(url, auth=HTTPBasicAuth(@@{prism_central_username}@@, @@{prism_central_passwd}@@),\n                            timeout=None, verify=False)\n    wait_for_completion(data)\n\ndef wait_for_completion(data):\n    if data.status_code in [200, 202]:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                        resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(@@{prism_central_username}@@, @@{prism_central_passwd}@@), \n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Got error while creating subnet ---> \",responce.json())\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"COMPLETE\"\n    else:\n        state = data.json().get('state')\n        print(\"Got %s while creating subnet ---> \"%state, data.json())\n        exit(1)\n            \ndef validate_params():\n    params = {}\n    params['operation'] = @@{operation}@@\n    if params['operation'] == \"delete\":\n        params['subnet_name'] = @@{vlan_name}@@\n        delete_subnet(**params)\n    else:\n        params = @@{vlan_subnet}@@\n        params['operation'] = @@{operation}@@\n        params['cluster_name'] = params['vlan_subnet']['cluster']['name']\n        params['Virtual_switch_name'] = params['vlan_subnet']['virtual_switch']['name']\n        params['vlan_id'] = params['vlan_subnet']['vlan_id']\n        params['ipam'] = {}\n        params['set_ipam'] = \"no\"\n        if 'ipam' in params['vlan_subnet'] and params['vlan_subnet']['ipam'] != {}:\n            params['set_ipam'] = \"yes\"\n            params['ipam']['network_ip'] = params['vlan_subnet']['ipam']['network_ip']\n            params['ipam']['network_prefix'] = params['vlan_subnet']['ipam']['network_prefix']\n            params['ipam']['gateway_ip'] = params['vlan_subnet']['ipam']['gateway_ip']\n            params['ipam']['ip_pools'] = {}\n            params['ipam']['ip_pools'] = params['vlan_subnet']['ipam'].get('ip_pools', \"NA\")\n            if 'dhcp' in params['vlan_subnet']['ipam'] and params['vlan_subnet']['ipam']['dhcp'] != {}:\n                params['ipam']['dhcp_options'] = {}\n                params['ipam']['dhcp_options']['domain_name_server_list'] = params['vlan_subnet']['ipam']['dhcp']['dns_servers']\n                params['ipam']['dhcp_options']['domain_search_list'] = params['vlan_subnet']['ipam']['dhcp']['domain_search']\n                params['ipam']['dhcp_options']['domain_name'] = params['vlan_subnet']['ipam']['dhcp']['domain_name']\n                params['ipam']['dhcp_options']['boot_file_name'] = params['vlan_subnet']['ipam']['dhcp'].get('boot_file_name', \"NA\")\n                params['ipam']['dhcp_options']['tftp_server_name'] = params['vlan_subnet']['ipam']['dhcp'].get('tftp_server', \"NA\")\n                params['ipam']['dhcp_options']['dhcp_server_ip'] = params['vlan_subnet']['ipam']['dhcp'].get('dhcp_server_ip', \"NA\")\n        vlan_subnet(**params)\n\nvalidate_params()","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"dc151af2_runbook","main_task_local_reference":{"kind":"app_task","name":"e45355be_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"Prism Central IP","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"\"10.44.76.88\"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"vlan_name","value":"\"subnetQA\"","label":"Subnet Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"operation","value":"\"create\"","label":"Operation","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["\"create\"","\"update\"","\"delete\""]}},{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":false,"description":"Please remove words #OPTIONAL and #REQUIRED wherever mentioned in sample config below, You can also remove entire fields which are optional.","data_type":"BASE","type":"LOCAL","name":"vlan_subnet","value":"{   \"vlan_subnet\": {     \"ipam\": {},     \"cluster\": {        \"name\": \"auto_cluster_prod_1a642ea0a5c3\"     },     \"virtual_switch\": {        \"name\": \"vs0\"     },     \"vlan_id\": 12   } }","label":"VLAN Subnet Spec","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"prism_central_username","value":"\"admin\"","label":"PC Username","attrs":{"type":""},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_passwd","value":"1KeG71jOfOczhTgj\/rwxaDwUVX9gA9ZHHnSOQnLBPmXMTD2E6eJED8mThUCk:utf-8","label":"PC Password","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]},"client_attrs":{},"default_target_reference":{"kind":"app_endpoint","name":"escript_test"}},"name":"Manage_VLAN_subnet"},"api_version":"3.0","metadata":{"last_update_time":"1645080707927912","kind":"runbook","spec_version":4,"creation_time":"1645076323746986","name":"Manage_VLAN_subnet"}}