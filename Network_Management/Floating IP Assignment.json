{"status":{},"contains_secrets":true,"product_version":"3.5.2","spec":{"description":"","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Create Floating IP"}],"name":"10318349_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Create Floating IP","attrs":{"script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP = \"@@{PC_IP}@@\"\npc_username = \"@@{prism_central_username}@@\"\npc_password = \"@@{prism_central_passwd}@@\"\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_default_spec(external_subnet_uuid, **params):\n    return ({\n              \"spec\": {\n                \"description\": params.get('description', \"Floating IP for @@{entity}@@\"),\n                \"resources\": {\n                  \"external_subnet_reference\": {\n                    \"kind\": \"subnet\",\n                    \"uuid\": external_subnet_uuid\n                  }\n                }\n              },\n              \"api_version\": \"3.1.0\",\n              \"metadata\": {\n                \"kind\": \"floating_ip\"\n                  }\n            })\n\ndef get_subnet_uuid(subnet):\n    url = _build_url(scheme=\"https\",resource_type=\"\/subnets\/list\")\n    data = requests.post(url, json={\"kind\":\"subnet\", \"filter\":\"name==%s\"%subnet},\n                         auth=HTTPBasicAuth(pc_username, pc_password),\n                         timeout=None, verify=False)\n    if data.ok:\n        if data.json()['metadata']['total_matches'] == 0:\n            print(\"%s not present on %s\"%(subnet, PC_IP))\n            exit(1)\n        elif data.json()['metadata']['total_matches'] > 1:\n            print(\"There are more than one subnets with name - %s on - %s\"%(subnet, PC_IP))\n            print(\"Please delete it manually before executing runbook.\")\n            exit(1)\n        else:\n            return data.json()['entities'][0]['metadata']['uuid']\n    else:\n        print(\"Error while fetching subnet details :- \",data.json().get('message_list',\n                                     data.json().get('error_detail', data.json())))\n        exit(1)\n        \ndef get_vpc_uuid(vpc):\n    url = _build_url(scheme=\"https\",resource_type=\"\/vpcs\/list\")\n    data = requests.post(url, json={\"kind\":\"vpc\", \"filter\":\"name==%s\"%vpc},\n                         auth=HTTPBasicAuth(pc_username, pc_password),\n                         timeout=None, verify=False)\n    if data.ok:\n        if data.json()['metadata']['total_matches'] == 0:\n            print(\"%s not present on %s\"%(vpc, PC_IP))\n            exit(1)\n        elif data.json()['metadata']['total_matches'] > 1:\n            print(\"There are more than one VPCs with name - %s on - %s\"%(vpc, PC_IP))\n            print(\"Please delete it manually before executing runbook.\")\n            exit(1)\n        else:\n            return data.json()['entities'][0]['metadata']['uuid']\n    else:\n        print(\"Error while fetching VPC details :- \",data.json().get('message_list',\n                                     data.json().get('error_detail', data.json())))\n        exit(1)\n        \ndef get_nic_uuid(vm_name):\n    url = _build_url(scheme=\"https\", resource_type=\"\/vms\/list\")\n    data = requests.post(url, json={\"kind\":\"vm\"},\n                        auth=HTTPBasicAuth(pc_username, pc_password), verify=False)\n    if data.ok:\n        if vm_name in str(data.json()):\n            for _vm in data.json()[\"entities\"]:\n              if _vm[\"spec\"][\"name\"] == vm_name:\n                  vm_uuid = _vm[\"metadata\"][\"uuid\"]\n        else:\n            print(\"%s VM not present on %s\"%(vm_name, PC_IP))\n            print(\"Please check provided VM details.\")\n            exit(1)\n    else:\n        print(\"Error while fetching VM details.\",data.json())\n        exit(1)\n        \n    payload = {\"entity_type\":\"virtual_nic\",\n               \"group_member_attributes\":[{\"attribute\":\"assigned_ipv4_addresses\"}],\n               \"group_member_count\":50,\n               \"group_member_offset\":0,\n               \"filter_criteria\":\"vm==%s\"%vm_uuid}\n    \n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/groups\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(pc_username, pc_password),\n                        timeout=None, verify=False)\n    \n    if data.ok:\n        return data.json()[\"group_results\"][0][\"entity_results\"][0][\"entity_id\"]\n    else:\n        print(\"Error while fetching NIC uuid.\",data.json())\n        exit(1)\n        \ndef generate_floating_ip(**params):\n    external_subnet_uuid = get_subnet_uuid(params[\"external_subnet\"])        \n    payload = _get_default_spec(external_subnet_uuid, **params)\n    \n    if \"IP\" in params.keys():\n        vpc_uuid = get_vpc_uuid(params[\"vpc_name\"])\n        payload[\"spec\"][\"resources\"][\"private_ip\"] = \"@@{entity}@@\"\n        payload[\"spec\"][\"resources\"][\"vpc_reference\"] = {\n                                                         \"kind\":\"vpc\",\n                                                         \"uuid\":vpc_uuid\n                                                        }\n    elif \"VM_Name\" in params.keys():\n        nic_uuid = get_nic_uuid(params[\"VM_Name\"])\n        payload[\"spec\"][\"resources\"][\"vm_nic_reference\"] = {\n                                                            \"kind\": \"vm_nic\",\n                                                            \"uuid\":nic_uuid\n                                                           }\n    else:\n        print(\"Input Error :- User should provide IP or VM Name in 'Entity'\")\n        exit(1)\n        \n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/floating_ips\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(pc_username, pc_password),\n                        timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"floating_ip_details={}\".format({\"IP_uuid\": data.json()['metadata']['uuid']}))\n\ndef wait_for_completion(data):\n    if data.ok:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(pc_username, pc_password), \n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Got error while generating floating IP ---> \",responce.json())\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = 'SUCCESSED'\n    else:\n        state = data.json().get('state')\n        print(\"Got error while generating floating IP --->\",data.json())\n        exit(1)\n        \nparams = {\n              \"external_subnet\":\"@@{external_subnet_name}@@\"\n         }\n\nif \"@@{assignment_type}@@\" == \"IP\":\n    params[\"IP\"] = \"@@{entity}@@\"\n    params[\"vpc_name\"] = \"@@{vpc_name}@@\"\n    if params[\"vpc_name\"].lower() in [\"\", \"na\", \"none\"]:\n        print(\"Input Error :- VPC Name is Mandatory for 'Floating IP Assignment Type = IP'.\")\n        exit(1)\nelse:\n    params[\"VM_Name\"] = \"@@{entity}@@\"\n\nprint(\"##### Generating Floating IP #####\")\ngenerate_floating_ip(**params)                                                      ","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"cb404d1c_runbook","main_task_local_reference":{"kind":"app_task","name":"10318349_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"For IP - Need to provide IP address in Entity, For VM - Need to provide VM Name in Entity Field.","data_type":"BASE","type":"LOCAL","name":"assignment_type","value":"IP","label":"Floating IP Assignment Type","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["IP","VM"]}},{"val_type":"STRING","is_mandatory":true,"description":"For which floating IP is needed.","data_type":"BASE","type":"LOCAL","name":"entity","value":"10.10.10.15","label":"Entity","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"Required only if \"Floating IP Assignment Type\" is \"IP\"","data_type":"BASE","type":"LOCAL","name":"vpc_name","value":"Orange_VPC","label":"VPC Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"external_subnet_name","value":"Orange_External_Subnet","label":"External Subnet Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"10.42.100.21","label":"PC IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_passwd","value":"Rs\/tuLd1HFFUuXwRPZJFg9VwOqe2wHEPBL9Wl5dNlWz0d1EG9t7tpENevw==:utf-8","label":"Prism Central Password","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_username","value":"Yy0o9YHpVUPcm4\/B9CkVLwC\/irBeXK7OEhiHrcC8hOkszi\/74A==:utf-8","label":"Prism Central Username","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"Floating IP Assignment"},"api_version":"3.0","metadata":{"last_update_time":"1660707803603683","kind":"runbook","spec_version":11,"creation_time":"1660643596938639","name":"Floating IP Assignment"}}