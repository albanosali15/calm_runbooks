{"status":{},"contains_secrets":true,"product_version":"3.5.2","spec":{"description":"","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Update VPC Static Route"}],"name":"10318349_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Update VPC Static Route","attrs":{"script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP = \"@@{PC_IP}@@\"\npc_username = \"@@{prism_central_username}@@\"\npc_password = \"@@{prism_central_passwd}@@\"\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_default_spec(vpc_uuid, subnet_uuid, ip_prefix):\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/vpcs\/%s\/route_tables\"%vpc_uuid)\n    data = requests.get(url, auth=HTTPBasicAuth(pc_username, pc_password), verify=False)\n    if data.ok:\n        responce = data.json()\n        del responce[\"status\"]\n        for x in [\"last_update_time\",\"creation_time\",\"spec_hash\",\"categories_mapping\",\"owner_reference\",\"categories\"]:\n            del responce[\"metadata\"][x]\n    else:\n        print(\"Error while fetching @@{vpc_name}@@ VPCs static route details.\")\n        exit(1)\n    static_route = {\"nexthop\": {\n                        \"external_subnet_reference\": {\n                            \"kind\": \"subnet\",\n                            \"name\": \"@@{external_subnet_name}@@\",\n                            \"uuid\": subnet_uuid\n                        }\n                    },\n                    \"destination\": ip_prefix}\n    responce[\"spec\"][\"resources\"][\"static_routes_list\"].append(static_route)\n    return responce\n\ndef _get_delete_spec(vpc_uuid, subnet_uuid, ip_prefix):\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/vpcs\/%s\/route_tables\"%vpc_uuid)\n    data = requests.get(url, auth=HTTPBasicAuth(pc_username, pc_password), verify=False)\n    if data.ok:\n        responce = data.json()\n        del responce[\"status\"]\n        for x in [\"last_update_time\",\"creation_time\",\"spec_hash\",\"categories_mapping\",\"owner_reference\",\"categories\"]:\n            del responce[\"metadata\"][x]\n    else:\n        print(\"Error while fetching @@{vpc_name}@@ VPCs static route details.\")\n        exit(1)\n\n    for x,_route in enumerate(responce[\"spec\"][\"resources\"][\"static_routes_list\"]):\n        if (_route[\"destination\"] == ip_prefix) and (_route[\"nexthop\"][\"external_subnet_reference\"][\"uuid\"] == subnet_uuid):\n            del responce[\"spec\"][\"resources\"][\"static_routes_list\"][x]\n            return responce\n    print(\"Input Error :-- @@{ip_prefix}@@ IP prefix with \"\\\n          \"@@{external_subnet_name}@@ external subnet not found.\")\n    exit(1)\n  \ndef get_subnet_uuid(subnet):\n    url = _build_url(scheme=\"https\",resource_type=\"\/subnets\/list\")\n    data = requests.post(url, json={\"kind\":\"subnet\", \"filter\":\"name==%s\"%subnet},\n                         auth=HTTPBasicAuth(pc_username, pc_password),\n                         timeout=None, verify=False)\n    if data.ok:\n        if data.json()['metadata']['total_matches'] == 0:\n            print(\"%s not present on %s\"%(subnet, PC_IP))\n            exit(1)\n        elif data.json()['metadata']['total_matches'] > 1:\n            print(\"There are more than one subnets with name - %s on - %s\"%(subnet, PC_IP))\n            print(\"Please delete it manually before executing runbook.\")\n            exit(1)\n        else:\n            return data.json()['entities'][0]['metadata']['uuid']\n    else:\n        print(\"Error while fetching subnet details :- \",data.json().get('message_list',\n                                     data.json().get('error_detail', data.json())))\n        exit(1)\n        \ndef _get_vpc_details(vpc_name):\n    vpc_details = {\"kind\": \"vpc\"}\n    if vpc_name.lower() not in [\"na\", \"none\"]:\n        url = _build_url(\n                    scheme=\"https\",\n                    resource_type=\"\/vpcs\/list\")               \n        data = requests.post(url, json=vpc_details,\n                         auth=HTTPBasicAuth(pc_username, pc_password),\n                         verify=False)\n        if vpc_name in str(data.json()):\n            for _vpc in data.json()['entities']:\n                if _vpc['spec']['name'] == vpc_name:\n                    return _vpc['metadata']['uuid']\n        else:\n            print(\"Input Error ---> %s VPC not present on host\"%vpc_name)\n            exit(1)\n    else:\n        print(\"Input Error :-- VPC name should not be NA or None\")\n        exit(1)\n          \ndef create_static_route(**params):\n    vpc_uuid = _get_vpc_details(params[\"vpc_name\"])\n    subnet_uuid = get_subnet_uuid(params[\"external_subnet\"])\n    payload = _get_default_spec(vpc_uuid, subnet_uuid, params[\"ip_prefix\"])\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/vpcs\/%s\/route_tables\"%vpc_uuid)\n    data = requests.put(url, json=payload, \n                        auth=HTTPBasicAuth(pc_username, pc_password), verify=False)\n    wait_for_completion(data)\n\ndef delete_static_route(**params):\n    vpc_uuid = _get_vpc_details(params[\"vpc_name\"])\n    subnet_uuid = get_subnet_uuid(params[\"external_subnet\"])\n    payload = _get_delete_spec(vpc_uuid, subnet_uuid, params[\"ip_prefix\"])\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/vpcs\/%s\/route_tables\"%vpc_uuid)\n    data = requests.put(url, json=payload, \n                        auth=HTTPBasicAuth(pc_username, pc_password), verify=False)\n    wait_for_completion(data)\n    \ndef wait_for_completion(data):\n    if data.ok:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(pc_username, pc_password), \n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'DELETE_PENDING']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Error while creating Statis route ---> \",responce.json())\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = 'SUCCESSED'\n    else:\n        state = data.json().get('state')\n        print(\"Error while creating Statis route --->\",data.json())\n        exit(1)\n\nip_prefix = \"@@{ip_prefix}@@\"\nif \"\/\" in ip_prefix:\n    ip, prefix = ip_prefix.split(\"\/\")\n    if len(ip.split(\".\")) != 4:\n        print(\"Input Error :-- Please provide IP with Prefix in correct format as below.\")\n        print(\"Example := 10.10.10.0\/24\")\n        exit(1)\nelse:\n    print(\"Input Error :-- Please provide IP with Prefix in correct format as below.\")\n    print(\"Example := 10.10.10.0\/24\")\n    exit(1)\n    \nparams = {\n              \"vpc_name\":\"@@{vpc_name}@@\",\n              \"external_subnet\":\"@@{external_subnet_name}@@\",\n              \"ip_prefix\": ip_prefix\n         }\nprint(\"##### Updating Static routes of %s VPC #####\"%params[\"vpc_name\"])\nif \"@@{operation}@@\" == \"UPDATE\":\n    create_static_route(**params)\n    print(\"Success !!!\")\nelse:\n    delete_static_route(**params)\n    print(\"Success !!!\")","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"cb404d1c_runbook","main_task_local_reference":{"kind":"app_task","name":"10318349_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"operation","value":"UPDATE","label":"Operation","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["UPDATE","DELETE"]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"vpc_name","value":"Nutanix_4_VPC","label":"VPC Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"[0-9]"},"val_type":"STRING","is_mandatory":true,"description":"Ex :- 10.10.10.0\/24","data_type":"BASE","type":"LOCAL","name":"ip_prefix","value":"10.10.10.0\/24","label":"IP with Prefix [ Destination ]","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"external_subnet_name","value":"Nutanix_4_External_Subnet","label":"External Subnet Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"10.42.244.10","label":"PC IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_passwd","value":"A3WWKSc8Ic2UoRbEUBktp02u8aL6lx2qGrWJmF645TOmicEUrqOk7vIL0g==:utf-8","label":"Prism Central Password","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_username","value":"FidMpcmSEyJj1NXso5ES8J9Uk4NJ8FuEuDjYE6\/Nrkm5v1W6Bg==:utf-8","label":"Prism Central Username","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"VPC Static Routing"},"api_version":"3.0","metadata":{"last_update_time":"1659931523083499","kind":"runbook","spec_version":39,"creation_time":"1659611571446003","name":"VPC Static Routing"}}