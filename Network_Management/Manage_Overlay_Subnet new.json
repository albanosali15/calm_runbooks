{"status":{},"contains_secrets":true,"product_version":"3.4.0.1","spec":{"description":"runbook_for_subnet","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Validate Parameters"},{"kind":"app_task","name":"Manage Subnet"}],"name":"e45355be_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Validate Parameters"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Manage Subnet"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Validate Parameters","attrs":{"exit_status":[],"script":"overlay_subnet_items = {}\nif \"@@{operation}@@\" in [\"update\", \"delete\"]:\n    if \"@@{vlan_uuid}@@\" == \"NA\":\n        print(\"Input Error :- Overlay Subnet UUID is a required parameter\"\\\n              \" for Update and Delete operation.\")\n        exit(1)\n        \nif \"@@{vlan_name}@@\" == \"NA\":\n    print(\"Input Error :- Overlay Subnet Name is a mandatory parameter.\")\n    exit(1)\n    \nif \"@@{operation}@@\" != \"delete\":\n    network_ip, prefix = \"@@{network_ip}@@\".split(\"\/\")\n    ip_pools = \"@@{ip_pool}@@\".split(\",\")\n    dns_servers = \"@@{dns_servers}@@\".split(\",\")\n    if dns_servers == [\"NA\"]:\n        dns_servers = []\n    domain_search = \"@@{domain_search}@@\".split(\",\")\n    if \"@@{gateway_ip}@@\" == \"NA\":\n        print(\"Input Error :- Gateway IP is a mandatory parameter.\")\n        exit(1)\n    if \"@@{vpc_uuid}@@\" == \"NA\":\n        print(\"Input Error :- VPC UUID is a mandatory parameter.\")\n        exit(1)\n    ip_pool = []\n    for ip in ip_pools:\n        start_ip, end_ip = ip.split(\"-\")\n        ip_pool.append({\"start_ip\":start_ip, \"end_ip\":end_ip})\n    overlay_subnet_items =  {\n                              \"overlay_subnet\": {\n                                \"vlan_uuid\":\"@@{vlan_uuid}@@\",\n                                \"vpc\": {\"uuid\":\"@@{vpc_uuid}@@\"},\n                                \"ipam\": {\n                                  \"dhcp\": {\n                                    \"dns_servers\": dns_servers,\n                                    \"domain_name\": \"@@{domain_name}@@\",\n                                    \"domain_search\": domain_search,\n                                    \"boot_file_name\":\"@@{boot_file_name}@@\",\n                                    \"tftp_server\":\"@@{tftp_server}@@\"\n                                  },\n                                  \"ip_pools\": ip_pool,\n                                  \"gateway_ip\": \"@@{gateway_ip}@@\",\n                                  \"network_ip\": network_ip,\n                                  \"network_prefix\": int(prefix)\n                                  }\n                               }\n                            }\nprint(\"overlay_subnet_items={}\".format(overlay_subnet_items))","eval_variables":["overlay_subnet_items"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Manage Subnet","attrs":{"script":"#script\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP = \"@@{PC_IP}@@\"\npc_username = \"@@{prism_central_username}@@\"\npc_passwd = \"@@{prism_central_passwd}@@\"\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_vpc_details(**params):\n    vpc_name = params.get(\"vpc_name\", \"NA\")\n    vpc_uuid = params.get(\"vpc_uuid\", \"NA\")\n    if (vpc_name==\"NA\" or vpc_name==\"\") and (vpc_uuid==\"NA\" or vpc_uuid==\"\"):\n        print(\"Input Error :- Please provide VPC_NAME or VPC UUID.\")\n        exit(1)\n    vpc_details = {\"kind\": \"vpc\"}\n    if vpc_uuid == \"NA\" or vpc_uuid == \"\":\n        url = _build_url(\n                    scheme=\"https\",\n                    resource_type=\"\/vpcs\/list\")               \n        data = requests.post(url, json=vpc_details,\n                         auth=HTTPBasicAuth(pc_username, pc_passwd),\n                         verify=False)\n        if vpc_name in str(data.json()):\n            for x in range(len(data.json()['entities'])):\n                if str(data.json()['entities'][x]['spec']['name']) == vpc_name:\n                    vpc_details['uuid'] = str(data.json()['entities'][x]['metadata']['uuid'])\n        else:\n            print(\"Input Error ---> %s VPC not present on host\"%vpc_name)\n            exit(1)\n    else:\n        url = _build_url(\n                    scheme=\"https\",\n                    resource_type=\"\/vpcs\/%s\"%vpc_uuid)               \n        data = requests.get(url, auth=HTTPBasicAuth(pc_username, pc_passwd),verify=False)        \n        if data.ok:\n            vpc_details[\"uuid\"] = data.json()['metadata']['uuid']\n        else:\n            print(\"Input Error :- Provided VPC UUID %s is not valid.\"%vpc_uuid)\n            exit(1)\n    return vpc_details\n\ndef _get_default_spec():\n    return (\n        {\n          \"api_version\": \"3.1.0\",\n          \"metadata\": {\"kind\": \"subnet\"},\n          \"spec\": {\n                  \"name\": \"\",\n                  \"resources\": {\n                      \"ip_config\": {},\n                      \"subnet_type\": None,\n                      },\n                  },\n              }\n          )\n\ndef _get_ipam_spec(**params):\n    ipam_spec = {}\n    if params['set_ipam'] == 'yes':\n        ipam_spec = _get_default_ipconfig_spec()\n        ipam_config = params[\"ipam\"]\n        ipam_spec[\"subnet_ip\"] = ipam_config[\"network_ip\"]\n        ipam_spec[\"prefix_length\"] = ipam_config[\"network_prefix\"]\n        ipam_spec[\"default_gateway_ip\"] = ipam_config[\"gateway_ip\"]\n        if \"ip_pools\" in ipam_config and ipam_config[\"ip_pools\"] != \"NA\":\n            pools = []\n            ipam_spec[\"pool_list\"] = []\n            for ip_pools in ipam_config[\"ip_pools\"]:\n                if (ip_pools.get('start_ip', 'NA') != 'NA') and (ip_pools.get('end_ip', 'NA') != 'NA'):\n                    pools.append({\"range\": \"%s %s\"%(ip_pools['start_ip'],\n                                                    ip_pools['end_ip'])})\n            ipam_spec[\"pool_list\"] = pools\n        if \"dhcp_options\" in ipam_config:\n            dhcp_spec = _get_default_dhcp_spec()\n            dhcp_config = ipam_config[\"dhcp_options\"]\n            if dhcp_config['domain_name_server_list'] != 'NA': \n                dhcp_spec[\"domain_name_server_list\"] = dhcp_config[\"domain_name_server_list\"]\n            if dhcp_config[\"domain_search_list\"] != 'NA':\n                dhcp_spec[\"domain_search_list\"] = dhcp_config[\"domain_search_list\"]\n            if dhcp_config[\"domain_name\"] != 'NA':\n                dhcp_spec[\"domain_name\"] = dhcp_config[\"domain_name\"]\n            if dhcp_config[\"boot_file_name\"] != 'NA':\n              dhcp_spec[\"boot_file_name\"] = dhcp_config[\"boot_file_name\"]\n            if dhcp_config[\"tftp_server_name\"] != 'NA':\n                dhcp_spec[\"tftp_server_name\"] = dhcp_config[\"tftp_server_name\"]\n            ipam_spec[\"dhcp_options\"] = dhcp_spec\n    return ipam_spec\n\ndef _get_default_ipconfig_spec():\n    return (\n        {\n         \"subnet_ip\": None,\n         \"prefix_length\": None,\n         \"default_gateway_ip\": None,\n        }\n      )\n\ndef _get_default_dhcp_spec():\n    return (\n      {\n        \"domain_name_server_list\": [],\n        \"domain_search_list\": [],\n        \"domain_name\": \"\",\n                \"boot_file_name\": \"\",\n                \"tftp_server_name\": \"\",\n       }\n    )\n\ndef overlay_subnet(**params):\n    params['vpc_reference'] = _get_vpc_details(**params)\n    payload = _get_default_spec()\n    payload[\"spec\"]['name'] = params['subnet_name']\n    payload[\"spec\"][\"resources\"][\"subnet_type\"] = \"OVERLAY\"\n    payload[\"spec\"][\"resources\"][\"vpc_reference\"] = params['vpc_reference']\n    params['ipam_spec'] = _get_ipam_spec(**params)\n    payload[\"spec\"][\"resources\"][\"ip_config\"] = params['ipam_spec']\n    url = _build_url(\n                    scheme=\"https\",\n                    resource_type=\"\/subnets\")    \n    data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(pc_username, pc_passwd),\n                         timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"%s overlay subnet created successfully.\"%params[\"subnet_name\"])\n    print(\"Please note subnet UUID for future reference :- \",data.json()[\"metadata\"][\"uuid\"])\n\ndef update_subnet(**payload):\n    _uuid = \"\"\n    _spec = \"\"\n    if payload[\"vlan_uuid\"] == \"NA\" or payload[\"vlan_uuid\"] == \"\" :\n        print(\"Input Error :- Please Provide proper UUID of %s subnet to update it.\"%payload['subnet_name'])\n        print(\"Your provided UUID :- %s\"%payload[\"vlan_uuid\"])\n        exit(1)\n    else:\n        _url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%payload[\"vlan_uuid\"])\n        _data = requests.get(_url, auth=HTTPBasicAuth(pc_username, pc_passwd),verify=False)\n        if _data.ok:\n            if _data.json()['spec']['name'] != payload['subnet_name']:\n                print(\"Input Error :- Provided UUID %s does not match with provided \"\\\n                    \"VLAN name %s\"%(payload[\"vlan_uuid\"], payload['subnet_name']))\n                exit(1)\n            else:\n                _uuid = payload[\"vlan_uuid\"]\n                _spec = _data.json()\n        else:\n            print(_data.json().get('message_list',_data.json().get('error_detail', _data.json())))\n            exit(1)\n    _params = {}\n    del _spec[\"status\"]\n    for x in [\"last_update_time\", \"creation_time\", \"spec_hash\", \"categories_mapping\", \"owner_reference\", \"categories\"]:\n        del _spec[\"metadata\"][x]\n    _params['ipam_spec'] = _get_ipam_spec(**payload)\n    _spec[\"spec\"][\"resources\"][\"ip_config\"] = _params['ipam_spec']\n    url = _build_url(\n                    scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%_uuid)\n    data = requests.put(url, json=_spec,\n                         auth=HTTPBasicAuth(pc_username, pc_passwd),\n                         timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"%s overlay subnet updated successfully.\"%payload[\"subnet_name\"])\n\ndef delete_subnet(**params):\n    _uuid = \"\"\n    if params[\"vlan_uuid\"] == \"NA\" or params[\"vlan_uuid\"] == \"\" :\n        print(\"Input Error :- Please Provide proper UUID of %s subnet to Delete it.\"%params['subnet_name'])\n        print(\"Your provided UUID :- %s\"%params[\"vlan_uuid\"])\n        exit(1)\n    else:\n        _url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%params[\"vlan_uuid\"])\n        _data = requests.get(_url, auth=HTTPBasicAuth(pc_username, pc_passwd),verify=False)\n        if _data.ok:\n            if _data.json()['spec']['name'] != params['subnet_name']:\n                print(\"Input Error :- Provided UUID %s does not match with provided \"\\\n                    \"VLAN name %s\"%(params[\"vlan_uuid\"], params['subnet_name']))\n                exit(1)\n            else:\n                _uuid = params[\"vlan_uuid\"]\n        else:\n            print(_data.json().get('message_list',_data.json().get('error_detail', _data.json())))\n            exit(1)\n    url = _build_url(\n                    scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%_uuid)\n    data = requests.delete(url, auth=HTTPBasicAuth(pc_username, pc_passwd),\n                            timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"%s overlay subnet deleted successfully.\"%params[\"subnet_name\"])\n\ndef wait_for_completion(data):\n    if data.ok:\n        state = data.json()['status'].get('state')\n        if state == \"DELETE_PENDING\":\n            state = \"PENDING\"\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(pc_username,pc_passwd), \n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(responce.json().get('message_list',responce.json().get(\\\n                                          'error_detail', responce.json())))\n                state = 'FAILED'\n                exit(1)  \n                \n            else:\n                state = \"COMPLETE\"\n    else:\n        print(data.json().get('message_list',data.json().get('error_detail', data.json())))\n        exit(1)\n            \ndef validate_params():\n    params = @@{overlay_subnet_items}@@\n    operation = \"@@{operation}@@\"\n    params['subnet_name'] = \"@@{vlan_name}@@\"\n    params['vlan_uuid'] = \"@@{vlan_uuid}@@\"\n    if operation == \"delete\":\n        delete_subnet(**params)\n    else:                                                     \n        params['ipam'] = {}\n        params['set_ipam'] = \"yes\"\n        params['ipam']['network_ip'] = params['overlay_subnet']['ipam']['network_ip']\n        params['ipam']['network_prefix'] = params['overlay_subnet']['ipam']['network_prefix']\n        params['ipam']['gateway_ip'] = params['overlay_subnet']['ipam']['gateway_ip']\n        params['ipam']['ip_pools'] = {}\n        params['ipam']['ip_pools'] = params['overlay_subnet']['ipam'].get('ip_pools', \"NA\")\n        if 'dhcp' in params['overlay_subnet']['ipam'] and params['overlay_subnet']['ipam']['dhcp'] != {}:\n            params['ipam']['dhcp_options'] = {}\n            params['ipam']['dhcp_options']['domain_name_server_list'] = params['overlay_subnet']['ipam']['dhcp'].get('dns_servers', 'NA')\n            params['ipam']['dhcp_options']['domain_search_list'] = params['overlay_subnet']['ipam']['dhcp'].get('domain_search', 'NA')\n            params['ipam']['dhcp_options']['domain_name'] = params['overlay_subnet']['ipam']['dhcp'].get('domain_name', 'NA')\n            params['ipam']['dhcp_options']['boot_file_name'] = params['overlay_subnet']['ipam']['dhcp'].get('boot_file_name', \"NA\")\n            params['ipam']['dhcp_options']['tftp_server_name'] = params['overlay_subnet']['ipam']['dhcp'].get('tftp_server', \"NA\")\n        if operation == \"update\":\n            update_subnet(**params)\n        else:\n            params['vpc_name'] = params['overlay_subnet']['vpc'].get('name', 'NA')\n            params['vpc_uuid'] = params['overlay_subnet']['vpc'].get('uuid', 'NA')\n            overlay_subnet(**params)                                                      \n\nvalidate_params()","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"dc151af2_runbook","main_task_local_reference":{"kind":"app_task","name":"e45355be_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"vlan_name","value":"overlay_subnet_1","label":"Subnet Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"operation","value":"delete","label":"Operation","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["create","update","delete"]}},{"val_type":"STRING","is_mandatory":true,"description":"\n","data_type":"BASE","type":"LOCAL","name":"vpc_uuid","value":"NA","label":"VPC UUID for Overlay Subnet","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Required for update and delete operation.\nPass NA value in fields which are not required.","data_type":"BASE","type":"LOCAL","name":"vlan_uuid","value":"2ee8afb1-c5b1-498d-8518-01454bcd73b5","label":"Overlay Subnet UUID","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for delete operation","data_type":"BASE","type":"LOCAL","name":"network_ip","value":"NA","label":"Network IP with Prefix","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for delete operation","data_type":"BASE","type":"LOCAL","name":"gateway_ip","value":"NA","label":"Gateway IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for delete operation","data_type":"BASE","type":"LOCAL","name":"ip_pool","value":"NA","label":"IP Pools","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for delete operation","data_type":"BASE","type":"LOCAL","name":"dns_servers","value":"NA","label":"DNS Servers List","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for delete operation","data_type":"BASE","type":"LOCAL","name":"domain_name","value":"NA","label":"Domain Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for delete operation","data_type":"BASE","type":"LOCAL","name":"domain_search","value":"NA","label":"Domain Search List","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for delete operation","data_type":"BASE","type":"LOCAL","name":"boot_file_name","value":"NA","label":"Boot File Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for delete operation","data_type":"BASE","type":"LOCAL","name":"tftp_server","value":"NA","label":"TFTP Server","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Prism Central IP","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"10.44.77.68","label":"PC IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_username","value":"AAEMu1k1hRuOESs2tI1rh+\/e+\/C0Hht8PLBDBRjRRRDn9Au8gg==:utf-8","label":"PC Username","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_passwd","value":"yGPiZ2l6ahPrwaZH6JZTpIg5MlLUlt18IaDDEjsLZ9MxBH5LHunY5xWCEQ==:utf-8","label":"PC Password","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"Manage_Overlay_Subnet"},"api_version":"3.0","metadata":{"last_update_time":"1652185745545165","kind":"runbook","spec_version":44,"creation_time":"1649753765647195","name":"Manage_Overlay_Subnet"}}