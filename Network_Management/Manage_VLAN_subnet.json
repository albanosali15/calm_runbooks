{"status":{},"contains_secrets":true,"product_version":"3.6.2","spec":{"description":"runbook_for_subnet","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Validate Parameters"},{"kind":"app_task","name":"Manage Subnet"}],"name":"e45355be_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Validate Parameters"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Manage Subnet"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Validate Parameters","attrs":{"exit_status":[],"script":"import requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP =  \"@@{PC_IP}@@\"\npc_username = \"@@{prism_central_username}@@\"\npc_password = \"@@{prism_central_passwd}@@\"\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n  \ndef _get_vlan_id():\n    url = _build_url(scheme=\"https\",resource_type=\"\/subnets\/list\")\n    data = requests.post(url, json={\"kind\":\"subnet\"},\n                         auth=HTTPBasicAuth(pc_username, \n                                            pc_password),\n                         timeout=None, verify=False)\n    if data.ok:\n        vlan_id = []\n        for x in data.json()['entities']:\n            vlan_id.append(x['spec']['resources'].get('vlan_id', 0))\n        id = 10\n        while True:\n            if id in vlan_id:\n                id+=1\n            else:\n                break\n        return id\n    else:\n        print(\"Error while fetching subnet list :- \",data.json().get('message_list',\n                                     data.json().get('error_detail', data.json())))\n        exit(1)\n        \nif \"@@{operation}@@\" in [\"update\", \"delete\"]:\n    if \"@@{vlan_uuid}@@\" == \"NA\":\n        print(\"Input Error :- VLAN UUID is a mandatory parameter\"\\\n            \" for Update and Delete operations.\")\n        exit(1)\n\nvlan_subnet_items = {}\nif \"@@{operation}@@\" != \"delete\":\n    if \"@@{cluster_name}@@\" == \"NA\":\n        print(\"Input Error :- Cluster Name is a mandatory parameter\"\\\n            \" for Create and Update operations.\")\n        exit(1)\n    if \"@@{virtual_switch_name}@@\" == \"NA\":\n        print(\"Input Error :- Virtual Switch Name is a mandatory parameter\"\\\n            \" for Create and Update operations.\")\n        exit(1)\n    network_ip = start_ip = end_ip = \"NA\"\n    domain_search = dns_servers = ['NA']\n    network_prefix = 0\n    if \"@@{network_ip}@@\" != \"NA\":\n        #print(\"Input Error :- Network Ip with Prefix is a mandatory parameter.\")\n        #exit(1)\n        network_ip, network_prefix = \"@@{network_ip}@@\".split(\"\/\")\n    if \"@@{dns_servers}@@\" != \"NA\":\n    \tdns_servers = \"@@{dns_servers}@@\".split(\",\")\n    IP = \"@@{ip_pools}@@\"\n    if IP != \"NA\":\n        start_ip, end_ip = IP.split(\"-\")\n    if \"@@{domain_search}@@\" != \"NA\":\n        domain_search = \"@@{domain_search}@@\".split(\",\")\n    vlan_subnet_items = {\n                      \"vlan_subnet\": {\n                        \"vlan_uuid\" : \"@@{vlan_uuid}@@\",\n                        \"cluster\": {\n                            \"name\": \"@@{cluster_name}@@\"\n                        },\n                        \"virtual_switch_name\": \"@@{virtual_switch_name}@@\",\n                        \"vlan_id\": @@{vlan_id}@@,\n                        \"ipam\": {\n                            \"dhcp\": {\n                                \"dns_servers\": dns_servers,\n                                \"domain_name\": \"@@{domain_name}@@\",\n                                \"domain_search\": domain_search,\n                                \"boot_file_name\":\"@@{boot_file_name}@@\",\n                                \"tftp_server\":\"@@{tftp_server}@@\"\n                              },\n                              \"ip_pools\": [\n                                {\n                                  \"end_ip\": end_ip,\n                                  \"start_ip\": start_ip\n                                }\n                              ],\n                          \"gateway_ip\": \"@@{gateway_ip}@@\",\n                          \"network_ip\": network_ip,\n                          \"network_prefix\": int(network_prefix)\n      \n                        }\n                      }\n                    }\n                    \nprint(\"vlan_subnet_items={}\".format(vlan_subnet_items))","eval_variables":["vlan_subnet_items"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Manage Subnet","attrs":{"script":"#script\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP =  \"@@{PC_IP}@@\"\npc_username = \"@@{prism_central_username}@@\"\npc_passwd = \"@@{prism_central_passwd}@@\"\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_virtual_switch_uuid(virtual_switch_name, cluter_uuid):\n    payload = {\"entity_type\": \"distributed_virtual_switch\", \n               \"filter\": \"name==%s\"%virtual_switch_name}\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/groups\")                \n    data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(pc_username, pc_passwd),\n                         verify=False)\n    if data.ok:\n        _uuid = data.json()['group_results'][0]['entity_results'][0]['entity_id']\n        _url = \"https:\/\/%s:9440\/api\/networking\/v2.a1\/dvs\/virtual-switches\/%s?proxyClusterUuid=%s\"%(PC_IP,\n                                                                                                _uuid,\n                                                                                                cluter_uuid)\n        _data = requests.get(_url, auth=HTTPBasicAuth(pc_username, pc_passwd),verify=False)\n        if _data.json()['data']['name'] == virtual_switch_name:\n            print(\"virtual switch uuid ----> \",_uuid)\n            return str(_uuid)\n        else:\n            print(\"Input Error :- %s virtual switch not present on %s\"%(virtual_switch_name, PC_IP))\n            exit(1)\n    else:\n        print(\"Error while fetching virtual switch details :- \",data.json().get('message_list',\n                                                                                data.json().get('error_detail', \n                                                                                data.json())))\n  \ndef _get_cluster_details(cluster_name):\n    cluster_details = {'kind':'cluster'}\n    payload = {\"kind\": \"cluster\"}\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/clusters\/list\")\n    data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(pc_username,pc_passwd), \n                         verify=False)\n    if data.ok:\n        for _cluster in data.json()['entities']:\n            if _cluster['status']['name'] == cluster_name:\n                cluster_details['uuid'] = str(_cluster['metadata']['uuid'])\n                return cluster_details\n        print(\"Input Error :- Given cluster %s not present on %s\"%(cluster_name, PC_IP))\n        exit(1)\n    else:\n        print(\"Error while fetching %s cluster info\"%cluster_name)\n        print(data.json().get('message_list',data.json().get('error_detail', data.json())))\n        exit(1)  \n\ndef _get_default_spec():\n    return (\n        {\n          \"api_version\": \"3.1.0\",\n          \"metadata\": {\"kind\": \"subnet\"},\n          \"spec\": {\n                  \"name\": \"\",\n                  \"resources\": {\n                      \"ip_config\": {},\n                      \"subnet_type\": None,\n                      },\n                  },\n              }\n          )\n\ndef _get_default_spec_update():\n    return (\n        {\n          \"api_version\": \"3.1.0\",\n          \"metadata\": {\n                        \"spec_version\" : 5,\n                        \"kind\": \"subnet\"\n                      },\n          \"spec\": {\n                  \"name\": \"\",\n                  \"resources\": {\n                      \"ip_config\": {},\n                      \"subnet_type\": None,\n                      },\n                  },\n              }\n          )\n\ndef _get_ipam_spec(**params):\n    ipam_spec = {}\n    if params['set_ipam'] == 'yes':\n        ipam_spec = _get_default_ipconfig_spec()\n        ipam_config = params[\"ipam\"]\n        ipam_spec[\"subnet_ip\"] = ipam_config[\"network_ip\"]\n        ipam_spec[\"prefix_length\"] = ipam_config[\"network_prefix\"]\n        ipam_spec[\"default_gateway_ip\"] = ipam_config[\"gateway_ip\"]\n        if \"ip_pools\" in ipam_config and ipam_config[\"ip_pools\"] != \"NA\":\n            pools = []\n            ipam_spec[\"pool_list\"] = []\n            for ip_pools in ipam_config[\"ip_pools\"]:\n                if (ip_pools.get('start_ip', 'NA') != 'NA') and (ip_pools.get('end_ip', 'NA') != 'NA'):\n                    pools.append({\"range\": \"%s %s\"%(ip_pools['start_ip'],\n                                                    ip_pools['end_ip'])})\n            ipam_spec[\"pool_list\"] = pools\n        if \"dhcp_options\" in ipam_config:\n            dhcp_spec = _get_default_dhcp_spec()\n            dhcp_config = ipam_config[\"dhcp_options\"]\n            if dhcp_config['domain_name_server_list'] != ['NA']: \n                dhcp_spec[\"domain_name_server_list\"] = dhcp_config[\"domain_name_server_list\"]\n            if dhcp_config[\"domain_search_list\"] != ['NA']:\n                dhcp_spec[\"domain_search_list\"] = dhcp_config[\"domain_search_list\"]\n            if dhcp_config[\"domain_name\"] != 'NA':\n                dhcp_spec[\"domain_name\"] = dhcp_config[\"domain_name\"]\n            if dhcp_config[\"boot_file_name\"] != 'NA':\n              dhcp_spec[\"boot_file_name\"] = dhcp_config[\"boot_file_name\"]\n            if dhcp_config[\"tftp_server_name\"] != 'NA':\n                dhcp_spec[\"tftp_server_name\"] = dhcp_config[\"tftp_server_name\"]\n            ipam_spec[\"dhcp_options\"] = dhcp_spec\n    return ipam_spec\n\ndef _get_default_ipconfig_spec():\n    return (\n        {\n         \"subnet_ip\": None,\n         \"prefix_length\": 0,\n         \"default_gateway_ip\": None,\n        }\n      )\n\ndef _get_default_dhcp_spec():\n    return (\n      {\n        \"domain_name_server_list\": [],\n        \"domain_search_list\": [],\n        \"domain_name\": \"\",\n                \"boot_file_name\": \"\",\n                \"tftp_server_name\": \"\",\n       }\n    )\n\ndef vlan_subnet(**params):\n    params['cluster_reference'] = _get_cluster_details(\n                                    cluster_name=params['cluster_name'])\n    params['virtual_switch_uuid'] = params.get('virtual_switch_uuid',\\\n                _get_virtual_switch_uuid(params['Virtual_switch_name'],\n                                         params['cluster_reference']['uuid']))\n    payload = _get_default_spec()\n    if params['ipam']['network_ip'] != \"NA\":\n        params['ipam_spec'] = _get_ipam_spec(**params)\n        payload[\"spec\"][\"resources\"][\"ip_config\"] = params['ipam_spec']\n    payload[\"spec\"]['name'] = \"@@{vlan_name}@@\"\n    payload[\"spec\"][\"resources\"][\"subnet_type\"] = \"VLAN\"\n    payload[\"spec\"][\"resources\"][\"vlan_id\"] = params['vlan_id']\n    payload[\"spec\"][\"resources\"][\"is_external\"] = False\n    payload[\"spec\"][\"resources\"][\"virtual_switch_uuid\"] = params['virtual_switch_uuid']\n    payload[\"spec\"][\"cluster_reference\"] = params['cluster_reference']\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\")        \n    data = requests.post(url, json=payload,\n                             auth=HTTPBasicAuth(pc_username, pc_passwd),\n                             timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"%s subnet created successfully\"%payload[\"spec\"]['name'])\n    print(\"Please note UUID for future reference :- %s\"%data.json()[\"metadata\"][\"uuid\"])\n\ndef update_subnet(**payload):\n    _uuid = \"\"\n    _spec = \"\"\n    if payload[\"vlan_uuid\"] == \"NA\" or payload[\"vlan_uuid\"] == \"\" :\n        print(\"Input Error :- Please Provide proper UUID of %s subnet to update it.\"%payload['subnet_name'])\n        print(\"Your provided UUID :- %s\"%payload[\"vlan_uuid\"])\n        exit(1)\n    else:\n        _url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%payload[\"vlan_uuid\"])\n        _data = requests.get(_url, auth=HTTPBasicAuth(pc_username, pc_passwd),verify=False)\n        if _data.ok:\n            if _data.json()['spec']['name'] != payload['subnet_name']:\n                print(\"Input Error :- Provided UUID %s does not match with provided \"\\\n                    \"VLAN name %s\"%(payload[\"vlan_uuid\"], payload['subnet_name']))\n                exit(1)\n            else:\n                _uuid = payload[\"vlan_uuid\"]\n                _spec = _data.json()\n        else:\n            print(_data.json().get('message_list',_data.json().get('error_detail', _data.json())))\n            exit(1)\n\n    del payload[\"vlan_uuid\"]\n    _params = {}\n    del _spec[\"status\"]\n    for x in [\"last_update_time\", \"creation_time\", \"spec_hash\", \"categories_mapping\", \"owner_reference\", \"categories\"]:\n        del _spec[\"metadata\"][x]\n    if payload['ipam']['network_ip'] != \"NA\":\n        _params['ipam_spec'] = _get_ipam_spec(**payload)\n        _spec[\"spec\"][\"resources\"][\"ip_config\"] = _params['ipam_spec']\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%_uuid)\n    data = requests.put(url, json=_spec,\n                         auth=HTTPBasicAuth(pc_username, pc_passwd),\n                         timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"%s subnet updated successfully\"%payload['subnet_name'])\n\ndef delete_subnet(**params):\n    _uuid = \"\"\n    if params[\"vlan_uuid\"] == \"NA\" or params[\"vlan_uuid\"] == \"\" :\n        print(\"Input Error :- Please Provide proper UUID of %s subnet to update it.\"%params['subnet_name'])\n        print(\"Your provided UUID :- %s\"%params[\"vlan_uuid\"])\n        exit(1)\n    else:\n        _url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%params[\"vlan_uuid\"])\n        _data = requests.get(_url, auth=HTTPBasicAuth(pc_username, pc_passwd),verify=False)\n        if _data.ok:\n            if _data.json()['spec']['name'] != params['subnet_name']:\n                print(\"Input Error :- Provided UUID %s does not match with provided \"\\\n                    \"VLAN name %s\"%(params[\"vlan_uuid\"], params['subnet_name']))\n                exit(1)\n            else:\n                _uuid = params[\"vlan_uuid\"]\n        else:\n            print(_data.json().get('message_list',_data.json().get('error_detail', _data.json())))\n            exit(1)\n\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%_uuid)\n    data = requests.delete(url, auth=HTTPBasicAuth(pc_username, pc_passwd),\n                            timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"%s subnet deleted successfully\"%params['subnet_name'])\n\ndef wait_for_completion(data):\n    if data.status_code in [200, 202]:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(pc_username,pc_passwd), \n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(responce.json().get('message_list',responce.json().get(\\\n                                          'error_detail', responce.json())))\n                state = 'FAILED'\n                exit(1)  \n                \n            else:\n                state = \"COMPLETE\"\n    else:\n        print(data.json().get('message_list',data.json().get('error_detail', data.json())))\n        exit(1)  \n            \ndef validate_params():\n    params = @@{vlan_subnet_items}@@\n    operation = \"@@{operation}@@\"\n    params['subnet_name'] = \"@@{vlan_name}@@\"\n    params[\"vlan_uuid\"]  = \"@@{vlan_uuid}@@\"\n    if operation == \"delete\":\n        delete_subnet(**params)\n    else:\n        params['ipam'] = {}\n        params['set_ipam'] = \"no\"\n        if 'ipam' in params['vlan_subnet'] and params['vlan_subnet']['ipam'] != {}:\n            params['set_ipam'] = \"yes\"\n            params['ipam']['network_ip'] = params['vlan_subnet']['ipam']['network_ip']\n            params['ipam']['network_prefix'] = params['vlan_subnet']['ipam']['network_prefix']\n            params['ipam']['gateway_ip'] = params['vlan_subnet']['ipam']['gateway_ip']\n            params['ipam']['ip_pools'] = {}\n            params['ipam']['ip_pools'] = params['vlan_subnet']['ipam'].get('ip_pools', \"NA\")\n            if 'dhcp' in params['vlan_subnet']['ipam'] and params['vlan_subnet']['ipam']['dhcp'] != {}:\n                params['ipam']['dhcp_options'] = {}\n                params['ipam']['dhcp_options']['domain_name_server_list'] = params['vlan_subnet']['ipam']['dhcp']['dns_servers']\n                params['ipam']['dhcp_options']['domain_search_list'] = params['vlan_subnet']['ipam']['dhcp']['domain_search']\n                params['ipam']['dhcp_options']['domain_name'] = params['vlan_subnet']['ipam']['dhcp']['domain_name']\n                params['ipam']['dhcp_options']['boot_file_name'] = params['vlan_subnet']['ipam']['dhcp'].get('boot_file_name', \"NA\")\n                params['ipam']['dhcp_options']['tftp_server_name'] = params['vlan_subnet']['ipam']['dhcp'].get('tftp_server', \"NA\")\n                params['ipam']['dhcp_options']['dhcp_server_ip'] = params['vlan_subnet']['ipam']['dhcp'].get('dhcp_server_ip', \"NA\")\n        if operation == \"update\":\n            update_subnet(**params)\n        else:\n            params['cluster_name'] = params['vlan_subnet']['cluster']['name']\n            params['Virtual_switch_name'] = params['vlan_subnet']['virtual_switch_name']\n            params['vlan_id'] = params['vlan_subnet']['vlan_id']\n            vlan_subnet(**params)\n\nvalidate_params()","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"dc151af2_runbook","main_task_local_reference":{"kind":"app_task","name":"e45355be_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"vlan_name","value":"vlan_uat","label":"Subnet Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"# Required for Create and Update operations.","data_type":"BASE","type":"LOCAL","name":"vlan_id","value":"31","label":"VLAN ID","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"operation","value":"delete","label":"Operation","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["create","update","delete"]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for Delete Operation.","data_type":"BASE","type":"LOCAL","name":"cluster_name","value":"auto_cluster_prod_f38da47d51f4","label":"Cluster Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for Delete Operation.","data_type":"BASE","type":"LOCAL","name":"virtual_switch_name","value":"vs0","label":"Virtual Switch Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Required for update and Delete operation.","data_type":"BASE","type":"LOCAL","name":"vlan_uuid","value":"0cc78887-240b-43d4-8b8b-46d2f17d072f","label":"VLAN UUID","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for Delete Operation.\nEX :- 10.10.10.0\/24","data_type":"BASE","type":"LOCAL","name":"network_ip","value":"10.10.60.0\/24","label":"Network IP With Prefix","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for Delete Operation.\nEX :- 10.10.10.1","data_type":"BASE","type":"LOCAL","name":"gateway_ip","value":"10.10.60.1","label":"Gateway IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for Delete Operation.\nEX :- 10.10.10.10-10.10.10.20","data_type":"BASE","type":"LOCAL","name":"ip_pools","value":"10.10.60.2-10.10.60.10","label":"IP Pools Range","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for Delete Operation.\nEX :- tftp.server.com","data_type":"BASE","type":"LOCAL","name":"tftp_server","value":"tft.server.com","label":"TFTP Server","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for Delete Operation.\nEX :- bootfile.com","data_type":"BASE","type":"LOCAL","name":"boot_file_name","value":"boot.file.name","label":"Boot File Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for Delete Operation.\nEX :- dns.server.com","data_type":"BASE","type":"LOCAL","name":"domain_search","value":"dns.server.com","label":"Domain Search List","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for Delete Operation.\nEX :- dns.domain.com","data_type":"BASE","type":"LOCAL","name":"domain_name","value":"domain.io.com","label":"Domain Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for Delete Operation.\nEx :- 1.2.3.4,5.3.3.3","data_type":"BASE","type":"LOCAL","name":"dns_servers","value":"1.2.3.4","label":"DNS Servers IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Prism Central IP","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"10.44.76.167","label":"PC IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_username","value":"O+pVoyE3Kk6TGpfNLr0ZJzpbjE\/8MXiVeTdSLsrgKt1uhTg+8g==:utf-8","label":"PC Username","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_passwd","value":"vfN\/JbLMsyo6NhjmKNbSLzofQR8FzbVJUQ6cG7qhKGJhrZ9gdKUMGPTj8Q==:utf-8","label":"PC Password","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"Manage_VLAN_subnet_New_merge"},"api_version":"3.0","metadata":{"last_update_time":"1688668885385282","kind":"runbook","spec_version":2,"creation_time":"1688665700076462","name":"Manage_VLAN_subnet_New_merge"}}