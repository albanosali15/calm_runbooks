{"status":{},"contains_secrets":true,"product_version":"3.2.7","spec":{"description":"","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Task 1"}],"name":"dfc518a7_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Task 1","attrs":{"script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\n\ndef _build_url(scheme, resource_type, host=@@{PC_IP}@@, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n    \ndef _get_spec(project):\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects_internal\/{}\".format(project))\n    data = requests.get(url,\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                           @@{prism_central_passwd}@@),\n                        timeout=None, verify=False)\n    return data.json()\n  \ndef update_project():\n    params = @@{user_items}@@\n    project = @@{project_details}@@\n    payload = _get_spec(project['uuid'])\n    for x in ['categories', 'categories_mapping', 'creation_time', 'last_update_time', 'owner_reference']:\n        del payload['metadata'][x]\n    del payload['status']\n    \n    user_list = []\n    if params.get(\"tenant_users\", \"None\") != \"None\":\n        for user in params['tenant_users']:\n            user_list.append(create_user(user, **params))\n        for uuid in user_list:\n            payload['spec']['project_detail']['resources']\\\n                ['user_reference_list'].append({\"kind\":\"user\", \"uuid\":uuid})\n\n    group_list = []\n    if params.get(\"tenant_group\", \"None\") != \"None\":\n        for group in params['tenant_group']:\n            user_list.append(create_group(group, **params))\n        for uuid in group_list:\n            payload['spec']['project_detail']['resources']\\\n                ['external_user_group_reference_list'].append({\\\n                \"kind\":\"user_group\", \"uuid\":uuid})\n    \n    for x in range(len(payload['spec']['access_control_policy_list'])):\n        payload['spec']['access_control_policy_list'][x]['operation'] = \"UPDATE\"\n        \n    pprint(payload)\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects_internal\/{}\".format(project['uuid']))\n    data = requests.put(url, json=payload,\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                           @@{prism_central_passwd}@@),\n                        timeout=None, verify=False)\n    task = wait_for_completion(data)\n    print(\"Project %s updated successfully\"%project.get('name', \"\"))\n    \ndef wait_for_completion(data):\n    if data.status_code in [200, 202]:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(\n                                    @@{prism_central_username}@@, \n                                    @@{prism_central_passwd}@@),\n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Got error ---> \",responce.json())\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"COMPLETE\"\n    else:\n        if \"DUPLICATE\" not in str(data.json()):\n            state = data.json().get('state')\n            print(\"Got %s ---> \"%state, data.json())\n            exit(1)\n  \ndef _get_user_spec():\n    return ({\n        \"api_version\": \"3.1.0\",\n        \"metadata\": {\n            \"kind\" : \"user\"\n            },\n        \"spec\": {\n            \"resources\": {}\n            }\n        })\n\ndef _get_group_spec():\n    return ({\n              \"api_version\": \"3.1.0\",\n              \"metadata\": {\n                \"kind\": \"user_group\"\n                  },\n             \"spec\": {\n                \"resources\": {\n                      \"directory_service_user_group\": {\n                        \"distinguished_name\": \"\"\n                          }\n                    }\n                  }\n            })\n            \ndef convert_domain_to_ad_path(group_name):\n    path = ''\n    g_name, domain = group_name[0].split(\"@\")\n    path = \"cn=%s,cn=users\"%g_name\n    for i in domain.split(\".\"):\n        path = path + ',DC={}'.format(i)\n    \n    return path\n    \ndef create_group(group, **params):\n    payload = _get_group_spec()\n    group_name = convert_domain_to_ad_path(group)\n    payload['spec']['resources']['directory_service_user_group']\\\n                    ['distinguished_name'] = group_name\n    url = _build_url(scheme=\"https\",resource_type=\"\/user_groups\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                           @@{prism_central_passwd}@@),\n                        timeout=None, verify=False)    \n    wait_for_completion(data)\n    \n    if not data.ok:\n        if \"DUPLICATE\" in str(data.json()):\n            url = _build_url(scheme=\"https\",resource_type=\"\/user_groups\/list\")                        \n            data = requests.post(url, json={\"kind\":\"user_group\", \"length\":9999},\n                                 auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                                    @@{prism_central_passwd}@@),\n                                 timeout=None, verify=False)   \n            if group.split(\"@\")[0] in str(data.json()):\n                for new_data in data.json()['entities']:\n                    if new_data['status']['resources']['display_name'] == group.split(\"@\")[0]:\n                        return new_data['metadata']['uuid']\n        else:\n            print(\"Error while creating user_group ----> \",data.json()['message_list'])\n            exit(1)\n    else:\n        return data.json()['metadata']['uuid']    \n            \ndef create_user(user, **params):\n    payload = _get_user_spec()   \n    if params.get('tenant_users', \"None\") != \"None\":\n        payload['spec']['resources']['directory_service_user'] = {}\n        payload['spec']['resources']['directory_service_user']\\\n                                ['user_principal_name'] =  user\n\n    payload['spec']['resources']['directory_service_user']\\\n            ['directory_service_reference'] = {}\n    payload['spec']['resources']['directory_service_user']\\\n            ['directory_service_reference']['kind'] = \"directory_service\"\n    payload['spec']['resources']['directory_service_user']\\\n                ['directory_service_reference']['uuid'] = params['directory_uuid']\n        \n    #url = _build_url(scheme=\"https\",\n    #                resource_type=\"\/idempotence_identifiers\")\n    #data = requests.post(url, json={\"count\": 1,\"valid_duration_in_minutes\": 527040},\n    #                    auth=HTTPBasicAuth(@@{prism_central_username}@@, \n    #                                       @@{prism_central_passwd}@@),\n    #                    timeout=None, verify=False)                   \n    #if data.ok:\n    #    payload['metadata']['uuid'] = data.json()['uuid_list'][0]   \n        \n    url = _build_url(scheme=\"https\",resource_type=\"\/users\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                           @@{prism_central_passwd}@@),\n                        timeout=None, verify=False)    \n    \n    wait_for_completion(data)\n\n    if not data.ok:\n        if \"DUPLICATE\" in str(data.json()):\n            _url = _build_url(scheme=\"https\",resource_type=\"\/users\/list\")                        \n            _data = requests.post(_url, json={\"kind\":\"user\", \"length\":9999},\n                                 auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                                    @@{prism_central_passwd}@@),\n                                 timeout=None, verify=False)   \n            if user in str(_data.json()):\n                for new_data in _data.json()['entities']:\n                    if new_data['status']['name'] == user:\n                        return new_data['metadata']['uuid']\n        else:\n            print(\"Error while creating user ----> \",data.json()['message_list'])\n            exit(1)\n    else:\n        return data.json()['metadata']['uuid']\n\nupdate_project()","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"7eb8140d_runbook","main_task_local_reference":{"kind":"app_task","name":"dfc518a7_dag"},"variable_list":[{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"user_items","value":"{\n\"tenant_users\": [\"ssptest3@qa.nucalm.io\"],\n\"directory_uuid\" : \"e05fbc3e-d7db-4379-97e7-28a7eaea2bc9\"\n}","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"project_details","value":"{'name': \"test_project1\", 'uuid': \"abe28446-2fee-433b-ba1d-d0f31c24cb55\"}","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_passwd","value":"2\/CQPiFU3RguQbkzZMTZrnUic8sr4s1M6AGykQCEiKBhilRBE74rkaW6I5FE:utf-8","label":"","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_username","value":"eyjJlKvld2RGM+hdJWK3TH11KecleSClQROUEspybhTumjq9ewr1:utf-8","label":"","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"\"10.44.76.88\"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"Update Project User and Groups"},"api_version":"3.0","metadata":{"last_update_time":"1646299926362604","kind":"runbook","spec_version":92,"creation_time":"1645443023095289","name":"Update Project User and Groups"}}