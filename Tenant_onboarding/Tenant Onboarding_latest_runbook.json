{"status":{},"contains_secrets":true,"product_version":"3.2.7","spec":{"description":"","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Task 1"},{"kind":"app_task","name":"Generate Tenant UID"},{"kind":"app_task","name":"Create AD"},{"kind":"app_task","name":"Create Categories"},{"kind":"app_task","name":"Create External Subnet"},{"kind":"app_task","name":"Create VPC"},{"kind":"app_task","name":"Create Overlay Subnet"},{"kind":"app_task","name":"Create Project"},{"kind":"app_task","name":"Create ACP"},{"kind":"app_task","name":"Create Environment"},{"kind":"app_task","name":"Update Project"}],"name":"8ee0af0e_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Task 1"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Generate Tenant UID"}},{"from_task_reference":{"kind":"app_task","name":"Generate Tenant UID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create External Subnet"}},{"from_task_reference":{"kind":"app_task","name":"Generate Tenant UID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create AD"}},{"from_task_reference":{"kind":"app_task","name":"Create External Subnet"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create VPC"}},{"from_task_reference":{"kind":"app_task","name":"Create VPC"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create Overlay Subnet"}},{"from_task_reference":{"kind":"app_task","name":"Create Overlay Subnet"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create Project"}},{"from_task_reference":{"kind":"app_task","name":"Create Project"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create ACP"}},{"from_task_reference":{"kind":"app_task","name":"Create ACP"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create Environment"}},{"from_task_reference":{"kind":"app_task","name":"Generate Tenant UID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create Categories"}},{"from_task_reference":{"kind":"app_task","name":"Create Environment"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Update Project"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Task 1","attrs":{"type":"","interval_secs":1},"timeout_secs":"0","type":"DELAY","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Generate Tenant UID","attrs":{"exit_status":[],"script":"import requests\nfrom requests.auth import HTTPBasicAuth\n\nROLE_ADMIN = \"Project Admin\"\nROLE_OPERATOR = \"Operator\"\nDOMAIN = 'qa.nucalm.io'\nROOT_OU = 'tenants'\ndef convert_domain_to_ad_path(domain, root_ou):\n    path = ''\n    if domain[len(domain)-1:] != '.':\n        domain = domain + '.'\n    \n    while domain.find('.') >= 0:\n        x = domain.find('.')\n        path = path + ',DC={}'.format(domain[:x])\n        domain = domain[x+1:]\n    \n    return '{},{}'.format(root_ou, path[1:])\n\ndef get_role_uuid(role_name):\n    api_url = 'https:\/\/{}:9440\/api\/nutanix\/v3\/roles\/list'.format(@@{PC_IP}@@)\n    payload = {\n      'filter': 'name=={}'.format(role_name),\n      'kind': 'role',\n      'offset': 0\n    }\n    r = requests.post(api_url, json=payload, \n                    auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                       @@{prism_central_passwd}@@), \n                    timeout=None, verify=False)\n    \n    result = json.loads(r.content)\n    if result['entities']:\n        return result['entities'][0]['metadata']['uuid']\n    else:\n        return None\n\nad_path = convert_domain_to_ad_path(DOMAIN, ROOT_OU)\nadmin_role_uuid = get_role_uuid(ROLE_ADMIN)\noperator_role_uuid = get_role_uuid(ROLE_OPERATOR)\nuid = uuid.uuid4()\n\nprint(\"UID={}\".format({\"tenant_uuid\":'%s'%uid}))\nprint('AD_PATH=OU={}'.format(ad_path))\nprint('ROLE_ADMIN_UUID={}'.format(admin_role_uuid))\nprint('ROLE_OPERATOR_UUID={}'.format(operator_role_uuid))","eval_variables":["UID","AD_PATH","ROLE_ADMIN_UUID","ROLE_OPERATOR_UUID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create AD","attrs":{"exit_status":[],"script":"import requests\nfrom requests.auth import HTTPBasicAuth\n\ndef _build_url(scheme, resource_type, host=@@{PC_IP}@@, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_default_spec():\n    return ({\n            \"api_version\": \"3.1.0\",\n            \"metadata\": {\n                \"kind\": \"directory_service\"\n                },\n            \"spec\": {\n                \"name\": \"\",\n                \"resources\": {\n                    \"url\": \"\",\n                    \"domain_name\": \"\",\n                    \"directory_type\": \"\",\n                    \"service_account\": {\n                        \"username\": \"string\",\n                        \"password\": \"string\"\n                        }\n                    }\n                }\n            })\n\ndef _get_spec_acp():\n    return ({\n            \"api_version\": \"3.1.0\",\n            \"metadata\": {\n            \"kind\" : \"access_control_policy\"\n                    },\n            \"spec\": {\n                \"name\": \"string\",\n                \"role_reference\": {\"uuid\": \"\"}\n                }\n            })\n            \ndef create_AD(**params):\n    payload = _get_default_spec()\n    payload['spec']['name'] = params['name']\n    payload['spec']['resources']['url'] = params['directory_url']\n    payload['spec']['resources']['domain_name'] = params['domain_name']\n    payload['spec']['resources']['directory_type'] = params['directory_type']\n    payload['spec']['resources']['service_account']['username'] = \\\n                                    params['service_account_username']\n    payload['spec']['resources']['service_account']['password'] = \\\n                                    params['service_account_password']\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/directory_services\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(\"admin\", \"Nutanix.123\"),\n                        timeout=None, verify=False)\n    task_uuid = wait_for_completion(data, params['name'])\n    print(\"ad_details={}\".format({\"ad_uuid\": data.json()['metadata']['uuid'],\n                                  \"ad_creation_task_uuid\": task_uuid,\n                                  \"name\":params['name']}))\n\ndef wait_for_completion(data, name):\n    if data.status_code in [200, 202]:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(\"admin\",\"Nutanix.123\"), \n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Got error while configuring AD ---> \",responce.json()['message_list'])\n                state = 'FAILED'\n                exit(1)\n            else:\n                _url = _build_url(scheme=\"https\",resource_type=\"\/directory_services\/list\")\n                _data = requests.post(_url, json={\"kind\":\"directory_service\"},\n                                        auth=HTTPBasicAuth(@@{prism_central_username}@@,\n                                                           @@{prism_central_passwd}@@),\n                                        timeout=None, verify=False)\n                if name in str(_data.json()):\n                    state = \"COMPLETE\"\n                else:\n                    state = 'PENDING'\n                    sleep(5) \n    else:\n        state = data.json().get('state')\n        print(\"Got %s while configuring AD ---> \"%state, data.json())\n        exit(1)\n    return data.json()['status']['execution_context']['task_uuid']\n\ndef validate_params():\n    params = @@{AD_items}@@\n    print(\"##### Configuring Active Directory #####\")\n    for x in range(len(params)):\n        create_AD(**params[x])                                                      \n\nvalidate_params()","eval_variables":["ad_details"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create Categories","attrs":{"script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nexternal_subnets = @@{external_subnet_items}@@\ncategoryCountName = '@@{UID}@@-external_subnets'\nNumber_of_ext_subnets = len(external_subnets)\n\n# Get PC IP and PE uuid\nbase_url = 'https:\/\/{}:9440\/api\/nutanix\/v3\/categories'.format(@@{PC_IP}@@)\n\npayload = {\n    \"api_version\": \"3.1.0\",\n    \"name\": categoryCountName,\n    \"description\": \"Tenant Onboarding has %s subnets\"%Number_of_ext_subnets\n}\n\napi_url = base_url + '\/' + categoryCountName\n\nr = requests.put(api_url, json=payload, \n                 auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                     @@{prism_central_passwd}@@),\n                 timeout=None, verify=False)\nif r.ok:\n    print(\"Category created: {}\".format(categoryCountName))\n\nelse:\n    print(\"Post request failed\", r.content)\n    exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create External Subnet","attrs":{"exit_status":[],"script":"#script\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\ndef _build_url(scheme, resource_type, host=@@{PC_IP}@@, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n  \ndef _get_cluster_details(cluster_name):\n    cluster_details = {'kind':'cluster'}\n    payload = {\"entity_type\": \"cluster\", \"filter\": \"name==%s\"%cluster_name}\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/groups\")\n    data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(@@{prism_central_username}@@, @@{prism_central_passwd}@@), \n                         verify=False)\n    cluster_details['uuid'] = str(data.json()['group_results'][0]['entity_results'][0]['entity_id'])\n    return cluster_details\n\ndef _get_default_spec():\n    return (\n        {\n          \"api_version\": \"3.1.0\",\n          \"metadata\": {\"kind\": \"subnet\"},\n          \"spec\": {\n                  \"name\": \"\",\n                  \"resources\": {\n                      \"ip_config\": {},\n                      \"subnet_type\": None,\n                      },\n                  },\n              }\n          )\n\ndef _get_ipam_spec(**params):\n    ipam_spec = {}\n    if params['set_ipam'] == 'yes':\n        ipam_spec = _get_default_ipconfig_spec()\n        ipam_config = params[\"ipam\"]\n        ipam_spec[\"subnet_ip\"] = ipam_config[\"network_ip\"]\n        ipam_spec[\"prefix_length\"] = ipam_config[\"network_prefix\"]\n        ipam_spec[\"default_gateway_ip\"] = ipam_config[\"gateway_ip\"]\n        pools = \"\"\n        pools += \"%s %s\"%(ipam_config['ip_pools']['start_ip'], ipam_config['ip_pools']['end_ip'])\n        ipam_spec[\"pool_list\"] = [{\"range\": pools}]\n    return ipam_spec\n\ndef _get_default_ipconfig_spec():\n    return (\n        {\n         \"subnet_ip\": None,\n         \"prefix_length\": None,\n         \"default_gateway_ip\": None,\n         \"pool_list\": [],\n        }\n      )\n\ndef create_external_subnet(**params):\n    params['cluster_reference'] = _get_cluster_details(\n                                cluster_name=params['cluster_name'])\n    params['ipam_spec'] = _get_ipam_spec(**params)\n    payload = _get_default_spec()\n    if params['uuid'] != \"None\":\n        payload[\"spec\"]['uuid'] = params['uuid']\n    payload[\"spec\"]['name'] = params['name']\n    payload[\"spec\"][\"resources\"][\"subnet_type\"] = \"VLAN\"\n    payload[\"spec\"][\"resources\"][\"vlan_id\"] = params['vlan_id']\n    payload[\"spec\"][\"resources\"][\"ip_config\"] = params['ipam_spec']\n    payload[\"spec\"][\"cluster_reference\"] = params['cluster_reference']\n    payload[\"spec\"][\"resources\"][\"is_external\"] = True\n    payload[\"spec\"][\"resources\"][\"enable_nat\"] = params['enable_nat']\n    if params['operation'] == \"update\":\n        update_subnet(**payload)\n    else:\n        url = _build_url(scheme=\"https\",\n                        resource_type=\"\/subnets\")    \n        data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                            @@{prism_central_passwd}@@),\n                         timeout=None, verify=False)\n        task_uuid = wait_for_completion(data)\n        task = {\"uuid\": data.json()['metadata']['uuid'],\n             \"create_subnet_task_uuid\":task_uuid,\n             \"name\": params['name']}\n        return task\n\ndef wait_for_completion(data):\n    if data.status_code in [200, 202]:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(@@{prism_central_username}@@, @@{prism_central_passwd}@@), \n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Got error while creating subnet ---> \",responce.json())\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"COMPLETE\"\n    else:\n        state = data.json().get('state')\n        print(\"Got %s while creating subnet ---> \"%state, data.json())\n        exit(1)\n    return data.json()['status']['execution_context']['task_uuid']\n            \ndef validate_params():\n    params = {}\n    params['operation'] = @@{operation}@@\n    if params['operation'] == \"delete\":\n        exit(0)\n    else:\n        print(\"##### creating external subnet #####\")\n        _params = @@{external_subnet_items}@@\n        params['operation'] = @@{operation}@@\n        subnets = []\n        for x in range(len(_params)):\n            params_dict = _params[x]\n            params['name'] = params_dict['name']\n            params['uuid'] = params_dict.get('uuid', \"None\")\n            params['enable_nat'] = params_dict['enable_nat']\n            params['cluster_name'] = params_dict['cluster']\n            params['vlan_id'] = params_dict['vlan_id']\n            params['ipam'] = {}\n            params['set_ipam'] = \"yes\"\n            params['ipam']['network_ip'] = params_dict['network_ip']\n            params['ipam']['network_prefix'] = params_dict['prefix']\n            params['ipam']['gateway_ip'] = params_dict['gateway_ip']\n            params['ipam']['ip_pools'] = {}\n            params['ipam']['ip_pools']['start_ip'] = params_dict['ip_pools_start_ip'] \n            params['ipam']['ip_pools']['end_ip'] = params_dict['ip_pools_end_ip']\n            subnet = create_external_subnet(**params)\n            subnets.append(subnet)\n        print(\"external_subnet_details={}\".format(subnets))\nvalidate_params()","eval_variables":["external_subnet_details"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create VPC","attrs":{"exit_status":[],"script":"#script\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\ndef _build_url(scheme, resource_type, host=@@{PC_IP}@@, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_default_spec():\n    return(\n            {\n            \"api_version\": \"3.1.0\",\n            \"metadata\": {\"kind\": \"vpc\", \"categories\": {}},\n            \"spec\": {\n                \"name\": None,\n                \"resources\": {\n                    \"external_subnet_list\": []\n                    },\n                },\n            })\n\ndef create_vpc(**params):\n    payload = _get_default_spec()\n    if params['uuid'] != \"None\":\n        payload[\"spec\"]['uuid'] = params['uuid']\n    payload[\"spec\"]['name'] = params['name']\n    if params.get(\"common_domain_name_server_ip_list\", \"None\") != \"None\":\n        payload[\"spec\"][\"resources\"][\"common_domain_name_server_ip_list\"] = \\\n                                params[\"common_domain_name_server_ip_list\"]\n    payload[\"spec\"][\"resources\"][\"external_subnet_list\"] = \\\n                                params[\"external_subnet_list\"]\n    if params.get(\"externally_routable_prefix_list\", \"None\") != \"None\":\n        payload[\"spec\"][\"resources\"][\"externally_routable_prefix_list\"] = \\\n                                params[\"externally_routable_prefix_list\"]\n    if params['operation'] == \"update\":\n        update_vpc(**payload)\n    else:\n        url = _build_url(scheme=\"https\",\n                        resource_type=\"\/vpcs\")    \n        data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                            @@{prism_central_passwd}@@),\n                         timeout=None, verify=False)\n        task_uuid = wait_for_completion(data)\n        vpc = {\"name\": params['name'], \n               \"uuid\":data.json()['metadata']['uuid'],\n               \"create_vpc_task_uuid\": task_uuid}\n        return vpc\n\ndef update_vpc(**payload):\n    _url = _build_url(scheme=\"https\",\n                    resource_type=\"\/vpcs\/list\")\n    _data = requests.post(_url, json={\"kind\": \"vpc\"},\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                           @@{prism_central_passwd}@@),\n                        verify=False)\n    _uuid = \"\"\n    if payload[\"spec\"]['name'] in str(_data.json()):\n        for x in range(len(_data.json()['entities'])):\n            if str(_data.json()['entities'][x]['spec']['name']) == payload[\"spec\"]['name']:\n                _uuid = str(_data.json()['entities'][x]['metadata']['uuid'])\n                print(\"_uuid of subnet ----> \", _uuid)\n                payload['metadata']['spec_version'] = _data.json()['entities']\\\n                                        [x]['metadata']['spec_version']\n    else:\n        print(\"Error ---> %s VPC not present on host\"%payload[\"spec\"]['name'])\n        exit(1)\n    if payload['spec']['uuid'] != \"None\":\n        _uuid = payload['spec']['uuid']\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/vpcs\/%s\"%_uuid)\n    data = requests.put(url, json=payload,\n                         auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                            @@{prism_central_passwd}@@),\n                         timeout=None, verify=False)\n    task_uuid = wait_for_completion(data)\n\ndef wait_for_completion(data):\n    if data.status_code in [200, 202]:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                                            @@{prism_central_passwd}@@), \n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Got error while creating VPC ---> \",responce.json())\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"COMPLETE\"\n    else:\n        state = data.json().get('state')\n        print(\"Got %s while creating VPC ---> \"%state, data.json())\n        exit(1)\n    return data.json()['status']['execution_context']['task_uuid']\n    \ndef _get_vlan_uuid(**params):\n    vlan_name = params[\"external_subnet_name\"]\n    existing_subnet = @@{external_subnet_details}@@\n    for _subnet in existing_subnet:\n        if _subnet['name'] == vlan_name:\n            return _subnet['uuid']\n    _url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/list\")\n    _data = requests.post(_url, json={\"kind\": \"subnet\"},\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                           @@{prism_central_passwd}@@),\n                        verify=False)\n    _uuid = \"\"\n    if vlan_name in str(_data.json()):\n        for x in range(len(_data.json()['entities'])):\n            if str(_data.json()['entities'][x]['spec']['name']) == vlan_name:\n                _uuid = str(_data.json()['entities'][x]['metadata']['uuid'])\n                return _uuid\n    else:\n        print(\"Error ---> %s subnet not present on host\"%vlan_name)\n        exit(1)\n\ndef validate_params():\n    params = {}\n    params['operation'] = @@{operation}@@\n    if params['operation'] == \"delete\":\n        exit(0)\n    else:      \n        print(\"##### creating VPC #####\")\n        vpc_details = []\n        _params = @@{vpc_items}@@\n        params['operation'] = @@{operation}@@\n        for x in range(len(_params)):\n            params_dict = _params[x]\n            params['name'] = params_dict['name']\n            params['uuid'] = params_dict.get('uuid', \"None\")\n            if params_dict.get(\"common_domain_name_server_ip_list\", \"None\") != \"None\":\n                params[\"common_domain_name_server_ip_list\"] = [{}]\n                params[\"common_domain_name_server_ip_list\"][0]['ip'] = \\\n                                            params_dict['dns_servers']\n            params[\"external_subnet_list\"] = [{}]\n            if params_dict.get(\"externally_routable_prefix_list\", \"None\") != \"None\":\n                params[\"externally_routable_prefix_list\"] = [{}]\n                params[\"externally_routable_prefix_list\"][0][\"ip\"] = \\\n                                            params_dict[\"externally_routable_ip\"]\n                params[\"externally_routable_prefix_list\"][0][\"prefix_length\"] = \\\n                                            params_dict[\"externally_routable_ip_prefix\"]\n            params[\"external_subnet_list\"][0][\"external_subnet_reference\"] = {}\n            params[\"external_subnet_list\"][0][\"external_subnet_reference\"][\"kind\"] = \"subnet\"\n            params[\"external_subnet_list\"][0][\"external_subnet_reference\"][\"name\"] = \\\n                                            params_dict[\"external_subnet_name\"]\n            if params_dict.get(\"external_subnet_uuid\", \"None\") == \"None\":\n                params[\"external_subnet_list\"][0][\"external_subnet_reference\"][\"uuid\"] = \\\n                                            _get_vlan_uuid(**params_dict)\n            vpc_details.append(create_vpc(**params))\n        print(\"vpc_details={}\".format(vpc_details))\n\nvalidate_params()","eval_variables":["vpc_details"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create Overlay Subnet","attrs":{"exit_status":[],"script":"#script\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\nfrom base64 import b64encode\n\ndef _build_url(host, scheme, resource_type, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_vpc_details(vpc_name):\n    for vpc in @@{vpc_details}@@:\n        if vpc['name'] == vpc_name:\n            _vpc = {\"kind\": \"vpc\", \"uuid\": vpc['uuid']}\n            return _vpc\n\ndef _get_virtual_switch_uuid(virtual_switch_name):\n    payload = {\"entity_type\": \"distributed_virtual_switch\", \n               \"filter\": \"name==%s\"%virtual_switch_name}\n    url = _build_url(host=@@{PC_IP}@@,\n                    scheme=\"https\",\n                    resource_type=\"\/groups\")                \n    data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(@@{prism_central_username}@@, @@{prism_central_passwd}@@),\n                         verify=False)\n    print(\"virtual switch uuid ----> \",data.json()['group_results'][0]['entity_results'][0]['entity_id'])\n    return str(data.json()['group_results'][0]['entity_results'][0]['entity_id'])\n  \ndef _get_cluster_details(cluster_name):\n    cluster_details = {'kind':'cluster'}\n    payload = {\"entity_type\": \"cluster\", \"filter\": \"name==%s\"%cluster_name}\n    url = _build_url(host=@@{PC_IP}@@,\n                    scheme=\"https\",\n                    resource_type=\"\/groups\")\n    data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(@@{prism_central_username}@@, @@{prism_central_passwd}@@), \n                         verify=False)\n    cluster_details['uuid'] = str(data.json()['group_results'][0]['entity_results'][0]['entity_id'])\n    return cluster_details\n\ndef _get_default_spec():\n    return (\n        {\n          \"api_version\": \"3.1.0\",\n          \"metadata\": {\"kind\": \"subnet\"},\n          \"spec\": {\n                  \"name\": \"\",\n                  \"resources\": {\n                      \"ip_config\": {},\n                      \"subnet_type\": None,\n                      },\n                  },\n              }\n          )\n\ndef _get_ipam_spec(**params):\n    ipam_spec = {}\n    if params['set_ipam'] == 'yes':\n        ipam_spec = _get_default_ipconfig_spec()\n        ipam_config = params[\"ipam\"]\n        ipam_spec[\"subnet_ip\"] = ipam_config[\"network_ip\"]\n        ipam_spec[\"prefix_length\"] = ipam_config[\"network_prefix\"]\n        ipam_spec[\"default_gateway_ip\"] = ipam_config[\"gateway_ip\"]\n        pools = \"\"\n        pools += \"%s %s\"%(ipam_config[\"ip_pools\"]['start_ip'], ipam_config[\"ip_pools\"]['end_ip'])\n        ipam_spec[\"pool_list\"] = [{\"range\": pools}]\n        if \"dhcp_options\" in ipam_config:\n            dhcp_spec = _get_default_dhcp_spec()\n            dhcp_config = ipam_config[\"dhcp_options\"]\n            if dhcp_config['domain_name_server_list'] != 'NA': \n                dhcp_spec[\"domain_name_server_list\"] = dhcp_config[\"domain_name_server_list\"]\n            if dhcp_config[\"domain_search_list\"] != 'NA':\n                dhcp_spec[\"domain_search_list\"] = dhcp_config[\"domain_search_list\"]\n            if dhcp_config[\"domain_name\"] != 'NA':\n                dhcp_spec[\"domain_name\"] = dhcp_config[\"domain_name\"]\n            if dhcp_config[\"boot_file_name\"] != 'NA':\n              dhcp_spec[\"boot_file_name\"] = dhcp_config[\"boot_file_name\"]\n            if dhcp_config[\"tftp_server_name\"] != 'NA':\n                dhcp_spec[\"tftp_server_name\"] = dhcp_config[\"tftp_server_name\"]\n            ipam_spec[\"dhcp_options\"] = dhcp_spec\n    return ipam_spec\n\ndef _get_default_ipconfig_spec():\n    return (\n        {\n         \"subnet_ip\": None,\n         \"prefix_length\": None,\n         \"default_gateway_ip\": None,\n         \"pool_list\": [],\n        }\n      )\n\ndef _get_default_dhcp_spec():\n    return (\n      {\n        \"domain_name_server_list\": [],\n        \"domain_search_list\": [],\n        \"domain_name\": \"\",\n                \"boot_file_name\": \"\",\n                \"tftp_server_name\": \"\",\n       }\n    )\n\ndef update_subnet(**payload):\n    _url = _build_url(host=@@{PC_IP}@@,\n                    scheme=\"https\",\n                    resource_type=\"\/subnets\/list\")\n    _data = requests.post(_url, json={\"kind\": \"subnet\"},\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, @@{prism_central_passwd}@@),\n                        verify=False)\n    _uuid = \"\"\n    if payload[\"spec\"]['name'] in str(_data.json()):\n        for x in range(len(_data.json()['entities'])):\n            if str(_data.json()['entities'][x]['spec']['name']) == payload[\"spec\"]['name']:\n                _uuid = str(_data.json()['entities'][x]['metadata']['uuid'])\n                payload['metadata']['spec_version'] = _data.json()['entities'][x]['metadata']['spec_version']\n    else:\n        print(\"Error ---> %s subnet not present on host\"%payload[\"spec\"]['name'])\n        exit(1)\n    print(\"_uuid of subnet ----> \", _uuid)\n    url = _build_url(host=@@{PC_IP}@@,\n                    scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%_uuid)\n    data = requests.put(url, json=payload,\n                         auth=HTTPBasicAuth(@@{prism_central_username}@@, @@{prism_central_passwd}@@),\n                         timeout=None, verify=False)\n    wait_for_completion(data)\n\ndef wait_for_completion(data):\n    if data.status_code in [200, 202]:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(host=@@{PC_IP}@@,\n                        scheme=\"https\",\n                        resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(@@{prism_central_username}@@, @@{prism_central_passwd}@@), \n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Got error while creating subnet ---> \",responce.json())\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"COMPLETE\"\n    else:\n        state = data.json().get('state')\n        print(\"Got %s while creating subnet ---> \"%state, data.json())\n        exit(1)\n    return data.json()['status']['execution_context']['task_uuid']  \n    \ndef overlay_subnet():\n    params = {}\n    params['operation'] = @@{operation}@@\n    if params['operation'] == \"delete\":\n        exit(0)\n    else:\n        _params = @@{overlay_subnet_items}@@\n        overlay_subnet_details = []\n        for x in range(len(_params)):\n            print(\"##### Creating Overlay Subnets #####\")\n            sleep(2)\n            params_dict = _params[x]\n            params['operation'] = @@{operation}@@\n            params['vpc_name'] = params_dict['vpc_name']\n            params['ipam'] = {}\n            params['set_ipam'] = \"yes\"\n            params['ipam']['network_ip'] = params_dict['network_ip']\n            params['ipam']['network_prefix'] = params_dict['prefix']\n            params['ipam']['gateway_ip'] = params_dict['gateway_ip']\n            params['ipam']['ip_pools'] = {}\n            params['ipam']['ip_pools']['start_ip'] = params_dict.get('dhcp_start_ip', 'NA')\n            params['ipam']['ip_pools']['end_ip'] = params_dict.get('dhcp_end_ip', 'NA')\n            params['ipam']['dhcp_options'] = {}\n            params['ipam']['dhcp_options']['domain_name_server_list'] = params_dict['dns_servers']\n            params['ipam']['dhcp_options']['domain_search_list'] = params_dict['domain_search']\n            params['ipam']['dhcp_options']['domain_name'] = params_dict['domain_name']\n            params['ipam']['dhcp_options']['boot_file_name'] = params_dict.get('boot_file', \"NA\")\n            params['ipam']['dhcp_options']['tftp_server_name'] = params_dict.get('tftp_server', \"NA\")\n            params['vpc_reference'] = _get_vpc_details(params['vpc_name'])\n            payload = _get_default_spec()\n            payload[\"spec\"]['name'] = params_dict['subnet_name']\n            payload[\"spec\"][\"resources\"][\"subnet_type\"] = \"OVERLAY\"\n            payload[\"spec\"][\"resources\"][\"vpc_reference\"] = params['vpc_reference']\n            params['ipam_spec'] = _get_ipam_spec(**params)\n            payload[\"spec\"][\"resources\"][\"ip_config\"] = params['ipam_spec']\n            print(\"%s - %s\"%(params_dict['subnet_name'], payload))\n            if params['operation'] == \"update\":\n                update_subnet(**payload)\n            else:\n                url = _build_url(host=@@{PC_IP}@@,\n                        scheme=\"https\",\n                        resource_type=\"\/subnets\")    \n                data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(@@{prism_central_username}@@, @@{prism_central_passwd}@@),\n                         timeout=None, verify=False)\n                task_uuid = wait_for_completion(data)\n                details = {\"uuid\":data.json()['metadata']['uuid'],\n                               \"name\": params_dict['subnet_name'],\n                               \"create_subnet_task_uuid\": task_uuid}\n                overlay_subnet_details.append(details)\n        print(\"overlay_subnet_details={}\".format(overlay_subnet_details))\noverlay_subnet()","eval_variables":["overlay_subnet_details"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create Project","attrs":{"exit_status":[],"script":"# script\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\ndef _build_url(scheme, resource_type, host=@@{PC_IP}@@, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_default_spec():\n    return (\n        {\n          \"api_version\": \"3.1.0\",\n          \"metadata\": {\"kind\": \"project\"},\n          \"spec\": {\n            \"name\": \"\",\n            \"resources\": {}\n                }\n            }\n        )\n\ndef _get_user_spec():\n    return ({\n        \"api_version\": \"3.1.0\",\n        \"metadata\": {\n            \"kind\" : \"user\"\n            },\n        \"spec\": {\n            \"resources\": {}\n            }\n        })\n\ndef _get_group_spec():\n\treturn ({\n  \t\t\t\"api_version\": \"3.1.0\",\n  \t\t\t\"metadata\": {\n    \t\t\t\"kind\": \"user_group\"\n  \t\t\t\t},\n \t\t\t\"spec\": {\n    \t\t\t\"resources\": {\n      \t\t\t\t\"directory_service_user_group\": {\n        \t\t\t\t\"distinguished_name\": \"\"\n      \t\t\t\t\t}\n    \t\t\t\t}\n  \t\t\t\t}\n\t\t\t})\n            \ndef convert_domain_to_ad_path(group_name):\n    path = ''\n    g_name, domain = group_name[0].split(\"@\")\n    path = \"cn=%s,cn=users\"%g_name\n    for i in domain.split(\".\"):\n        path = path + ',DC={}'.format(i)\n    \n    return path\n    \ndef create_group(**params):\n    payload = _get_group_spec()\n    group_name = convert_domain_to_ad_path(params['tenant_group'])\n    if params.get('tenant_group', \"None\") != \"None\":\n        payload['spec']['resources']['directory_service_user_group']\\\n        \t\t\t['distinguished_name'] = group_name\n    url = _build_url(scheme=\"https\",resource_type=\"\/user_groups\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                           @@{prism_central_passwd}@@),\n                        timeout=None, verify=False)    \n    wait_for_completion(data)\n    \n    if not data.ok:\n        if \"DUPLICATE\" in str(data.json()):\n            return \"ok\"\n        else:\n            print(\"Error while creating user_group ----> \",data.json()['message_list'])\n            return \"None\"\n    else:\n        return \"ok\"    \n            \ndef create_user(user, **params):\n    payload = _get_user_spec()   \n    if params.get('tenant_users', \"None\") != \"None\":\n        payload['spec']['resources']['directory_service_user'] = {}\n        payload['spec']['resources']['directory_service_user']\\\n                                ['user_principal_name'] =  user\n\n    if params.get('ad_name', \"None\") == \"None\":\n        payload['spec']['resources']['directory_service_user']\\\n            ['directory_service_reference'] = {}\n        payload['spec']['resources']['directory_service_user']\\\n            ['directory_service_reference']['kind'] = \"directory_service\"\n        sleep(10)\n        ad_details = @@{ad_details}@@\n        payload['spec']['resources']['directory_service_user']\\\n                ['directory_service_reference']['uuid'] = ad_details['ad_uuid']\n      \n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/idempotence_identifiers\")\n    data = requests.post(url, json={\"count\": 1,\"valid_duration_in_minutes\": 527040},\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                           @@{prism_central_passwd}@@),\n                        timeout=None, verify=False)                   \n    user_uuid = \"\"\n    if data.ok:\n        user_uuid = data.json()['uuid_list'][0]\n        payload['metadata']['uuid'] = user_uuid\n    url = _build_url(scheme=\"https\",resource_type=\"\/users\")\n    pprint(payload)\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                           @@{prism_central_passwd}@@),\n                        timeout=None, verify=False)    \n    \n    wait_for_completion(data)\n    if not data.ok:\n        if \"DUPLICATE\" in str(data.json()['message_list']):\n            return \"ok\"\n        else:\n            print(\"Error while creating user ----> \",data.json()['message_list'])\n            return \"None\"\n    else:\n        return user_uuid\n\ndef build_project(**params):\n    payload = _get_default_spec()\n    payload['spec']['name'] = params['name']\n\n    if params.get(\"quotas\", \"None\") != \"None\":\n        payload['spec']['resources']['resource_domain'] = {}    \n        resources = []\n        for resource in params['quotas']:\n            if resource.get(\"mem_bytes\", \"None\") != \"None\":\n                resources.append({\"resource_type\":\"MEMORY\", \"limit\":resource['mem_bytes']})\n            if resource.get(\"storage_bytes\", \"None\") != \"None\":\n                resources.append({\"resource_type\":\"STORAGE\", \"limit\":resource['storage_bytes']})\n            if resource.get(\"vcpu\", \"None\") != \"None\":\n                resources.append({\"resource_type\":\"VCPUS\", \"limit\":resource['vcpu']})\n        payload['spec']['resources']['resource_domain']['resources'] = resources\n        \n    #if params.get(\"subnets\", \"None\") != \"None\":\n    #    payload['spec']['resources'][\"subnet_reference_list\"] = []\n    #    url = _build_url(scheme=\"https\",resource_type=\"\/subnets\/list\")\n    #    data = requests.post(url, json={\"kind\":\"subnet\", \"length\":9999},\n    #                    auth=HTTPBasicAuth(@@{prism_central_username}@@, \n    #                                       @@{prism_central_passwd}@@),\n    #                    timeout=None, verify=False)\n    #    \n    #    for subnet_name in params['subnets']:\n    #        subnet_uuid = \"\"\n    #        if subnet_name in str(data.json()):\n    #            for new_data in data.json()['entities']:\n    #                if new_data['status']['name'] == subnet_name:\n    #                    subnet_uuid = new_data['metadata']['uuid']\n    #        else:\n    #            print(\"Error : %s subnet not present on %s\"%(subnet_name,@@{PC_IP}@@))\n    #            exit(1)\n    subnet_list = []\n    external_subnet = @@{external_subnet_details}@@\n    overlay_subnet = @@{overlay_subnet_details}@@\n    for subnet in external_subnet+overlay_subnet:\n    \tsubnet_list.append({\"kind\":\"subnet\", \"uuid\":subnet['uuid']})\n\tpayload['spec']['resources'][\"subnet_reference_list\"] = subnet_list\n    \n    if params.get('accounts', 'None') != \"None\":\n        payload['spec']['resources'][\"account_reference_list\"] = []\n        url = _build_url(scheme=\"https\",resource_type=\"\/accounts\/list\")\n        data = requests.post(url, json={\"kind\":\"account\"},\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                           @@{prism_central_passwd}@@),\n                        timeout=None, verify=False)\n\n        for account in params['accounts']:\n            account_uuid = \"\"\n            if account in str(data.json()):\n                for new_data in data.json()['entities']:\n                    if new_data['metadata']['name'] == account: \n                        account_uuid = new_data['metadata']['uuid']\n                        payload['spec']['resources']\\\n                            [\"account_reference_list\"].append({\\\n                            \"kind\": \"account\",\"uuid\": account_uuid})\n                        print(\"account_details={}\".format({\"uuid\": account_uuid}))\n            else:\n                print(\"Error : %s account not present on %s\"%(account,@@{PC_IP}@@))\n                exit(1)            \n                                   \n    payload['spec']['resources']['user_reference_list'] = []\n    user_details = []\n    for user in params['tenant_users']:\n        user_uuid = create_user(user, **params)\n        if user_uuid != \"None\":\n            url = _build_url(scheme=\"https\",resource_type=\"\/users\/list\")                        \n            data = requests.post(url, json={\"kind\":\"user\", \"length\":9999},\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                           @@{prism_central_passwd}@@),\n                        timeout=None, verify=False)   \n            _uuid = \"\"\n            if user in str(data.json()):\n                for new_data in data.json()['entities']:\n                    if new_data['status']['name'] == user:\n                        _uuid = new_data['metadata']['uuid']\n                        payload['spec']['resources']\\\n                                ['user_reference_list'].append({\\\n                                \"kind\": \"user\",'uuid': _uuid})\n                        user_details.append({'name':user, 'uuid':_uuid})\n    \n    print(\"user_details={}\".format(user_details)) \n    \n    payload['spec']['resources']['external_user_group_reference_list'] = []\n    group_details = []\n    for user in params['tenant_group']:\n        user_uuid = create_group(**params)\n        if user_uuid != \"None\":\n            url = _build_url(scheme=\"https\",resource_type=\"\/user_groups\/list\")                        \n            data = requests.post(url, json={\"kind\":\"user_group\", \"length\":9999},\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                           @@{prism_central_passwd}@@),\n                        timeout=None, verify=False)   \n            print(data.json())\n            _uuid = \"\"\n            if user.split(\"@\")[0] in str(data.json()):\n                for new_data in data.json()['entities']:\n                    print(\"display_name\", new_data['status']['resources']['display_name'])\n                    print(\"org_name\",user.split(\"@\")[0])\n                    if new_data['status']['resources']['display_name'] == user.split(\"@\")[0]:\n                        _uuid = new_data['metadata']['uuid']\n                        payload['spec']['resources']\\\n                                ['external_user_group_reference_list'].append({\\\n                                \"kind\": \"user_group\",'uuid': _uuid})\n                        group_details.append({'name':user, 'uuid':_uuid})\n    \n    print(\"group_details={}\".format(group_details))\n    \n    url = _build_url(scheme=\"https\",resource_type=\"\/projects\") \n    print(\"Final Payload for creating project\")                  \n    pprint(payload)\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                           @@{prism_central_passwd}@@),\n                        timeout=None, verify=False)\n    wait_for_completion(data)\n    \n    update_ad(data.json()['metadata']['uuid'])\n    \n    task_uuid = data.json()['status']['execution_context']['task_uuid']\n    print(\"project_details={}\".format({\"uuid\":data.json()['metadata']['uuid'],\n                                       \"name\": params['name'],\n                                       \"create_project_task_uuid\": task_uuid}))\n\ndef _get_ad_spec():\n    return ({\n            \"api_version\": \"3.1.0\",\n            \"metadata\": {\n                \"kind\": \"directory_service\"\n                },\n            \"spec\": {\n                \"name\": \"\",\n                \"resources\": {\n                    \"url\": \"\",\n                    \"domain_name\": \"\",\n                    \"directory_type\": \"\",\n                    \"service_account\": {\n                        \"username\": \"string\",\n                        \"password\": \"string\"\n                        }\n                    }\n                }\n            })\n  \ndef update_ad(project_uuid):\n    params = @@{AD_items}@@\n    params = params[0]\n    ad_details = @@{ad_details}@@\n    payload = _get_default_spec()\n    payload['spec']['name'] = params['name']\n    payload['spec']['resources']['url'] = params['directory_url']\n    payload['spec']['resources']['domain_name'] = params['domain_name']\n    payload['spec']['resources']['directory_type'] = params['directory_type']\n    payload['spec']['resources']['service_account'] = \\\n                                     {\"username\": params['service_account_username'],\n                                      \"password\": params['service_account_password']}\n                                            \n    payload['metadata']['project_reference'] = {\"kind\": \"project\", \n                                                \"uuid\": project_uuid}\n\n    url = _build_url(scheme=\"https\",\n             resource_type=\"\/directory_services\/{}\".format(ad_details['ad_uuid']))                     \n    data = requests.put(url, json=payload,\n                         auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                            @@{prism_central_passwd}@@),\n                        timeout=None, verify=False)   \n  \ndef wait_for_completion(data):\n    if data.status_code in [200, 202]:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(\"admin\",\"Nutanix.123\"), \n                                    verify=False)                      \n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Got error while creating Project ---> \",responce.json())\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"COMPLETE\"\n    else:\n        state = data.json().get('state')\n        if \"DUPLICATE_ENTITY\" not in str(data.json()):\n            print(\"Got %s ---> \"%state, data.json())\n            exit(1)\n\ndef validate_params():\n    params = @@{project_items}@@\n    print(\"##### Creating a Project #####\")\n    for _params in params:\n        build_project(**_params)                                                     \n\nvalidate_params()","eval_variables":["project_details","account_details","user_details","group_details"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create ACP","attrs":{"exit_status":[],"script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\n\ndef _build_url(scheme, resource_type, host=\"10.44.76.88\", **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_default_spec(params):\n    tenant = @@{UID}@@\n    return ({\n              \"api_version\": \"3.1.0\",\n              \"metadata\": {\n                  \"kind\": \"access_control_policy\"\n              },\n              \"spec\": {\n                  \"name\": tenant['tenant_uuid']+\"-admin_acp\",\n                  \"resources\": {\n                      \"user_reference_list\": [\n                              {\n                                  \"kind\": \"user\",\n                                  \"uuid\": \"\"\n                                }\n                              ],\n                      \"role_reference\": {\n                            \"kind\": \"role\",\n                            \"name\": \"Consumer\",\n                            \"uuid\": \"@@{ROLE_ADMIN_UUID}@@\"\n                            }\n                        }\n                    }\n                })\n  \ndef create_acp(params):\n    payload = _get_default_spec(params)\n    user_details = @@{user_details}@@\n    payload['spec']['resources']['user_reference_list'][0]['uuid'] = user_details[0]['uuid']\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/access_control_policies\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(\"admin\", \"Nutanix.123\"),\n                        timeout=None, verify=False)\n    print(data.json())\n    task_uuid = wait_for_completion(data)\n    print(\"ACP for user %s created successfully\"%user_details[0]['name'])\n    print(\"acp_details={}\".format({\"name\":payload['spec']['name'],\n                                   \"uuid\": data.json()['metadata']['uuid']}))\n      \ndef wait_for_completion(data):\n    if data.status_code in [200, 202]:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(\"admin\",\"Nutanix.123\"), \n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Got error while creating ACP ---> \",responce.json())\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"SUCCESSED\"\n    else:\n        state = data.json().get('state')\n        print(\"Got %s while creating ACP ---> \"%state, data.json())\n        exit(1)\n    return data.json()['status']['execution_context']['task_uuid']\n\n#for acp in acp_items:\nparams = @@{project_items}@@\n#create_acp(params)","eval_variables":["acp_details"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Create Environment","attrs":{"exit_status":[],"script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\n\ndef _build_url(scheme, resource_type, host=@@{PC_IP}@@, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n    \ndef _get_spec():\n    tenantuuid = @@{UID}@@\n    account = @@{account_details}@@\n    project = @@{project_details}@@\n    env_passwd = @@{prism_central_passwd}@@\n    external_subnets = @@{external_subnet_details}@@\n    overlay_subnets = @@{overlay_subnet_details}@@\n    subnet_references = []\n    for subnet in external_subnets:\n        subnet_references.append({'uuid': subnet['uuid']})\n    for subnet in overlay_subnets:\n        subnet_references.append({'uuid': subnet['uuid']}) \n      \n    return ({\n          \"spec\": {\n              \"name\": tenantuuid['tenant_uuid']+\"-ENV\",\n              \"resources\": {\n                  \"infra_inclusion_list\": [\n                      {\n                          \"account_reference\": {\n                              \"uuid\": account['uuid'],\n                              \"kind\": \"account\"\n                            },\n                          \"type\": \"nutanix_pc\",\n                          \"subnet_references\": subnet_references\n                        }]\n                    }\n                },\n          \"api_version\": \"3.0\",\n          \"metadata\": {\n            \"kind\": \"environment\",\n            \"project_reference\": {\n                  \"kind\": \"project\",\n                  \"uuid\": project['uuid']\n                }\n            }\n        })\n\ndef create_env(**params):\n    payload = _get_spec()\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/environments\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                           @@{prism_central_passwd}@@),\n                        timeout=None, verify=False)\n    if not data.ok:\n        print(\"Got error while creating environment\", data.json())\n        exit(1)\n    print(\"environment_details={}\".format({\"uuid\": data.json()['metadata']['uuid'],\n                                           \"name\":payload['spec']['name']}))\nparams = @@{project_items}@@\nfor _params in params:\n    create_env(**_params)\n    sleep(5)","eval_variables":["environment_details"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Update Project","attrs":{"script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\n\ndef _build_url(scheme, resource_type, host=@@{PC_IP}@@, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n    \ndef _get_spec(project):\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects_internal\/{}\".format(project))\n    data = requests.get(url,\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                           @@{prism_central_passwd}@@),\n                        timeout=None, verify=False)\n    return data.json()\n  \ndef update_project(**params):\n    project = @@{project_details}@@\n    payload = _get_spec(project['uuid'])\n    for x in ['categories', 'categories_mapping', 'creation_time', 'last_update_time', 'owner_reference']:\n        del payload['metadata'][x]\n    del payload['status']\n    env_uuid = @@{environment_details}@@\n    payload['spec']['project_detail']['resources']\\\n        ['environment_reference_list'] = [{\"kind\":\"environment\",\n                 \"uuid\":env_uuid['uuid']}]\n    acp = generate_acp()\n    payload['spec']['access_control_policy_list'] = acp\n    \n    pprint(payload)\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects_internal\/{}\".format(project['uuid']))\n    data = requests.put(url, json=payload,\n                        auth=HTTPBasicAuth(@@{prism_central_username}@@, \n                                           @@{prism_central_passwd}@@),\n                        timeout=None, verify=False)\n    task = wait_for_completion(data)\n    print(\"Project %s updated successfully\"%project['name'])\n    \ndef wait_for_completion(data):\n    if data.status_code in [200, 202]:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(\n                                    @@{prism_central_username}@@, \n                                    @@{prism_central_passwd}@@),\n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Got error while updating project ---> \",responce.json())\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"COMPLETE\"\n    else:\n        state = data.json().get('state')\n        print(\"Got %s while updating project ---> \"%state, data.json())\n        exit(1)\n\ndef generate_filter_list(project_uuid, admin=True):\n    acl = []\n    acl.append({\"entity_filter_expression_list\":[\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"image\"},\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"marketplace_item\"},\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"directory_service\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"role\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"uuid_list\": [project_uuid]},\n                \"left_hand_side\": {\"entity_type\": \"project\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"user\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"user_group\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n                \"left_hand_side\": {\"entity_type\": \"environment\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"app_icon\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"category\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"app_task\"},\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"app_variable\"},\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n            },\n        ]})\n\n    acl.append({\n        \"scope_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": \"PROJECT\",\n                \"right_hand_side\": {\"uuid_list\": []},\n            }\n        ],\n        \"entity_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"ALL\"},\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n            }\n        ],\n    })\n    return acl\n\ndef generate_acp():\n    project = @@{project_details}@@\n    user = @@{user_details}@@\n    group = @@{group_details}@@\n    projectUuid = project['uuid']\n    filter_list_admin = generate_filter_list(projectUuid)\n    acp_admin = {\n        'acp': {\n            'name': 'ACP-TENANT-{}'.format(projectUuid),\n            'resources': {\n                'role_reference': {\n                    'kind': 'role',\n                    'uuid': \"@@{ROLE_ADMIN_UUID}@@\"\n                    },\n                     \"user_reference_list\": [\n                              {\n                                  \"kind\": \"user\",\n                                  \"uuid\": user['uuid']\n                                }\n                              ],\n                     \"filter_list\": {'context_list': filter_list_admin}\n                },\n                'description': 'Admin role for {}'.format(projectUuid)\n            },\n            'metadata': {\n                'kind': 'access_control_policy'\n            },\n            'operation': 'ADD'\n        }\n    access_control_policy_list = [acp_admin]\n    return access_control_policy_list\n\nparams = @@{project_items}@@\nfor _params in params:\n    update_project(**_params)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"a4e81cce_runbook","main_task_local_reference":{"kind":"app_task","name":"8ee0af0e_dag"},"variable_list":[{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":true,"description":"Strip #  and all text after #.\nSpecify \"None\" if input value is None for optional param.","data_type":"BASE","type":"LOCAL","name":"external_subnet_items","value":"[\n    {\n    \"name\": \"None\",                    # Required : External VLAN Name\n    \"uuid\": \"None\",                      # Optional: Only for Delete \/ Update [subnet UUID]\n    \"cluster\": \"None\",                  # Required : Cluster Name\n    \"enable_nat\": True\/False,     # Required : \n    \"vlan_id\": None,                     # Required: VLAN ID in Integer.\n    \"gateway_ip\": \"None\",           # Required\n    \"ip_pools_end_ip\": \"None\",   # Required\n    \"ip_pools_start_ip\": \"None\",  # Optional : Default \"None\"\n    \"network_ip\": \"None\",             # Required: \n    \"prefix\": None                           # Required : Network Prefix in Integer. \n    },\n]","label":"External Subnet Items","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":true,"description":"Strip #  and all text after #.\nSpecify \"None\" if input value is None for optional param.","data_type":"BASE","type":"LOCAL","name":"vpc_items","value":"[\n    {\n    \"name\": \"None\",                                      # Required : VPC Name\n    \"uuid\" : \"None\"                                        # Optional : Required for Delete \/ Update\n    \"dns_servers\" : \"None\",                          # Optional : \n    \"external_subnet_name\": \"None\",        # Required: External Subnet Name\n    \"externally_routable_ip\":\"None\",           # Required\n    \"externally_routable_ip_prefix\": None  # Required\n    },\n]","label":"VPC Items","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":true,"description":"Strip #  and all text after #.\nSpecify \"None\" if input value is None for optional param.","data_type":"BASE","type":"LOCAL","name":"overlay_subnet_items","value":"[\n    {\n     \"subnet_name\": \"None\",       # Required \n     \"uuid\": \"None\"                       # Optional : subnet uuid for Delete \/ Update\n     \"vpc_name\": \"None\",            # Required \n     \"network_ip\": \"None\",           # Required\n      \"prefix\": None,                      # Required\n      \"gateway_ip\": \"None\",         # Required\n      \"dhcp_start_ip\": \"None\",     # Optional \n      \"dhcp_end_ip\": \"None\",      # Optional\n      \"domain_name\": \"None\",    # Optional\n      \"dns_servers\" : [\"None\"],     # Optional\n      \"domain_search\": [\"None\"]  # Optional\n    },\n]","label":"Overlay Subnet Items","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"AD_items","value":"[{\n\"name\": \"Test_AD_creation\",\n\"directory_url\": \"ldap:\/\/10.46.8.66:389\",\n\"domain_name\": \"qa.nucalm.io\",\n\"directory_type\": \"ACTIVE_DIRECTORY\",\n\"service_account_username\": \"administrator@qa.nucalm.io\",\n\"service_account_password\": \"Id42modulo\"\n}]","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^(.|\\n)*$"},"val_type":"MULTILINE_STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"project_items","value":"[\n    {\"name\": \"test_project1\",\n     \"tenant_users\": [\"ssptest2@qa.nucalm.io\"],\n     \"tenant_group\":  [\"sspgroupqa3@qa.nucalm.io\"],\n     \"accounts\": [\"NTNX_LOCAL_AZ\"],\n     \"quotas\": [{\"storage_bytes\":107374182400},\n                 {\"mem_bytes\":4294967296},\n\t\t {\"vcpu\":2}]\n              }\n]","label":"Project Items","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"\"10.44.76.88\"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"operation","value":"\"create\"","label":"Operation","attrs":{"type":""},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["\"create\"","\"update\"","\"delete\""]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_passwd","value":"lPNtxCvtJnQSn1Je4VibHwzPPiy5STOsfGzD44dEjpg6e0hNAFfl2\/hIpE0N:utf-8","label":"","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_username","value":"TVE+IU8aHXzufZud44Blyh2WNYFn0VD+dS1apsp\/WCR7mcM0mOvv:utf-8","label":"","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"Tenant Onboarding"},"api_version":"3.0","metadata":{"last_update_time":"1646296360400852","kind":"runbook","spec_version":156,"creation_time":"1645525376537574","name":"Tenant Onboarding"}}