{"status":{},"contains_secrets":true,"product_version":"3.6.2","spec":{"description":"runbook_for_subnet","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Cleanup Tenant"}],"name":"e45355be_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Cleanup Tenant","attrs":{"script":"sleep(2)\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\ntenant = \"@@{tenant_name}@@\".strip()\nPC_IP = \"@@{PC_IP}@@\".strip()\npc_username = \"@@{prism_central_username}@@\".strip()\npc_passwd = \"@@{prism_central_passwd}@@\".strip()\n\nmanagement_username = \"@@{management_pc_username}@@\".strip()\nmanagement_password = \"@@{management_pc_password}@@\".strip()\n\nvpc_name = \"{}_VPC\".format(tenant)\nexternal_subnet_name = \"{}_External_Subnet\".format(tenant)\noverlay_subnet_name = \"{}_Overlay_Subnet\".format(tenant)\nproject_name = \"{}_project\".format(tenant)\ntunnel_name = \"@@{tenant_name}@@\"+\"_VPC_Tunnel\"\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_tunnel_uuid(tunnel_name):\n    tunnel_state = [\"CONNECTING\",\"NOT_VALIDATED\" ]\n    url = _build_url(scheme=\"https\",resource_type=\"\/tunnels\/list\",host=\"localhost\")\n    data = requests.post(url, json={\"kind\": \"tunnel\",\"filter\":\"name==%s\"%tunnel_name},\n                         auth=HTTPBasicAuth(management_username, \n                                            management_password),\n                         timeout=None, verify=False)\n    if data.ok:\n        if data.json()['metadata']['total_matches'] == 0:\n            print(\"%s does not exist\"%(tunnel_name))\n        elif data.json()['metadata']['total_matches'] > 1:\n            print(\"There are more than one tunnel with name - %s\"%(tunnel_name))\n            print(\"Please delete it manually before executing runbook.\")\n            exit(1)\n        elif data.json()['entities'][0]['status']['state'] in tunnel_state:\n            print(\"tunnel is in NOT_VALIDATED,Please delete it manually before executing runbook.\")\n            exit(1)\n        else:\n            tunnel_uuid = data.json()['entities'][0]['status']['resources']['uuid']\n            return tunnel_uuid\n    else:\n        print(\"Error while fetching tunnel details :- \",data.json().get('message_list',\n                                     data.json().get('error_detail', data.json())))\n        exit(1)\n\ndef _get_network_group_uuid(tunnel_name):\n    url = _build_url(scheme=\"https\",resource_type=\"\/network_groups\/list\",host=\"localhost\")\n    data = requests.post(url, json={\"kind\": \"network_group\",\"filter\":\"name==%s\"%tunnel_name},\n                         auth=HTTPBasicAuth(management_username, \n                                            management_password),\n                         timeout=None, verify=False)\n    if data.ok:\n        if data.json()['metadata']['total_matches'] == 0:\n            print(\"%s does not exist\"%(tunnel_name))\n        else:\n            group_uuid = data.json()['entities'][0]['status']['resources']['uuid']\n            return group_uuid\n    else:\n        print(\"Error while fetching network group details :- \",data.json().get('message_list',\n                                     data.json().get('error_detail', data.json())))\n        exit(1)\n\n\ndef delete_tunnel(tunnel_name):\n    print(\"Fetching tunnel details:{}\".format(tunnel_name))\n    tunnel_name = tunnel_name.strip()\n    _group_uuid = _get_network_group_uuid(tunnel_name)\n    _tunnel_uuid = _get_tunnel_uuid(tunnel_name)               \n    if _group_uuid:\n        url = _build_url(scheme=\"https\",resource_type=\"network_groups\/{}\/tunnels\/{}\".format(_group_uuid, _tunnel_uuid),host = \"localhost\", username=management_username, password=management_password)\n        data = requests.delete(url, auth=HTTPBasicAuth(management_username, management_password),\n                               timeout=None, verify=False)\n\n        print(\"%s deleting tunnel with name \"%tunnel_name)\n    else:\n        print(\"Info : %s tunnel not present on Management PC\"%(tunnel_name))\n\n\ndef delete_vpc(vpc_name):\n    print(\"Fetching %s VPC information...\"%vpc_name)\n    vpc_name = vpc_name.strip()\n    url = _build_url(scheme=\"https\",resource_type=\"\/vpcs\/list\")               \n    data = requests.post(url, json={\"kind\": \"vpc\"},\n                         auth=HTTPBasicAuth(pc_username, pc_passwd),verify=False)\n    _uuid = \"\"\n    if data.ok:\n        if vpc_name in str(data.json()):\n            for _vpc in data.json()['entities']:\n                if _vpc['spec']['name'] == vpc_name:\n                    _uuid = _vpc['metadata']['uuid']\n        else:\n            print(\"%s VPC not present on %s\"%(vpc_name, PC_IP))\n    else:\n        print(\"Failed to fetch %s VPC details\"%vpc_name)\n        print(data.json())\n        exit(1)\n        \n    if _uuid != \"\":\n        url = _build_url(scheme=\"https\", resource_type=\"\/vpcs\/%s\"%_uuid)\n        data = requests.delete(url, auth=HTTPBasicAuth(pc_username, pc_passwd),\n                               timeout=None, verify=False)\n        wait_for_completion(data, pc_username, pc_passwd, PC_IP)\n        print(\"%s VPC deleted successfully.\"%vpc_name)\n    else:\n        print(\"Info : %s VPC not present on %s\"%(vpc_name, PC_IP))\n    \ndef delete_subnet(subnet_name):\n    print(\"Fetching %s subnet information...\"%subnet_name)\n    subnet_name = subnet_name.strip()\n    url = _build_url(scheme=\"https\",resource_type=\"\/subnets\/list\") \n    data = requests.post(url, json={\"kind\": \"subnet\", \"filter\":\"name==%s\"%subnet_name},\n                         auth=HTTPBasicAuth(pc_username, pc_passwd),verify=False)\n    _uuid = \"\"\n    if data.ok:\n        if subnet_name in str(data.json()):\n            for _subnet in data.json()['entities']:\n                if _subnet['spec']['name'] == subnet_name:\n                    _uuid = _subnet['metadata']['uuid']\n        else:\n            print(\"%s Subnet not present on %s\"%(subnet_name, PC_IP))\n    else:\n        print(\"Failed to fetch %s Subnet details\"%(subnet_name))\n        print(data.json())\n        exit(1)\n    if _uuid != \"\":    \n        url = _build_url(scheme=\"https\", resource_type=\"\/subnets\/%s\"%_uuid)\n        data = requests.delete(url, auth=HTTPBasicAuth(pc_username, pc_passwd),\n                               timeout=None, verify=False)\n        wait_for_completion(data, pc_username, pc_passwd, PC_IP)\n        print(\"%s subnet deleted successfully.\"%subnet_name)\n    else:\n        print(\"Info : %s subnet not present on %s\"%(subnet_name, PC_IP))\n    \ndef _get_project_uuid(project_name):\n    print(\"Fetching project information...\")\n    project_name = project_name.strip()\n    url = _build_url(scheme=\"https\",host=\"localhost\",resource_type=\"\/projects\/list\")               \n    data = requests.post(url, json={\"kind\": \"project\"},\n                         auth=HTTPBasicAuth(management_username, \n                                            management_password),\n                         verify=False)\n    if data.ok:\n        if project_name in str(data.json()):\n            for _project in data.json()['entities']:\n                if _project['spec']['name'] == project_name:\n                    return _project['metadata']['uuid']\n            print(\"%s Project not present on localhost\"%(project_name))\n        else:\n            print(\"%s Project not present on localhost\"%(project_name))\n    else:\n        print(\"Failed to fetch %s project details\"%(project_name))\n        print(data.json())\n        exit(1)\n        \ndef delete_project(project_name):\n    print(\"Deleting project %s\"%project_name)\n    project_name = project_name.strip()\n    _uuid = _get_project_uuid(project_name)\n    url = _build_url(scheme=\"https\", host=\"localhost\",resource_type=\"\/projects\/%s\"%_uuid)\n    data = requests.delete(url, auth=HTTPBasicAuth(management_username, \n                                                   management_password),\n                           timeout=None, verify=False)\n    wait_for_completion(data, management_username, management_password, \"localhost\")\n    print(\"%s Project deleted successfully.\"%project_name)    \n    \ndef delete_app_protection_policies(project_name):\n    print(\"Fetching app protection policies information...\")\n    project_uuid = _get_project_uuid(project_name)\n    url = \"https:\/\/localhost:9440\/api\/calm\/v3.0\/app_protection_policies\/list\"\n    data = requests.post(url, json={\"filter\":\"project_reference==%s\"%project_uuid,\"length\":20},\n                         auth=HTTPBasicAuth(management_username, \n                                            management_password),\n                           timeout=None, verify=False)\n    uuid_list = []\n    if data.ok:\n        if data.json()[\"metadata\"][\"total_matches\"] > 0:\n            for _policy in data.json()[\"entities\"]:\n                uuid_list.append(_policy[\"metadata\"][\"uuid\"])\n        else:\n            print(\"Info : No App protection policies present on Localhost for %s\"%project_name)\n    else:\n        print(\"Failed to fetch app protection policies for %s project.\"%project_name)\n        print(data.json())\n        exit(1)\n        \n    for _uuid in uuid_list:\n        url = \"https:\/\/localhost:9440\/api\/calm\/v3.0\/app_protection_policies\/%s\"%_uuid\n        data = requests.delete(url, auth=HTTPBasicAuth(management_username, \n                                                       management_password),\n                               timeout=None, verify=False)\n        if data.ok:\n            if \"App protection policy with uuid %s deleted\"%_uuid not in data.json()[\"description\"]:\n                print(\"Failed to delete App snapshot policy.\",data.json())\n                exit(1)\n        else:\n            print(\"Error while deleting App snapshot policy.\")\n            print(data.json().get('message_list',data.json().get('error_detail', data.json())))\n            exit(1)\n            \n    if uuid_list != []:    \n        print(\"App protection policies for %s Project deleted successfully.\"%project_name)        \n        \ndef delete_applications(project_name):\n    print(\"Fetching applications information...\")\n    project_name = project_name.strip()\n    project_uuid = _get_project_uuid(project_name)\n    url = _build_url(scheme=\"https\", host=\"localhost\",resource_type=\"\/apps\/list\")\n    data = requests.post(url, json={\"kind\":\"app\"},\n                         auth=HTTPBasicAuth(management_username, \n                                            management_password),\n                           timeout=None, verify=False)\n    uuid_list = []\n    if data.ok:\n        if data.json()[\"metadata\"][\"total_matches\"] > 0:\n            for _app in data.json()[\"entities\"]:\n                if (_app[\"metadata\"][\"project_reference\"][\"name\"] == \"_internal\") \\\n                      and (_app[\"metadata\"][\"name\"] == \"%s_VPC_Tunnel_application\"%tenant):\n                    uuid_list.append(_app[\"metadata\"][\"uuid\"])\n                \n                if _app[\"metadata\"][\"project_reference\"][\"name\"] == project_name:\n                    uuid_list.append(_app[\"metadata\"][\"uuid\"])\n        else:\n            print(\"Info : No applications found on localhost\")\n    else:\n        print(\"Failed to fetch application details -- \",data.json())\n        exit(1)\n        \n    for _uuid in uuid_list:\n        url = _build_url(scheme=\"https\", host=\"localhost\",resource_type=\"\/apps\/%s\"%_uuid)\n        data = requests.delete(url, auth=HTTPBasicAuth(management_username, \n                                                       management_password),\n                               timeout=None, verify=False)    \n        task_uuid = data.json()[\"status\"][\"ergon_task_uuid\"]\n        wait_for_completion(data, management_username, management_password, \"localhost\", task_uuid)\n    if uuid_list != []:\n        print(\"%s Project Applications deleted successfully.\"%project_name)\n    \ndef delete_blueprints(project_name):\n    print(\"Fetching blueprints information...\")\n    project_name = project_name.strip()\n    url = _build_url(scheme=\"https\", host=\"localhost\",resource_type=\"\/blueprints\/list\")\n    data = requests.post(url, json={\"kind\":\"blueprint\"},\n                         auth=HTTPBasicAuth(management_username, \n                                            management_password),\n                           timeout=None, verify=False)\n    uuid_list = []\n    if data.ok:\n        if data.json()[\"metadata\"][\"total_matches\"] > 0:\n            for _app in data.json()[\"entities\"]:\n                if _app[\"metadata\"][\"project_reference\"][\"name\"] == project_name:\n                    uuid_list.append(_app[\"metadata\"][\"uuid\"])\n        else:\n            print(\"Info : No Blueprints found on localhost\")\n    else:\n        print(\"Failed to fetch blueprints details -- \",data.json())\n        exit(1)\n        \n    for _uuid in uuid_list:\n        url = _build_url(scheme=\"https\", host=\"localhost\",resource_type=\"\/blueprints\/%s\"%_uuid)\n        data = requests.delete(url, auth=HTTPBasicAuth(management_username, \n                                                       management_password),\n                               timeout=None, verify=False)    \n        if data.ok:\n            url = _build_url(scheme=\"https\", host=\"localhost\",resource_type=\"\/blueprints\/list\")\n            data = requests.post(url, json={\"length\":20,\"offset\":0,\"filter\":\"state!=DELETED\"},\n                                 auth=HTTPBasicAuth(management_username, \n                                                    management_password),\n                                 timeout=None, verify=False)\n            if data.ok:\n                state = \"pending\"\n                while state == \"pending\":\n                    if _uuid in str(data.json()):\n                        sleep(5)\n                        print(\"waiting for blueprint to delete\")\n                    else:\n                        print(\"Blueprint %s deleted successfully.\"%_uuid)\n                        state = \"done\"\n            else:\n                print(\"Warning : Failed to fetch delete blueprint details, kindly check ..\")\n        else:\n            print(\"Failed to delete blueprints\", data.json())\n            exit(1)\n    if uuid_list != []:\n        print(\"%s Project's blueprint deleted successfully.\"%project_name)\n\ndef delete_project_environment(project_name):\n    print(\"Fetching project environments information...\")\n    project_name = project_name.strip()\n    _uuid = _get_project_uuid(project_name)\n    url = _build_url(scheme=\"https\", host=\"localhost\",resource_type=\"\/environments\/list\")\n    data = requests.post(url, json={\"kind\":\"environment\"},\n                         auth=HTTPBasicAuth(management_username, \n                                            management_password),\n                           timeout=None, verify=False)\n    uuid_list = []\n    if data.ok:\n        if data.json()[\"metadata\"] > 0:\n            for _env in data.json()[\"entities\"]:\n                if \"project_reference\" in _env[\"metadata\"].keys():\n                    if _env[\"metadata\"][\"project_reference\"][\"name\"] == project_name:\n                        uuid_list.append(_env[\"metadata\"][\"uuid\"])\n        else:\n            print(\"Info : No environment found on localhost\")\n    else:\n        print(\"Failed to fetch environment details.\")\n        print(data.json().get('message_list',data.json().get('error_detail', data.json())))\n        exit(1)\n    \n    for _uuid in uuid_list:\n        url = _build_url(scheme=\"https\", host=\"localhost\",resource_type=\"\/environments\/%s\"%_uuid)\n        data = requests.delete(url,auth=HTTPBasicAuth(management_username, \n                                                  management_password),\n                           timeout=None, verify=False)\n        if data.ok:\n            if \"Environment with uuid %s deleted\"%_uuid not in data.json()[\"description\"]:\n                print(\"Failed to project environment.\",data.json())\n                exit(1)\n        else:\n            print(\"Error while deleting project environment.\")\n            print(data.json().get('message_list',data.json().get('error_detail', data.json())))\n            exit(1)\n            \n    if uuid_list != []:\n        print(\"%s Project environment with %s uuid's deleted successfully.\"%(project_name, uuid_list))\n    \ndef wait_for_completion(data, user, password, PC, task_uuid=None):\n    if data.ok:\n        state = \"DELETE_PENDING\"\n        while state == \"DELETE_PENDING\":\n            if task_uuid == None:\n                task_uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",host=PC,\n                             resource_type=\"\/tasks\/%s\"%task_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(user, password), \n                                    verify=False)\n            if responce.json().get('status', None) in ['DELETE_PENDING', 'RUNNING', 'QUEUED']:\n                state = 'DELETE_PENDING'\n                sleep(5)                \n            elif responce.json().get('status', None) == 'FAILED':\n                print(\"Error ---> \",responce.json().get('message_list', \n                                        responce.json().get('error_detail', responce.json())))\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"COMPLETE\" \n    else:\n        print(\"Error ---> \",data.json().get('message_list', \n                                data.json().get('error_detail', data.json())))\n        exit(1)\n\nif \"@@{delete_only_network}@@\" == \"False\":\n    try:\n        delete_applications(project_name)\n        delete_blueprints(project_name)\n        delete_app_protection_policies(project_name)\n        delete_tunnel(tunnel_name)\n        delete_project_environment(project_name)\n        delete_project(project_name)\n        delete_subnet(overlay_subnet_name)\n        delete_vpc(vpc_name)\n        delete_subnet(external_subnet_name)\n    except Exception as e:\n      raise e\nelse:\n    try:\n        delete_tunnel(tunnel_name)\n        delete_subnet(overlay_subnet_name)\n        delete_vpc(vpc_name)\n        delete_subnet(external_subnet_name)\n    except Exception as e:\n      raise e","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"dc151af2_runbook","main_task_local_reference":{"kind":"app_task","name":"e45355be_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"management_pc_username","value":"IFOlqAKjrPoI+4VTn+FtQvpd0dUsR\/KKAgSAifsACgMkPiENFA==:utf-8","label":"Management PC Username","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"management_pc_password","value":"L94o0noJDR2mBMkVX2ZHAV\/z9UtX\/gvbcJi3DXj0sn0+Xyq19xCQcLsb8A==:utf-8","label":"Management PC Password","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"tenant_name","value":"uat4","label":"Tenant Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"It will delete subnets and VPC if those are not used in project.","data_type":"BASE","type":"LOCAL","name":"delete_only_network","value":"False","label":"Delete only network configuration","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["True","False"]}},{"val_type":"STRING","is_mandatory":true,"description":"Prism Central IP","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"10.44.76.167","label":"Workload PC IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_username","value":"aKMc2uduFKj4aGhurGtvu5D1OoaXD9GuPZQdSfSmJ\/Br2F61Hg==:utf-8","label":"Workload PC Username","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_passwd","value":"I6vylDZFhCGYP59D2Hof02ot3X1xQoP+hRFDw0BN81LqlRYCn6c5t3u4MQ==:utf-8","label":"Workload PC Password","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"Cleanup Script_merge"},"api_version":"3.0","metadata":{"last_update_time":"1688660675667595","kind":"runbook","spec_version":8,"creation_time":"1688656651150165","name":"Cleanup Script_merge"}}