{"status":{},"contains_secrets":true,"product_version":"3.5.0","spec":{"description":"","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Validate Parameters"},{"kind":"app_task","name":"Enable Leap If Disabled"},{"kind":"app_task","name":"Add Accounts"},{"kind":"app_task","name":"Create Protection Policy"},{"kind":"app_task","name":"Create Recovery Plan"}],"name":"edf171c8_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Add Accounts"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create Protection Policy"}},{"from_task_reference":{"kind":"app_task","name":"Create Protection Policy"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Create Recovery Plan"}},{"from_task_reference":{"kind":"app_task","name":"Enable Leap If Disabled"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Add Accounts"}},{"from_task_reference":{"kind":"app_task","name":"Validate Parameters"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Enable Leap If Disabled"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Validate Parameters","attrs":{"exit_status":[],"script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP = \"@@{PC_IP}@@\"\npc_user = \"@@{prism_central_username}@@\"\npc_password = \"@@{prism_central_passwd}@@\"\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n    \ndef get_vm_uuid(vm):\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/ngt\/list\")\n    data = requests.post(url, json={\"kind\":\"ngt\"},\n                        auth=HTTPBasicAuth(pc_user,pc_password),\n                        timeout=None, verify=False)\n    if data.ok:\n        for _vm in data.json()[\"entities\"]:\n            uuid = _vm[\"vm_uuid\"]\n            _url = _build_url(scheme=\"https\",\n                             resource_type=\"\/vms\/%s\"%uuid)\n            _data = requests.get(_url,auth=HTTPBasicAuth(pc_user,pc_password),\n                                 timeout=None, verify=False)\n            if _data.ok:\n                if _data.json()[\"spec\"][\"name\"] == vm:\n                    if _vm[\"network_configuration\"][0][\"ip_info_list\"][0][\"ip_type\"] == \"STATIC\": \n                        return _data.json()[\"metadata\"][\"uuid\"]\n                    else:\n                        print(\"%s VM has not static IP configured. VM Should\"\\\n                            \" have Static IP configured for Static IP Mapping.\"%vm)\n                        exit(1)\n        print(\"Input Error :- %s VM is not present or NGT is not installed properly on VM.\"%vm)\n        exit(1)\n    else:\n        print(\"Error while fetching VM details :- \",data.json())\n        exit(1)\n        \ndef _get_cluster_details(cluster_name, host, username, password):\n    payload = {\"kind\": \"cluster\"}\n    url = _build_url(scheme=\"https\", host=host,\n                    resource_type=\"\/clusters\/list\")\n    data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(username,password), \n                         verify=False)\n    if data.ok:\n        for _cluster in data.json()['entities']:\n            if _cluster['status']['name'] == cluster_name:\n                return _cluster['metadata']['uuid']\n        print(\"Input Error :- Given cluster %s not present on %s\"%(cluster_name, host))\n        exit(1)\n    else:\n        print(\"Error while fetching %s cluster info\"%cluster_name)\n        print(data.json().get('message_list',data.json().get('error_detail', data.json())))\n        exit(1) \n        \nprimary_cluster_uuid = _get_cluster_details(cluster_name = \"@@{primary_account_cluster}@@\",\n                                            host=PC_IP, username=pc_user, password=pc_password)\nrecovery_cluster_uuid = _get_cluster_details(cluster_name = \"@@{dr_account_cluster}@@\",\n                                             host=\"@@{dr_account_url}@@\", \n                                             username=\"@@{dr_account_username}@@\", \n                                             password=\"@@{dr_account_password}@@\")\n\nprint(\"primary_cluster_uuid={}\".format(primary_cluster_uuid))\nprint(\"recovery_cluster_uuid={}\".format(recovery_cluster_uuid))\n\ncategory = @@{vm_category}@@\npolicy_category = {}\nfor x in category.keys():\n    policy_category[x] = [category[x]]\n\ndr_account_items = {\n                    \"name\" : \"@@{dr_account_name}@@\",\n                    \"url\" : \"@@{dr_account_url}@@\",\n                    \"username\" : \"@@{dr_account_username}@@\",\n                    \"passwd\" : \"@@{dr_account_password}@@\",\n                    \"sync_interval_secs\" : 3500\n                    }\n\nprint(\"dr_account_items={}\".format(dr_account_items))\n\nprotection_policy_items = {\n                            'name': \"@@{protection_policy_name}@@\",\n                            'source_az': \"@@{primary_account_name}@@\",\n                            'dest_az': \"@@{dr_account_name}@@\",\n                            'vm_category':policy_category\n                           }\nprint(\"protection_policy_items={}\".format(protection_policy_items))\n\nIP1 = \"@@{primary_network_prod}@@\"\nIP2 = \"@@{primary_network_test}@@\"\nIP3 = \"@@{dr_network_prod}@@\"\nIP4 = \"@@{dr_network_test}@@\"\nfor x in [IP1, IP2, IP3, IP4]:\n    if \"\/\" not in x:\n        print(\"Input Error :- %s is not a valid gateway IP with prefix.\"%x)\n        print(\"Please Provide Valid Input for Gateway IP with Prefix.\")\n        print(\"Example :- 10.10.10.1\/24\")\n        exit(1)\n\nrecovery_plan_items = {\n                        'name' : \"@@{recovery_plan_name}@@\",\n                        'power_on_sequence' : category,\n                        'recovery_network_prod' : {'name' : \"@@{primary_network_prod_name}@@\",\n                                                   'gateway' : IP1.split(\"\/\")[0],\n                                                   'prifix' : int(IP1.split(\"\/\")[1])\n                        },\n                        'recovery_network_test' : {'name' : \"@@{primary_network_test_name}@@\",\n                                                   'gateway' : IP2.split(\"\/\")[0],\n                                                   'prifix' : int(IP2.split(\"\/\")[1])\n                        },\n                        'dr_network_prod' : {'name' : \"@@{dr_network_prod_name}@@\",\n                                             'gateway' : IP3.split(\"\/\")[0],\n                                             'prifix' : int(IP3.split(\"\/\")[1])\n                        },\n                        'dr_network_test' : {'name' : \"@@{dr_network_test_name}@@\",\n                                             'gateway' : IP4.split(\"\/\")[0],\n                                             'prifix' : int(IP4.split(\"\/\")[1])\n                        }\n                      }\nprint(\"recovery_plan_items={}\".format(recovery_plan_items))\n\nif @@{static_ip_mapping}@@:\n    VM = \"@@{vm_name}@@\"\n    primary_prod = \"@@{primary_network_prod_static_ip}@@\".split(\",\")\n    primary_test = \"@@{primary_network_test_static_ip}@@\".split(\",\")\n    dr_prod = \"@@{dr_network_prod_static_ip}@@\".split(\",\")\n    dr_test = \"@@{dr_network_test_static_ip}@@\".split(\",\")\n    for x in VM.split(\",\"):\n        uuid = get_vm_uuid(x.strip())\n    for x in [primary_prod, primary_test, dr_prod, dr_test]:\n        if len(VM.split(\",\")) != len(x):\n            print(\"Input Error :- Please provide proper static IP mapping between VM's list and %s\"%x)\n            print(\"Number of quama separated VM's should be equal to number of Primary Network Prod Static IP,\" \\\n                      \"Primary Network Test Static IP, DR Network Prod Static IP, DR Network Test Static IP\")\n            exit(1)\n        \ndelay = @@{stage_delay}@@\nreplication = @@{custom_rpo_interval_replication}@@\nif replication < 1:\n    print(\"custom_rpo_interval_replication=1\")\n    print(\"Info : Replication RPO Interval is less than '1' hence using default value of '1'.\")\n    \nlocal = @@{custom_rpo_interval_local}@@\nif local < 1:\n    if @@{local_schedule}@@:\n        print(\"custom_rpo_interval_local=1\")\n        print(\"Info : Local RPO Interval is less than '1' hence using default value of '1'.\")\n        \nretention = @@{number_of_snapshot_retention}@@\nif retention < 1:\n    print(\"number_of_snapshot_retention=1\")\n    print(\"Info : Number of Snapshot Retention is less than '1' hence using default value of '1'.\")\n\ntime = \"@@{policy_schedule_time}@@\"\nif time != \"Immediate\":\n    if \":\" in time:\n        t1, t2 = time.split(\":\")\n        try:\n            if (t1[-1] != \"h\") or (t2[-1] != \"m\"):\n                print(\"Input Error :- Please provide 'Policy Schedule Time From Now' in Proper format.\")\n                print(\"Example :- 10h:30m\")\n                exit(1)\n            hours = int(t1[:-1])\n            minutes = int(t2[:-1])\n            if not hours:\n                hours = \"00\"\n            if minutes:\n                print(\"policy_schedule_time={}\".format(\"@@{policy_schedule_time}@@\"))\n            else:\n                print(\"policy_schedule_time={}\".format(\"@@{policy_schedule_time}@@\"))\n        except Exception as ValueError:\n            print(\"Input Error :- Please provide 'Policy Schedule Time From Now' in Proper format.\")\n            print(\"Example :- 10h:30m\")\n            exit(1)\n    else:\n        print(\"Input Error :- Please provide 'Policy Schedule Time From Now' in below format.\")\n        print(\"Example :- 10h:30m\")\n        exit(1)\n    ","eval_variables":["dr_account_items","protection_policy_items","recovery_plan_items","primary_cluster_uuid","recovery_cluster_uuid","custom_rpo_interval_local","custom_rpo_interval_replication","number_of_snapshot_retention","policy_schedule_time"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Enable Leap If Disabled","attrs":{"script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP = \"@@{PC_IP}@@\"\npc_user = \"@@{prism_central_username}@@\"\npc_password = \"@@{prism_central_passwd}@@\"\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef enable_leap(host_pc, pc_user, pc_password):\n    url = _build_url(scheme=\"https\",\n                     resource_type=\"\/services\/disaster_recovery\",\n                     host=host_pc)\n    data = requests.post(url, json={\"state\":\"ENABLE\"},\n                        auth=HTTPBasicAuth(pc_user,pc_password),\n                        timeout=None, verify=False)\n    if data.status_code == 409:\n        print(\"Leap is already enabled on %s\"%host_pc)\n    elif data.ok:\n        print(\"Leap Enabled Successfully on %s\"%host_pc)\n    else:\n        print(\"Failed to Enable Leap on %s\"%host_pc)\n\nparams = @@{dr_account_items}@@\nDR_PC = params['url']\nDR_user = params['username']\nDR_password = params['passwd']\nenable_leap(host_pc=PC_IP, pc_user=pc_user, pc_password=pc_password)\nenable_leap(host_pc=DR_PC, pc_user=DR_user, pc_password=DR_password)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Add Accounts","attrs":{"script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP = \"@@{PC_IP}@@\"\npc_user = \"@@{prism_central_username}@@\"\npc_password = \"@@{prism_central_passwd}@@\"\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef get_spec(**params):\n    return (\n    {\n     \"spec\": {\n        \"name\": \"PC_%s\"%params['url'],\n        \"resources\": {\n            \"url\": params['url'],\n            \"username\": params['username'],\n            \"password\": params['passwd'],\n            \"cloud_type\": params.get(\"cloud_type\", \"ONPREM_CLOUD\")\n        },\n        \"description\": \"\"\n    },\n    \"metadata\": {\n      \"kind\": \"cloud_trust\"\n    },\n    \"api_version\": \"3.1.0\"\n    })\n\ndef get_spec_account(**params):\n    return (\n   {\n    \"api_version\": \"3.0\",\n    \"metadata\": {\n        \"kind\": \"account\"\n    },\n    \"spec\": {\n        \"name\": params.get('name', \"DR_%s\"%params['url'].split(\".\")[-1]),\n        \"resources\": {\n             \"type\": params.get(\"pc_type\", \"nutanix_pc\"),\n            \"data\": {\n                \"server\": params['url'],\n                \"username\": params['username'],\n                \"password\": {\n                    \"value\": params['passwd'],\n                \"attrs\": {\n                    \"is_secret_modified\": True\n                    }\n                }\n            },\n            \"sync_interval_secs\": params.get(\"sync_interval_secs\", 3600)\n            }\n        }\n    })\n  \ndef create_connection(PC=None, user=None, password=None,**params):\n    payload = get_spec(**params)\n    url = _build_url(scheme=\"https\",resource_type=\"\/cloud_trusts\")\n    _user = pc_user\n    _password = pc_password\n    _PC=PC_IP\n    if PC != None:\n        url = _build_url(scheme=\"https\",host=PC, resource_type=\"\/cloud_trusts\")\n        _user = user\n        _password = password\n        _PC=PC\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(_user,_password),\n                        timeout=None, verify=False)    \n    wait_for_completion(data, _PC, _user, _password)\n\ndef add_account(PC=None, user=None, password=None, **params):\n    payload = get_spec_account(**params)\n    url = _build_url(scheme=\"https\",resource_type=\"\/accounts\")\n    _user = pc_user\n    _password = pc_password\n    _PC=PC_IP\n    if PC != None:\n        url = _build_url(scheme=\"https\",host=PC, resource_type=\"\/accounts\")\n        _user = user\n        _password = password\n        _PC=PC\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(_user,_password),\n                        timeout=None, verify=False)\n    if \"DUPLICATE_ACCOUNT\" in str(data.json()):\n        print(\"Input Error :- Your provided account url - %s is \"\\\n              \"already a part of another account\"%params['url'])\n        _url = _build_url(scheme=\"https\",resource_type=\"\/accounts\/%s\"%data.json()[\"metadata\"][\"uuid\"])\n        _data = requests.delete(_url,auth=HTTPBasicAuth(_user,_password),timeout=None, verify=False)\n        if _data.ok:\n            exit(1)\n        else:\n            print(\"Getting error while deleting %s account.\"%payload[\"spec\"][\"name\"])\n            print(_data.json())\n            exit(1)\n    wait_for_completion(data, _PC, _user, _password)\n    \ndef wait_for_completion(data, PC=None, user=None, password=None):\n    if data.ok:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            _user = pc_user\n            _password = pc_password\n            if PC != None:\n                url = _build_url(scheme=\"https\", host=PC,\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n                _user = user\n                _password = password\n            responce = requests.get(url, auth=HTTPBasicAuth(_user,_password),\n                                    verify=False)                      \n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                if (\"DUPLICATE_CLOUD_TRUST\" in str(responce.json())) or (\"DUPLICATE_NAME\" in str(responce.json())):\n                    pass\n                else:\n                    print(\"Got Error ---> \",responce.json().get('message_list', \n                                            responce.json().get('error_detail', responce.json())))\n                    state = 'FAILED'\n                    exit(1)\n            else:\n                state = \"COMPLETE\"\n    else:\n        if (\"DUPLICATE_CLOUD_TRUST\" in str(data.json())) or (\"DUPLICATE_NAME\" in str(data.json())):\n            pass\n        else:\n            print(\"Got Error ---> \",data.json().get('message_list', \n                                    data.json().get('error_detail', data.json())))\n            exit(1)\n\n# Create account and connection at local PC\nparams = @@{dr_account_items}@@\ncreate_connection(**params)\nadd_account(**params)\n\n# Create account and connection at DR PC\n_params = {\"name\" : \"Production_%s\"%PC_IP.split(\".\")[-1],\n          \"url\" : PC_IP,\n          \"username\" : pc_user,\n          \"passwd\" : pc_password,\n          \"sync_interval_secs\" : params.get(\"sync_interval_secs\", 3600)}\nadd_account(PC=params['url'], \n            user=params['username'],\n            password=params['passwd'],\n            **_params)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Create Protection Policy","attrs":{"exit_status":[],"script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP = \"@@{PC_IP}@@\"\npc_user = \"@@{prism_central_username}@@\"\npc_password = \"@@{prism_central_passwd}@@\"\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef get_spec(**params):\n    rpo_time_replication = int(@@{custom_rpo_interval_replication}@@) * 60 * 60\n    if @@{custom_rpo_interval_replication}@@ <= 1:\n        rpo_time_replication = 3600\n        \n    category_filter = {}\n    for x in params[\"vm_category\"]:\n        category_filter[x] = params[\"vm_category\"][x]\n    return (\n    {\"spec\": {\n        \"name\": params['name'],\n        \"resources\": {\n            \"ordered_availability_zone_list\": [\n                {\n                    \"availability_zone_url\": params[\"source_az_uuid\"],\n                    \"cluster_uuid\": \"@@{primary_cluster_uuid}@@\"\n                },\n                {\n                    \"availability_zone_url\": params[\"dest_az_uuid\"],\n                    \"cluster_uuid\": \"@@{recovery_cluster_uuid}@@\"\n                }\n            ],\n            \"availability_zone_connectivity_list\": [\n                {\n                    \"source_availability_zone_index\": 0,\n                    \"destination_availability_zone_index\": 1,\n                    \"snapshot_schedule_list\": [\n                        {\n                            \"recovery_point_objective_secs\": rpo_time_replication,\n                            \"snapshot_type\": params.get(\"snapshot_type\",\"CRASH_CONSISTENT\"),\n                            \"local_snapshot_retention_policy\": {\n                                \"num_snapshots\": int(@@{number_of_snapshot_retention}@@)\n                            },\n                            \"remote_snapshot_retention_policy\": {\n                                \"num_snapshots\": int(@@{number_of_snapshot_retention}@@)\n                            }\n                        }\n                    ]\n                },\n                {\n                    \"source_availability_zone_index\": 1,\n                    \"destination_availability_zone_index\": 0,\n                    \"snapshot_schedule_list\": [\n                        {\n                            \"recovery_point_objective_secs\": rpo_time_replication,\n                            \"snapshot_type\": params.get(\"snapshot_type\",\"CRASH_CONSISTENT\"),\n                            \"local_snapshot_retention_policy\": {\n                                \"num_snapshots\": int(@@{number_of_snapshot_retention}@@)\n                            },\n                            \"remote_snapshot_retention_policy\": {\n                                \"num_snapshots\": int(@@{number_of_snapshot_retention}@@)\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"category_filter\": {\"params\":category_filter},\n            \"primary_location_list\": [\n                0\n            ]\n        }\n    },\n    \"metadata\": {\n        \"kind\": \"protection_rule\"\n    },\n    \"api_version\": \"3.1.0\"\n    })\n\ndef local_schedule(_index, **params):\n    rpo_time_local = int(@@{custom_rpo_interval_local}@@) * 60 * 60\n    if @@{custom_rpo_interval_local}@@ <= 1:\n        rpo_time_local = 3600\n    return {\n                \"source_availability_zone_index\": _index,\n                \"snapshot_schedule_list\": [\n                    {\n                        \"recovery_point_objective_secs\": rpo_time_local,\n                        \"snapshot_type\": params.get(\"snapshot_type\",\"CRASH_CONSISTENT\"),\n                        \"local_snapshot_retention_policy\": {\n                            \"num_snapshots\": int(@@{number_of_snapshot_retention}@@)\n                        }\n                    }\n                ]\n            }\n            \ndef create_protection_policy(**params):\n    params['source_az_uuid'], params['source_cluster_uuid'] = get_account_info(params['source_az'])\n    params['dest_az_uuid'], params['dest_cluster_uuid'] = get_account_info(params['dest_az'])\n    print(\"source_az_uuid={}\".format(params['source_az_uuid']))\n    print(\"dest_az_uuid={}\".format(params['dest_az_uuid']))\n    payload = get_spec(**params)\n    if @@{local_schedule}@@:\n        payload['spec']['resources']['availability_zone_connectivity_list'].append(local_schedule(_index=0))\n        payload['spec']['resources']['availability_zone_connectivity_list'].append(local_schedule(_index=1))\n    if \"@@{policy_schedule_time}@@\" != \"Immediate\":\n        payload['spec']['resources']['start_time'] = \"@@{policy_schedule_time}@@\"\n    url = _build_url(scheme=\"https\",resource_type=\"\/protection_rules\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(pc_user,pc_password),\n                        timeout=None, verify=False)    \n    wait_for_completion(data)\n    if data.ok:\n        _uuid = data.json()['metadata']['uuid']\n        batch_call(_uuid)\n\ndef wait_for_completion(data):\n    if data.ok:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(pc_user,pc_password), \n                                    verify=False)                      \n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Error ---> \",responce.json().get('message_list', \n                                        responce.json().get('error_detail', responce.json())))\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"COMPLETE\"\n    else:\n        print(\"Error ---> \",data.json().get('message_list', \n                                data.json().get('error_detail', data.json())))\n        exit(1)\n\ndef batch_call(entity_uuid):\n    payload = {\n                \"action_on_failure\": \"CONTINUE\",\n                \"execution_order\": \"NON_SEQUENTIAL\",\n                \"api_request_list\": [\n                    {\n                        \"operation\": \"POST\",\n                        \"path_and_params\": \"\/api\/nutanix\/v3\/groups\",\n                        \"body\": {\n                            \"entity_type\": \"protection_rule\",\n                            \"entity_ids\": [entity_uuid],\n                            \"group_member_attributes\": [\n                                {\n                                    \"attribute\": \"name\"\n                                }\n                            ],\n                            \"query_name\": \"prism:EBQueryModel\"\n                        }\n                    }\n                ],\n                \"api_version\": \"3.0\"\n            }\n    url = _build_url(scheme=\"https\",resource_type=\"\/batch\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(pc_user,pc_password),\n                        timeout=None, verify=False)\n    if not data.ok:\n        print(\"Got Error ---> \",data.json().get('message_list', \n                                data.json().get('error_detail', data.json())))\n    \ndef get_account_info(account_name):\n    url = _build_url(scheme=\"https\",resource_type=\"\/accounts\/list\")\n    data = requests.post(url, json={\"kind\":\"account\", \"filter\":\"name==%s\"%account_name},\n                        auth=HTTPBasicAuth(pc_user,pc_password),\n                        timeout=None, verify=False)\n    if len(data.json()['entities']) != 0:\n        cluster_uuid = data.json()['entities'][0]['status']['resources']['data']\\\n                   ['cluster_account_reference_list'][0]['resources']\\\n                   ['data']['cluster_uuid']\n        pc_account_uuid = data.json()['entities'][0]['status']\\\n                        ['resources']['data']['pc_uuid']\n        return (pc_account_uuid, cluster_uuid)\n    else:\n        print(\"Got Error while getting account info %s\"%account_name)\n        print(\"Please make sure account name is correct and account is active.\")\n        exit(1)\n\nparams_dict = @@{protection_policy_items}@@\ncreate_protection_policy(**params_dict)","eval_variables":["source_az_uuid","dest_az_uuid"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Create Recovery Plan","attrs":{"script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP = \"@@{PC_IP}@@\"\npc_user = \"@@{prism_central_username}@@\"\npc_password = \"@@{prism_central_passwd}@@\"\nsource_az_uuid = \"@@{source_az_uuid}@@\"\ndest_az_uuid = \"@@{dest_az_uuid}@@\"\nprotection_policy = @@{protection_policy_items}@@\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_stage_spec(vm_category):\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/idempotence_identifiers\")\n    data = requests.post(url, json={\"count\": 1,\"valid_duration_in_minutes\": 527040},\n                        auth=HTTPBasicAuth(pc_user,pc_password),\n                        timeout=None, verify=False)                   \n    _uuid = \"\"\n    if data.ok:\n        _uuid = data.json()['uuid_list'][0]\n    else:\n        print(\"Failed to generate account uuid, Please try again ...\")\n        exit(1)\n        \n    return ({\n            \"stage_work\": {\n                \"recover_entities\": {\n                    \"entity_info_list\": [\n                        {\n                            \"categories\": vm_category,\n                            \"script_list\": [{\n                              \"enable_script_exec\": @@{enable_boot_script}@@\n                            }]\n                        }\n                    ]\n                }\n            },\n            \"stage_uuid\": _uuid,\n            \"delay_time_secs\": @@{stage_delay}@@\n        })\n  \ndef get_spec(**params):\n    stage_list = []\n    for vm_category in params['power_on_sequence'].keys():\n        _category = {vm_category:params['power_on_sequence'][vm_category]}\n        stage_list.append(_get_stage_spec(_category))\n    recovery_network = False\n    if \"@@{recovery_network_type}@@\" == \"stretched\":\n        recovery_network = True\n    return (\n    {\"spec\": {\n        \"name\": params['name'],\n        \"resources\": {\n            \"stage_list\": stage_list,\n            \"parameters\": {\n                \"primary_location_index\": 0,\n                \"availability_zone_list\": [\n                    {\n                        \"availability_zone_url\": source_az_uuid,\n                        \"cluster_reference_list\": []\n                    },\n                    {\n                        \"availability_zone_url\": dest_az_uuid,\n                        \"cluster_reference_list\": []\n                    }\n                ],\n                \"network_mapping_list\": [\n                    {\n                        \"are_networks_stretched\": recovery_network,\n                        \"availability_zone_network_mapping_list\": [\n                            {\n                                \"recovery_network\": {\n                                    \"name\": params['recovery_network_prod']['name'],\n                                    \"subnet_list\": [\n                                        {\n                                            \"external_connectivity_state\": \"DISABLED\",\n                                            \"gateway_ip\": params['recovery_network_prod']['gateway'],\n                                            \"prefix_length\": params['recovery_network_prod']['prifix']\n                                        }\n                                    ]\n                                },\n                                \"availability_zone_url\": source_az_uuid,\n                                \"test_network\": {\n                                    \"name\": params['recovery_network_test']['name'],\n                                    \"subnet_list\": [\n                                        {\n                                            \"external_connectivity_state\": \"DISABLED\",\n                                            \"gateway_ip\": params['recovery_network_test']['gateway'],\n                                            \"prefix_length\": params['recovery_network_test']['prifix']\n                                        }\n                                    ]\n                                }\n                            },\n                            {\n                                \"recovery_network\": {\n                                    \"name\": params['dr_network_prod']['name'],\n                                    \"subnet_list\": [\n                                        {\n                                            \"external_connectivity_state\": \"DISABLED\",\n                                            \"gateway_ip\": params['dr_network_prod']['gateway'],\n                                            \"prefix_length\": params['dr_network_prod']['prifix']\n                                        }\n                                    ]\n                                },\n                                \"availability_zone_url\": dest_az_uuid,\n                                \"test_network\": {\n                                    \"name\": params['dr_network_test']['name'],\n                                    \"subnet_list\": [\n                                        {\n                                            \"external_connectivity_state\": \"DISABLED\",\n                                            \"gateway_ip\": params['dr_network_test']['gateway'],\n                                            \"prefix_length\": params['dr_network_test']['prifix']\n                                        }\n                                    ]\n                                }\n                            }\n                        ]\n                    }\n                ],\n                \"floating_ip_assignment_list\": []\n            }\n        },\n        \"description\": params.get('description', '')\n    },\n    \"metadata\": {\n        \"kind\": \"recovery_plan\",\n        \"spec_version\": 0\n    },\n    \"api_version\": \"3.1.0\"\n    })\n\ndef get_static_map_spec(IP, vm):\n    return ({\n      \"vm_reference\": {\n          \"kind\": \"vm\",\n          \"name\": vm,\n          \"uuid\": get_vm_uuid(vm)\n          },\n      \"ip_config_list\": [{\n          \"ip_address\": IP.strip()\n          }\n       ]})\n  \ndef create_recovery_plan(**params):\n    payload = get_spec(**params)\n    recovery_prod = []\n    recovery_dr = []\n    test_prod = []\n    test_dr = []\n    if @@{static_ip_mapping}@@:\n        for x,_vm in enumerate(params[\"vm_name\"].split(\",\")):\n            recovery_prod.append(get_static_map_spec(\"@@{primary_network_prod_static_ip}@@\".split(\",\")[x], _vm.strip()))\n            recovery_dr.append(get_static_map_spec(\"@@{dr_network_prod_static_ip}@@\".split(\",\")[x], _vm.strip()))\n            test_prod.append(get_static_map_spec(\"@@{primary_network_test_static_ip}@@\".split(\",\")[x], _vm.strip()))\n            test_dr.append(get_static_map_spec(\"@@{dr_network_test_static_ip}@@\".split(\",\")[x], _vm.strip()))\n            \n        payload[\"spec\"][\"resources\"][\"parameters\"][\"network_mapping_list\"][0]\\\n               [\"availability_zone_network_mapping_list\"][0]\\\n               [\"recovery_ip_assignment_list\"] = recovery_prod\n        payload[\"spec\"][\"resources\"][\"parameters\"][\"network_mapping_list\"][0]\\\n               [\"availability_zone_network_mapping_list\"][0]\\\n               [\"test_ip_assignment_list\"] = test_prod\n        payload[\"spec\"][\"resources\"][\"parameters\"][\"network_mapping_list\"][0]\\\n               [\"availability_zone_network_mapping_list\"][1]\\\n               [\"recovery_ip_assignment_list\"] = recovery_dr\n        payload[\"spec\"][\"resources\"][\"parameters\"][\"network_mapping_list\"][0]\\\n               [\"availability_zone_network_mapping_list\"][1]\\\n               [\"test_ip_assignment_list\"] = test_dr\n        \n    url = _build_url(scheme=\"https\",resource_type=\"\/recovery_plans\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(pc_user,pc_password),\n                        timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"SUCCESS !!!\")\n\ndef wait_for_completion(data):\n    if data.ok:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(pc_user,pc_password), \n                                    verify=False)                      \n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Error while creating Recovery plan ---> \",responce.json().get('message_list', \n                                        responce.json().get('error_detail', responce.json())))\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"COMPLETE\"\n    else:\n        print(\"Error while creating recovery plan ---> \",data.json().get('message_list', \n                                data.json().get('error_detail', data.json())))\n        exit(1)\n\ndef get_vm_uuid(vm):\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/ngt\/list\")\n    data = requests.post(url, json={\"kind\":\"ngt\"},\n                        auth=HTTPBasicAuth(pc_user,pc_password),\n                        timeout=None, verify=False)\n    if data.ok:\n        for _vm in data.json()[\"entities\"]:\n            uuid = _vm[\"vm_uuid\"]\n            _url = _build_url(scheme=\"https\",\n                             resource_type=\"\/vms\/%s\"%uuid)\n            _data = requests.get(_url,auth=HTTPBasicAuth(pc_user,pc_password),\n                                 timeout=None, verify=False)\n            if _data.ok:\n                if _data.json()[\"spec\"][\"name\"] == vm:\n                    if _vm[\"network_configuration\"][0][\"ip_info_list\"][0][\"ip_type\"] == \"STATIC\": \n                        return _data.json()[\"metadata\"][\"uuid\"]\n                    else:\n                        print(\"%s VM has not static IP configured. VM Should\"\\\n                            \" have Static IP configured for Static IP Mapping.\"%vm)\n                        exit(1)\n        print(\"Input Error :- %s VM is not present or NGT is not installed properly on VM.\"%vm)\n        exit(1)\n    else:\n        print(\"Error while fetching VM details :- \",data.json())\n        exit(1)\n        \nparams_dict = @@{recovery_plan_items}@@\nparams_dict[\"vm_name\"] = \"@@{vm_name}@@\"\ncreate_recovery_plan(**params_dict)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"fd79599d_runbook","main_task_local_reference":{"kind":"app_task","name":"edf171c8_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"protection_policy_name","value":"Test_Policy","label":"Protection Policy Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"recovery_plan_name","value":"Test_Recovery_plan","label":"Recovery Plan Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"Default 1 Hour.","data_type":"BASE","type":"LOCAL","name":"custom_rpo_interval_replication","value":"1","label":"Custom RPO Interval for Replication in Hours","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Local schedule at primary and recovery PC.","data_type":"BASE","type":"LOCAL","name":"local_schedule","value":"True","label":"Local Schedule","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["True","False"]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"Should be >= 1 for \"Local Schedule = True\"","data_type":"BASE","type":"LOCAL","name":"custom_rpo_interval_local","value":"1","label":"Custom RPO Interval for Local Snapshot in Hours","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"number_of_snapshot_retention","value":"1","label":"Number of Snapshot Retention ","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Keep  Immediate to schedule now. policy will be schedule after time provided in input. Example :- 13h:30m, 1h:00m, 00h:30m\n","data_type":"BASE","type":"LOCAL","name":"policy_schedule_time","value":"01h:30m","label":"Start Protection After Mentioned Time From Now","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"primary_account_name","value":"NTNX_LOCAL_AZ","label":"Primary Account Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"primary_account_cluster","value":"auto_cluster_prod_4f4433c72b64","label":"Primary Account Cluster Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Account name to be given while creating calm account of DR PC.","data_type":"BASE","type":"LOCAL","name":"dr_account_name","value":"DR_144_78","label":"DR Account Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"dr_account_cluster","value":"auto_cluster_prod_4feea4b556b6","label":"DR Account Cluster Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"dr_account_url","value":"10.51.144.78","label":"DR PC IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"dr_account_username","value":"YMjsu\/+Mwje+y1dF5sfZ023XrXF1FIDgYtg9DyXD5pmK6Fsrog==:utf-8","label":"DR PC Username","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"dr_account_password","value":"+xIh12mXCEvqa\/sgWxvzwpHPN+yFWTiKRfBzwvUxgB43egxJqyj1Fq5x9g==:utf-8","label":"DR PC Password","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Add in a json format, I.E. {\"Key\":\"Value\"}","data_type":"BASE","type":"LOCAL","name":"vm_category","value":"{\"VirtualNetworkType\": \"Test\"}","label":"VM Category for Protection Policy and Recovery Plan","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"recovery_network_type","value":"non-stretched","label":"Recovery Plan Network Type","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["stretched","non-stretched"]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"Delay in stages for recovery plan ( boot order  )","data_type":"BASE","type":"LOCAL","name":"stage_delay","value":"0","label":"Stage Delay [ In Seconds ]","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":true,"description":"It will execute script while booting.\nScript Location :- Linux - \/usr\/local\/sbin\/production_vm_recovery \/ \/usr\/local\/sbin\/test_vm_recovery, Windows (Relative to Nutanix directory in Program Files)  - scripts\/production\/vm_recovery.bat \/ scripts\/test\/vm_recovery.bat.\nYou will need to install NGT first on VM and then copy boot script at given location.","data_type":"BASE","type":"LOCAL","name":"enable_boot_script","value":"False","label":"Enable Boot Script ","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["True","False"]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"primary_network_prod_name","value":"Dev-SubnetA","label":"Primary Network Name - Production Subnet","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":true,"description":"Example :- 10.10.10.1\/24\nIE :-  gateway_ip\/network_prefix","data_type":"BASE","type":"LOCAL","name":"primary_network_prod","value":"10.1.1.1\/24","label":"Primary Network Gateway IP with Prefix - Production Subnet","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"primary_network_test_name","value":"Dev-SubnetA","label":"Primary Network Name - Test Subnet","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":true,"description":"Example :- 10.10.10.1\/24\nIE :-  gateway_ip\/network_prefix","data_type":"BASE","type":"LOCAL","name":"primary_network_test","value":"10.1.1.1\/24","label":"Primary Network Gateway IP with Prefix - Test Subnet","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"dr_network_prod_name","value":"Nutanix_tenant_Overlay_Subnet","label":"DR Network Name - Production Subnet","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":true,"description":"Example :- 10.10.10.1\/24\nIE :-  gateway_ip\/network_prefix","data_type":"BASE","type":"LOCAL","name":"dr_network_prod","value":"10.10.10.1\/24","label":"Recovery Network Gateway IP with Prefix - Production Subnet","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"dr_network_test_name","value":"Nutanix_tenant_Overlay_Subnet","label":"DR Network Name - Test Subnet","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":true,"description":"Example :- 10.10.10.1\/24\nIE :-  gateway_ip\/network_prefix","data_type":"BASE","type":"LOCAL","name":"dr_network_test","value":"10.10.10.1\/24","label":"Recovery Network Gateway IP with Prefix - Test Subnet","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"You will need to provide VM Name along with static IP's of production and test at Primary and production and test at recovery site.","data_type":"BASE","type":"LOCAL","name":"static_ip_mapping","value":"False","label":"Enable Static IP Mapping ","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["False","True"]}},{"val_type":"STRING","is_mandatory":true,"description":"For Static IP Mapping: If you have multiple VM's you can pass qama separated VM names. \nExample :- VM1, VM2","data_type":"BASE","type":"LOCAL","name":"vm_name","value":"Test","label":"VM Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Should be within the range of \"Primary Network Name - Production Subnet\".  If you have passed qama separated VM's you need to pass qama separated IP's as well in same sequence as VM Name.  ","data_type":"BASE","type":"LOCAL","name":"primary_network_prod_static_ip","value":"10.1.1.3","label":"Primary Network Prod Static IP [ Should be present VM IP ]","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Should be within the range of \"Primary Network Name - Test Subnet\". If you have passed qama separated VM's you need to pass qama separated IP's as well in same sequence as VM Name. Ex :- 10.1.1.3, 10.1.1.6","data_type":"BASE","type":"LOCAL","name":"primary_network_test_static_ip","value":"10.1.1.3","label":"Primary Network Test Static IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Should be within the range of \"DR Network Name - Prod Subnet\".  If you have passed qama separated VM's you need to pass qama separated IP's as well in same sequence as VM Name. ","data_type":"BASE","type":"LOCAL","name":"dr_network_prod_static_ip","value":"10.10.10.3","label":"DR Network Prod Static IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Should be within the range of \"DR Network Name - Test Subnet\".  If you have passed qama separated VM's you need to pass qama separated IP's as well in same sequence as VM Name. ","data_type":"BASE","type":"LOCAL","name":"dr_network_test_static_ip","value":"10.10.10.3","label":"DR Network Test Static IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"10.44.77.68","label":"PC IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_passwd","value":"8vEHWEqX7cZuXthp4zIN7cFo\/J001TExHp3ylChUAS6161zQrhZHuQEfcQ==:utf-8","label":"Prism Central Password","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_username","value":"8XZs5kQpeSVNc09Qc4bF\/nfDLttK1G3jcMLjiwma9cUrxpSWcQ==:utf-8","label":"Prism Central UserName","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"Leap DR"},"api_version":"3.0","metadata":{"last_update_time":"1656418981352845","kind":"runbook","spec_version":95,"creation_time":"1654521768815663","name":"Leap DR"}}