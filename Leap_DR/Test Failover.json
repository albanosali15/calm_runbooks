{"status":{},"contains_secrets":true,"product_version":"3.6.2","spec":{"description":"","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Test Failover "}],"name":"702b66b7_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Test Failover ","attrs":{"script":"sleep(2)\n# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP = \"@@{PC_IP}@@\".strip()\npc_user = \"@@{prism_central_username}@@\".strip()\npc_password = \"@@{prism_central_passwd}@@\".strip()\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n    \ndef wait_for_completion(data):\n    if data.ok:\n        print(\"Test in progress ..\")\n        state = \"PENDING\"\n        while state == \"PENDING\":\n            _uuid = data.json()['api_response_list'][0]['api_response']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(pc_user, pc_password),\n                                    verify=False)                      \n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Error occured ---> \",responce.json().get('message_list', \n                                            responce.json().get('error_detail', responce.json())))\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"COMPLETE\"\n    else:\n        print(\"Error occured ---> \",data.json().get('message_list', \n                                data.json().get('error_detail', data.json())))\n        exit(1)\n\ndef get_spec(**params):\n    return (\n    {\"action_on_failure\": \"CONTINUE\",\n    \"execution_order\": \"NON_SEQUENTIAL\",\n    \"api_request_list\": [\n        {\n            \"operation\": \"POST\",\n            \"path_and_params\": \"\/api\/nutanix\/v3\/recovery_plan_jobs\",\n            \"body\": {\n                \"spec\": {\n                    \"name\": \"Test Failover - @@{calm_now}@@\",\n                    \"resources\": {\n                        \"recovery_plan_reference\": {\n                            \"kind\": \"recovery_plan\",\n                            \"name\": params[\"recovery_plan_name\"],\n                            \"uuid\": params[\"recovery_plan_uuid\"]\n                        },\n                        \"execution_parameters\": {\n                            \"action_type\": \"TEST_FAILOVER\",\n                            \"failed_availability_zone_list\": [\n                                {\n                                    \"availability_zone_url\": params[\"failed_availability_zone_uuid\"]\n                                }\n                            ],\n                            \"recovery_availability_zone_list\": [\n                                {\n                                    \"availability_zone_url\": params[\"recovery_availability_zone_uuid\"]\n                                }\n                            ],\n                            \"should_continue_on_validation_failure\": True\n                        }\n                    }\n                },\n                \"metadata\": {\n                    \"kind\": \"recovery_plan_job\"\n                },\n                \"api_version\": \"3.1.0\"\n            }}],\n            \"api_version\": \"3.1.0\"\n        })\n\ndef test_failover(**params):\n    payload = get_spec(**params)\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/batch\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(pc_user,pc_password),\n                        timeout=None, verify=False)\n    if not data.ok:\n        print(\"Error :- \",data.json())\n        exit(1)\n    if data.json()[\"api_response_list\"][0][\"status\"] not in ['200', '202', '203']:\n        print(\"Error :- \",data.json())\n        exit(1)\n\n    wait_for_completion(data)\n    print(\"%s recovery plan tested successfully, Its working as \"\\\n                          \"expected.\"%params[\"recovery_plan_name\"])\n    \ndef get_account_info(az_url):\n    url = _build_url(scheme=\"https\",resource_type=\"\/groups\")\n    payload = {\n        \"entity_type\": \"availability_zone_physical\",\n        \"grouping_attribute\": \"type\",\n        \"group_member_attributes\": [\n            {\n                \"attribute\": \"name\"\n            },\n            {\n                \"attribute\": \"url\"\n            }\n        ],\n        \"query_name\": \"prism:BaseGroupModel\"\n    }\n    \n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(pc_user,pc_password),\n                        timeout=None, verify=False)\n    if data.ok:\n        for cloud_trust in data.json()[\"group_results\"]:\n            if cloud_trust[\"entity_results\"][0][\"data\"][0][\"values\"][0][\"values\"][0] == az_url:\n                return cloud_trust[\"entity_results\"][0][\"data\"][1][\"values\"][0][\"values\"][0]\n        print(\"%s availability zone not present on %s\"%(az_url, PC_IP))\n        exit(1)\n    else:\n        print(\"Failed to retrive availability zone info of %s\"%az_url)\n        print(data.json())\n        exit(1)\n        \ndef recovery_plan_info(plan_name):\n    print(plan_name)\n    url = _build_url(scheme=\"https\",resource_type=\"\/recovery_plans\/list\")\n    data = requests.post(url, json={\"kind\":\"recovery_plan\", \"filter\":\"name==%s\"%plan_name},\n                        auth=HTTPBasicAuth(pc_user,pc_password),\n                        verify=False)\n    print(url)\n    print(data)\n    if len(data.json()['entities']) != 0:\n        recovery_plan_uuid = data.json()[\"entities\"][0][\"metadata\"][\"uuid\"]\n        return recovery_plan_uuid\n    else:\n        print(\"Got Error while fetching recovery plan info - %s\"%plan_name)\n        print(\"Please make sure recovery plan name is correct and active.\")\n        print(data.json())\n        exit(1)\n\nparams = {\"recovery_plan_name\":\"@@{recovery_plan_name}@@\".strip(),\n          \"recovery_plan_uuid\":recovery_plan_info(\"@@{recovery_plan_name}@@\".strip()),\n          \"failed_availability_zone_uuid\":get_account_info(\"@@{account_name_failing_over_from}@@\".strip()),\n          \"recovery_availability_zone_uuid\":get_account_info(\"@@{account_name_failing_over_to}@@\".strip())\n         }\ntest_failover(**params)\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"2619242e_runbook","main_task_local_reference":{"kind":"app_task","name":"702b66b7_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"recovery_plan_name","value":"recovery1","label":"Recovery Plan Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Availability Zone of Remote PC's Cluster on Local PC.\nExample :- PC_10.42.244.10","data_type":"BASE","type":"LOCAL","name":"account_name_failing_over_from","value":"PC_10.44.76.172","label":"Availability Zone of Entity Failing Over From","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Availability Zone of Local PC","data_type":"BASE","type":"LOCAL","name":"account_name_failing_over_to","value":"Local AZ","label":"Availability Zone of Entity Failing Over To","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"10.44.76.135","label":"Prism Central IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_username","value":"kD9tENlEZQkeklfMoRb2aWesptREoix\/Sz9kzt0BFqOA9ptEZw==:utf-8","label":"Prism Central Username","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_passwd","value":"ZCqCCgkGhAlbSOoaORk2t9nfin4NcAmLTLCj4iO9JJfw\/Mam7oOhnoN6OQ==:utf-8","label":"Prism Central Password","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"Test Failover_merge1"},"api_version":"3.0","metadata":{"last_update_time":"1688656288905577","kind":"runbook","spec_version":5,"creation_time":"1688651655523918","name":"Test Failover_merge1"}}