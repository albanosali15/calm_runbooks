{"status":{},"contains_secrets":true,"product_version":"3.6.0","spec":{"description":"","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Validate Parameters"},{"kind":"app_task","name":"VPC Operations"}],"name":"21662e24_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Validate Parameters"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"VPC Operations"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Validate Parameters","attrs":{"exit_status":[],"script":"import requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP =  \"@@{PC_IP}@@\".strip()\npc_username = \"@@{prism_central_username}@@\".strip()\npc_password = \"@@{prism_central_passwd}@@\".strip()\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n  \ndef _get_vlan_details():\n    existing_subnet = \"@@{external_subnet_uuid}@@\"\n    if existing_subnet == \"NA\":\n        print(\"Input Error :- External Subnet UUID is mandatory parameter.\")\n        exit(1)\n    _url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%existing_subnet)\n    _data = requests.get(_url, auth=HTTPBasicAuth(pc_username, pc_password),verify=False)\n    if _data.ok:\n        if _data.json().get('state', _data.json()['status']['state']) != \"COMPLETE\":\n            print(\"Input Error :- Please Provide Valide External Subnet UUID\")\n            exit(1)      \n        return _data.json()['spec']['name']\n    else:\n        print(\"Input Error :- Please Provide Valide External Subnet UUID\")\n        print(_data.json().get(\"message_list\", _data.json()))\n        exit(1)\n\nif \"@@{operation}@@\" in [\"update\", \"delete\"]:\n    if \"@@{vpc_uuid}@@\" == \"NA\":\n        print(\"Input Error :- VPC UUID is mandatory for Update and Delete operations.\")\n        exit(1)\n\nvpc_items = {}\nif \"@@{operation}@@\" != \"delete\":\n    if \"@@{externally_routable_ip}@@\".strip() == \"NA\":\n        external_ip = \"NA\"\n        prefix = 0\n    else:\n    \texternal_ip, prefix = \"@@{externally_routable_ip}@@\".strip().split(\"\/\")\n    vpc_items =  {\n                    \"name\": \"@@{vpc_name}@@\".strip(),\n                    \"dns_servers\" : \"@@{dns_server}@@\".strip(),\n                    \"external_subnet_name\": _get_vlan_details(),\n                    \"external_subnet_uuid\" : \"@@{external_subnet_uuid}@@\",\n                    \"externally_routable_ip\": external_ip,\n                    \"externally_routable_ip_prefix\": int(prefix)\n                }\nprint(\"vpc_items={}\".format(vpc_items))","eval_variables":["vpc_items"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"VPC Operations","attrs":{"script":"#script\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP = \"@@{PC_IP}@@\".strip()\npc_username = \"@@{prism_central_username}@@\".strip()\npc_password = \"@@{prism_central_passwd}@@\".strip()\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_default_spec():\n    return(\n            {\n            \"api_version\": \"3.1.0\",\n            \"metadata\": {\"kind\": \"vpc\", \"categories\": {}},\n            \"spec\": {\n                \"name\": None,\n                \"resources\": {\n                    \"external_subnet_list\": []\n                    },\n                },\n            })\n\ndef create_vpc(**params):\n    payload = _get_default_spec()\n    if params['uuid'] != \"NA\":\n        payload[\"spec\"]['uuid'] = params['uuid']\n    payload[\"spec\"]['name'] = params['name']\n    if params.get(\"common_domain_name_server_ip_list\", \"NA\") != \"NA\":\n        payload[\"spec\"][\"resources\"][\"common_domain_name_server_ip_list\"] = \\\n                                params[\"common_domain_name_server_ip_list\"]\n    payload[\"spec\"][\"resources\"][\"external_subnet_list\"] = \\\n                                params[\"external_subnet_list\"]\n    if params.get(\"externally_routable_prefix_list\", \"NA\") != \"NA\":\n        payload[\"spec\"][\"resources\"][\"externally_routable_prefix_list\"] = \\\n                                params[\"externally_routable_prefix_list\"]\n    if \"@@{operation}@@\" == \"update\":\n        update_vpc(**payload[\"spec\"])\n    else:\n        url = _build_url(scheme=\"https\",\n                        resource_type=\"\/vpcs\")    \n        data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(pc_username, pc_password ),\n                         timeout=None, verify=False)\n                         \n        if not data.ok:\n            print(\"Got Error ---> \",data.json().get('message_list', \n                                    data.json().get('error_detail', data.json())))\n            exit(1)\n        else:\n            task_uuid = wait_for_completion(data)\n            vpc = {\"vpc_name\": params['name'], \n                   \"vpc_uuid\":data.json()['metadata']['uuid']}\n            print(\"Please make a note of VPC Details for furure refrerence.\")\n            print(vpc)\n\ndef update_vpc(**payload):\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/vpcs\/%s\"%\"@@{vpc_uuid}@@\")    \n    data = requests.get(url, auth=HTTPBasicAuth(pc_username, pc_password),\n                        timeout=None, verify=False)\n                         \n    if not data.ok:\n        print(\"Got Error ---> \",data.json().get('message_list', \n                                data.json().get('error_detail', data.json())))\n        exit(1)\n        \n    _spec = data.json()    \n    for x in [\"last_update_time\", \"creation_time\", \"spec_hash\", \"categories_mapping\", \"owner_reference\", \"categories\"]:\n        del _spec[\"metadata\"][x]\n        \n    del _spec[\"status\"]\n    del _spec[\"spec\"]\n    \n    _spec[\"spec\"] = payload\n    \n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/vpcs\/%s\"%\"@@{vpc_uuid}@@\")    \n    data = requests.put(url, json=_spec,\n                        auth=HTTPBasicAuth(pc_username, pc_password),\n                        timeout=None, verify=False)\n                         \n    if not data.ok:\n        print(\"Got Error ---> \",data.json().get('message_list', \n                                data.json().get('error_detail', data.json())))\n        exit(1)\n    else:\n        task_uuid = wait_for_completion(data)\n        print(\"%s VPC updated successfully.\"%\"@@{vpc_name}@@\".strip())\n        \ndef delete_vpc(**params):\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/vpcs\/%s\"%params[\"uuid\"])\n    \n    data = requests.delete(url,auth=HTTPBasicAuth(pc_username, pc_password),\n                           timeout=None, verify=False)\n                         \n    if not data.ok:\n        print(\"Got Error ---> \",data.json().get('message_list', \n                                data.json().get('error_detail', data.json())))\n        exit(1)\n    else:\n        task_uuid = wait_for_completion(data)\n        print(\"%s VPC Deleted successfully.\"%params[\"name\"])\n        \ndef wait_for_completion(data):\n    if data.status_code in [200, 202]:\n        state = data.json()['status'].get('state')\n        if state == \"DELETE_PENDING\":\n            state = \"PENDING\"\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(pc_username, pc_password), \n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED', 'DELETE_PENDING']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Got Error ---> \",responce.json().get('message_list', \n                                        responce.json().get('error_detail', responce.json())))\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"COMPLETE\"\n    else:\n        print(\"Got Error ---> \",data.json().get('message_list', \n                                data.json().get('error_detail', data.json())))\n        exit(1)\n    return data.json()['status']['execution_context']['task_uuid']\n    \ndef validate_params():\n    params = {}\n    params_dict = @@{vpc_items}@@\n    params['name'] = \"@@{vpc_name}@@\".strip()\n    params['uuid'] = \"@@{vpc_uuid}@@\"\n    if \"@@{operation}@@\" == \"delete\":\n        delete_vpc(**params)\n    else:\n        print(\"##### Creating VPC %s #####\"%params['name'])\n        if params_dict.get(\"dns_servers\", \"NA\") != \"NA\":\n            params[\"common_domain_name_server_ip_list\"] = [{}]\n            params[\"common_domain_name_server_ip_list\"][0]['ip'] = \\\n                                            params_dict.get('dns_servers', 'None')\n        params[\"external_subnet_list\"] = [{}]\n        if params_dict.get(\"externally_routable_ip\", \"NA\") != \"NA\":\n            params[\"externally_routable_prefix_list\"] = [{}]\n            params[\"externally_routable_prefix_list\"][0][\"ip\"] = \\\n                                            params_dict[\"externally_routable_ip\"]\n            params[\"externally_routable_prefix_list\"][0][\"prefix_length\"] = \\\n                                            params_dict[\"externally_routable_ip_prefix\"]\n                                            \n        if params_dict.get(\"external_subnet_name\", \"NA\") != \"NA\":\n            params[\"external_subnet_list\"][0][\"external_subnet_reference\"] = {}\n            params[\"external_subnet_list\"][0][\"external_subnet_reference\"][\"kind\"] = \"subnet\"\n            params[\"external_subnet_list\"][0][\"external_subnet_reference\"][\"name\"] = \\\n                                            params_dict[\"external_subnet_name\"]\n            params[\"external_subnet_list\"][0][\"external_subnet_reference\"][\"uuid\"] = \\\n                                            params_dict[\"external_subnet_uuid\"]\n                                            \n        if params_dict.get(\"external_subnet_uuid\", \"NA\") != \"NA\":\n            params[\"external_subnet_list\"][0][\"external_subnet_reference\"][\"uuid\"] = \\\n                                                    params_dict['external_subnet_uuid']\n        create_vpc(**params)\n\nvalidate_params()","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"3c8eed1d_runbook","main_task_local_reference":{"kind":"app_task","name":"21662e24_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"vpc_name","value":"test_tenant","label":"VPC Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"operation","value":"delete","label":"Operation","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["create","update","delete"]}},{"val_type":"STRING","is_mandatory":true,"description":"# Required for Update and Delete Operations. Keep NA for Create Operation.","data_type":"BASE","type":"LOCAL","name":"vpc_uuid","value":"886fa64c-ec19-407d-91bf-d2a5f310dc19","label":"VPC UUID","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Keep NA for Delete operation, Required for Create and Update.","data_type":"BASE","type":"LOCAL","name":"external_subnet_uuid","value":"NA","label":"External Subnet UUID","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Keep NA if not required.\nEx :- 10.10.10.0\/24","data_type":"BASE","type":"LOCAL","name":"externally_routable_ip","value":"NA","label":"Externally Routable IP with prefix","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Keep NA if not required.","data_type":"BASE","type":"LOCAL","name":"dns_server","value":"NA","label":"DNS Server","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"10.44.77.68","label":"PC IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_username","value":"2AOoXqxdM1dWEP\/j2wiurHKkX1NIjCTRwEpuaRlfg\/+4iVRxZA==:utf-8","label":"PC Username","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_passwd","value":"Na4fuV4w4V0CfvD2X6+poD79vrWFdXpvrj09TG4BXOTKQrvqR7hSWTx6vw==:utf-8","label":"PC Password","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"Manage VPC"},"api_version":"3.0","metadata":{"last_update_time":"1666073530187956","kind":"runbook","spec_version":2,"creation_time":"1659580008756623","name":"Manage VPC"}}