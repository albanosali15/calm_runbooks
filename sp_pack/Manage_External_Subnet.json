{"status":{},"contains_secrets":true,"product_version":"3.6.0","spec":{"description":"runbook_for_subnet","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Validate parameters"},{"kind":"app_task","name":"Manage Subnet"}],"name":"e45355be_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Validate parameters"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Manage Subnet"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Validate parameters","attrs":{"exit_status":[],"script":"\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP =  \"@@{PC_IP}@@\".strip()\npc_username = \"@@{prism_central_username}@@\".strip()\npc_password = \"@@{prism_central_passwd}@@\".strip()\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n  \ndef _get_vlan_id():\n    url = _build_url(scheme=\"https\",resource_type=\"\/subnets\/list\")\n    data = requests.post(url, json={\"kind\":\"subnet\"},\n                         auth=HTTPBasicAuth(pc_username, \n                                            pc_password),\n                         timeout=None, verify=False)\n    if data.ok:\n        vlan_id = []\n        for x in data.json()['entities']:\n            vlan_id.append(x['spec']['resources'].get('vlan_id', 0))\n        id = 10\n        while True:\n            if id in vlan_id:\n                id+=1\n            else:\n                break\n        return id\n    else:\n        print(\"Error while fetching subnet list :- \",data.json().get('message_list',\n                                     data.json().get('error_detail', data.json())))\n        exit(1)\n        \nif \"@@{operation}@@\" in [\"update\", \"delete\"]:\n    if \"@@{vlan_uuid}@@\" == \"NA\":\n        print(\"Input Error :- External VLAN UUID is \"\\\n              \"mandatory for Update and Delete Operation.\")\n        exit(1)\n\nexternal_subnet_items = {}\nif \"@@{operation}@@\" != \"delete\":\n    mandatory_list = {\"Cluster Name\":\"@@{cluster_name}@@\".strip(), \n                      \"Subnet Name\":\"@@{vlan_name}@@\".strip(), \n                      \"Gateway IP\":\"@@{gateway_ip}@@\".strip(), \n                      \"Network IP with Prefix\":\"@@{network_ip}@@\".strip()}\n    for x in mandatory_list.keys():\n        if mandatory_list[x] == \"NA\":\n            print(\"Input Error :- %s is mandatory for Create and Update operations.\"%x)\n            exit(1)\n    ip_pool = []\n    ip_pools = \"@@{ip_pools}@@\".strip().split(\",\")\n    for ip in ip_pools:\n        if \"-\" not in ip:\n            print(\"Input Error :- Please provide IP Pool in below format.\")\n            print(\"Example :- 10.10.10.2-10.10.10.9\")\n            exit(1)\n        start_ip, end_ip = ip.split(\"-\")\n        ip_pool.append({\"start_ip\":start_ip, \"end_ip\":end_ip})\n        \n    if \"\/\" not in \"@@{network_ip}@@\":\n        print(\"Input Error :- Please provide Network IP with Prefix in below format.\")\n        print(\"Example :- 10.10.10.0\/24\")\n        exit(1)\n    network_ip, network_prefix = \"@@{network_ip}@@\".strip().split(\"\/\")\n    external_subnet_items = {\n                              \"external_subnet\": {\n                              \"vlan_uuid\" : \"@@{vlan_uuid}@@\",\n                              \"vlan_id\": @@{vlan_id}@@,\n                               \"cluster\": {\n                                   \"name\": \"@@{cluster_name}@@\".strip()\n                                },\n                                \"enable_nat\": @@{enable_nat}@@,\n                                \"ipam\": {\n                                    \"gateway_ip\": \"@@{gateway_ip}@@\".strip(),\n                                    \"network_ip\": network_ip,\n                                    \"network_prefix\": int(network_prefix),\n                                    \"ip_pools\": ip_pool\n                                \t}\n                                }\n                            }\nprint(\"external_subnet_items={}\".format(external_subnet_items))","eval_variables":["external_subnet_items"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Manage Subnet","attrs":{"script":"#script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP = \"@@{PC_IP}@@\".strip()\npc_user = \"@@{prism_central_username}@@\".strip()\npc_password = \"@@{prism_central_passwd}@@\".strip()\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n  \ndef _get_cluster_details(cluster_name):\n    cluster_details = {'kind':'cluster'}\n    payload = {\"kind\": \"cluster\"}\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/clusters\/list\")\n    data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(pc_user,pc_password), \n                         verify=False)\n    if data.ok:\n        for _cluster in data.json()['entities']:\n            if _cluster['status']['name'] == cluster_name:\n                cluster_details['uuid'] = str(_cluster['metadata']['uuid'])\n                return cluster_details\n        print(\"Input Error :- Given cluster %s not present on %s\"%(cluster_name, PC_IP))\n        exit(1)\n    else:\n        print(\"Error while fetching %s cluster info\"%cluster_name)\n        print(data.json().get('message_list',data.json().get('error_detail', data.json())))\n        exit(1)        \n\ndef _get_default_spec():\n    return (\n        {\n          \"api_version\": \"3.1.0\",\n          \"metadata\": {\"kind\": \"subnet\"},\n          \"spec\": {\n                  \"name\": \"\",\n                  \"resources\": {\n                      \"ip_config\": {},\n                      \"subnet_type\": None,\n                      },\n                  },\n              }\n          )\n\ndef _get_ipam_spec(**params):\n    ipam_spec = {}\n    if params['set_ipam'] == 'yes':\n        ipam_spec = _get_default_ipconfig_spec()\n        ipam_config = params[\"ipam\"]\n        ipam_spec[\"subnet_ip\"] = ipam_config[\"network_ip\"]\n        ipam_spec[\"prefix_length\"] = ipam_config[\"network_prefix\"]\n        ipam_spec[\"default_gateway_ip\"] = ipam_config[\"gateway_ip\"]\n        if \"ip_pools\" in ipam_config and ipam_config[\"ip_pools\"] != \"NA\":\n            pools = []\n            ipam_spec[\"pool_list\"] = []\n            for ip_pools in ipam_config[\"ip_pools\"]:\n                if (ip_pools.get('start_ip', 'NA') != 'NA') and (ip_pools.get('end_ip', 'NA') != 'NA'):\n                    pools.append({\"range\": \"%s %s\"%(ip_pools['start_ip'],\n                                                    ip_pools['end_ip'])})\n            ipam_spec[\"pool_list\"] = pools\n        if \"dhcp_options\" in ipam_config:\n            dhcp_spec = _get_default_dhcp_spec()\n            dhcp_config = ipam_config[\"dhcp_options\"]\n            if dhcp_config['domain_name_server_list'] != 'NA': \n                dhcp_spec[\"domain_name_server_list\"] = dhcp_config[\"domain_name_server_list\"]\n            if dhcp_config[\"domain_search_list\"] != 'NA':\n                dhcp_spec[\"domain_search_list\"] = dhcp_config[\"domain_search_list\"]\n            if dhcp_config[\"domain_name\"] != 'NA':\n                dhcp_spec[\"domain_name\"] = dhcp_config[\"domain_name\"]\n            if dhcp_config[\"boot_file_name\"] != 'NA':\n              dhcp_spec[\"boot_file_name\"] = dhcp_config[\"boot_file_name\"]\n            if dhcp_config[\"tftp_server_name\"] != 'NA':\n                dhcp_spec[\"tftp_server_name\"] = dhcp_config[\"tftp_server_name\"]\n            ipam_spec[\"dhcp_options\"] = dhcp_spec\n    return ipam_spec\n\ndef _get_default_ipconfig_spec():\n    return (\n        {\n         \"subnet_ip\": None,\n         \"prefix_length\": None,\n         \"default_gateway_ip\": None,\n        }\n      )\n\ndef _get_default_dhcp_spec():\n    return (\n      {\n        \"domain_name_server_list\": [],\n        \"domain_search_list\": [],\n        \"domain_name\": \"\",\n                \"boot_file_name\": \"\",\n                \"tftp_server_name\": \"\",\n       }\n    )\n\ndef get_params(**params):\n    params['cluster_reference'] = _get_cluster_details(\n                                cluster_name=params['cluster_name'])\n    params['ipam_spec'] = _get_ipam_spec(**params)\n    payload = _get_default_spec()\n    payload[\"spec\"]['name'] = params['subnet_name']\n    payload[\"spec\"][\"resources\"][\"subnet_type\"] = \"VLAN\"\n    payload[\"spec\"][\"resources\"][\"vlan_id\"] = params['vlan_id']\n    payload[\"spec\"][\"resources\"][\"ip_config\"] = params['ipam_spec']\n    payload[\"spec\"][\"cluster_reference\"] = params['cluster_reference']\n    payload[\"spec\"][\"resources\"][\"is_external\"] = True\n    payload[\"spec\"][\"resources\"][\"enable_nat\"] = params['external_subnet']['enable_nat']\n    return payload\n  \ndef external_subnet(**params):\n    payload = get_params(**params)\n    url = _build_url(scheme=\"https\",\n                        resource_type=\"\/subnets\")    \n    data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(pc_user,pc_password),\n                         timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"%s subnet has been created successfully.\"%payload[\"spec\"]['name'])\n    print(\"Please note subnet UUID for future reference :- %s\"%data.json()[\"metadata\"][\"uuid\"])\n\ndef update_subnet(**payload):\n    _uuid = \"\"\n    _spec = \"\"\n    if payload[\"vlan_uuid\"] == \"NA\" or payload[\"vlan_uuid\"] == \"\" :\n        print(\"Input Error :- Please Provide proper UUID of %s subnet to update it.\"%payload['subnet_name'])\n        print(\"Your provided UUID :- %s\"%payload[\"vlan_uuid\"])\n        exit(1)\n    else:\n        _url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%payload[\"vlan_uuid\"])\n        _data = requests.get(_url, auth=HTTPBasicAuth(pc_user, pc_password),verify=False)\n        if _data.ok:\n            if _data.json()['spec']['name'] != payload['subnet_name']:\n                print(\"Input Error :- Provided UUID %s does not match with provided \"\\\n                    \"VLAN name %s\"%(payload[\"vlan_uuid\"], payload['subnet_name']))\n                exit(1)\n            else:\n                _uuid = payload[\"vlan_uuid\"]\n                _spec = _data.json()\n        else:\n            print(_data.json().get('message_list',_data.json().get('error_detail', _data.json())))\n            exit(1)\n\n    del payload[\"vlan_uuid\"]\n    _params = {}\n    del _spec[\"status\"]\n    for x in [\"last_update_time\", \"creation_time\", \"spec_hash\", \"categories_mapping\", \"owner_reference\", \"categories\"]:\n        del _spec[\"metadata\"][x]\n\n    _payload = get_params(**payload)\n    _spec[\"spec\"] = _payload[\"spec\"]\n    \n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%_uuid)\n    data = requests.put(url, json=_spec,\n                         auth=HTTPBasicAuth(pc_user,pc_password),\n                         timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"Subnet %s updated successfully.\"%(payload['subnet_name']))\n\ndef delete_subnet(**params):\n    _uuid = \"\"\n    if params[\"vlan_uuid\"] == \"NA\" or params[\"vlan_uuid\"] == \"\" :\n        print(\"Input Error :- Please Provide proper UUID of %s subnet to update it.\"%params['subnet_name'])\n        print(\"Your provided UUID :- %s\"%params[\"vlan_uuid\"])\n        exit(1)\n    else:\n        _url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%params[\"vlan_uuid\"])\n        _data = requests.get(_url, auth=HTTPBasicAuth(pc_user, pc_password),verify=False)\n        if _data.ok:\n            if _data.json()['spec']['name'] != params['subnet_name']:\n                print(\"Input Error :- Provided UUID %s does not match with provided \"\\\n                    \"VLAN name %s\"%(params[\"vlan_uuid\"], params['subnet_name']))\n                exit(1)\n            else:\n                _uuid = params[\"vlan_uuid\"]\n        else:\n            print(_data.json().get('message_list',_data.json().get('error_detail', _data.json())))\n            exit(1)\n\n    url = _build_url(scheme=\"https\",\n                     resource_type=\"\/subnets\/%s\"%_uuid)\n    data = requests.delete(url, auth=HTTPBasicAuth(pc_user,pc_password),\n                            timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"Subnet %s deleted successfully.\"%(params[\"subnet_name\"]))\n\ndef wait_for_completion(data):\n    if data.ok:\n        state = data.json()['status'].get('state')\n        if state == \"DELETE_PENDING\":\n            state = \"PENDING\"\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(pc_user,pc_password), \n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED', 'DELETE_PENDING']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(responce.json().get('message_list',responce.json().get(\\\n                                          'error_detail', responce.json())))\n                state = 'FAILED'\n                exit(1)  \n                \n            else:\n                state = \"COMPLETE\"\n    else:\n        print(data.json().get('message_list',data.json().get('error_detail', data.json())))\n        exit(1)  \n            \ndef validate_params():\n    params = @@{external_subnet_items}@@\n    operation = \"@@{operation}@@\"\n    params['subnet_name'] = \"@@{vlan_name}@@\".strip()\n    params['vlan_uuid'] = \"@@{vlan_uuid}@@\"\n    if operation == \"delete\":\n        delete_subnet(**params)\n    else:\n        params['ipam'] = {}\n        params['set_ipam'] = \"yes\"\n        params['ipam']['ip_pools'] = {}\n        params['ipam']['network_ip'] = params['external_subnet']['ipam']['network_ip']\n        params['ipam']['network_prefix'] = params['external_subnet']['ipam']['network_prefix']\n        params['ipam']['gateway_ip'] = params['external_subnet']['ipam']['gateway_ip']\n        params['cluster_name'] = params['external_subnet']['cluster']['name']\n        params['vlan_id'] = params['external_subnet']['vlan_id']\n        params['ipam']['ip_pools'] = params['external_subnet']['ipam'].get('ip_pools', \"NA\")\n        if operation == \"update\":\n            update_subnet(**params)\n        else:\n            external_subnet(**params)                                                      \n\nvalidate_params()","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"dc151af2_runbook","main_task_local_reference":{"kind":"app_task","name":"e45355be_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"Prism Central IP","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"10.44.77.68","label":"PC IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"vlan_name","value":"test123","label":"Subnet Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"operation","value":"create","label":"Operation","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["create","update","delete"]}},{"regex":{"should_validate":false,"value":"^[\\d]*$"},"val_type":"INT","is_mandatory":true,"description":"# Required for Create and Update operations. Keep 0 for Delete operation.","data_type":"BASE","type":"LOCAL","name":"vlan_id","value":"0","label":"VLAN ID","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Required for Update and Delete operation. For Create keep NA.","data_type":"BASE","type":"LOCAL","name":"vlan_uuid","value":"NA","label":"External VLAN UUID","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"cluster_name","value":"NA","label":"Cluster Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"enable_nat","value":"True","label":"Enable NAT","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["True","False"]}},{"val_type":"STRING","is_mandatory":true,"description":"Ex :- 10.20.30.0\/24","data_type":"BASE","type":"LOCAL","name":"network_ip","value":"NA","label":"Network IP with Prefix","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Ex :- 10.20.30.1","data_type":"BASE","type":"LOCAL","name":"gateway_ip","value":"NA","label":"Gateway IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Ex :- 10.20.30.2-10.20.30.50","data_type":"BASE","type":"LOCAL","name":"ip_pools","value":"NA","label":"IP Pool","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"prism_central_username","value":"admin","label":"PC Username","attrs":{"type":""},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_passwd","value":"GHmPKWRYTQr39QcuZ7NhR8jMsV7jG5jTHKI0Vz4zBIyrxMHUGF\/U3tj9pw==:utf-8","label":"PC Password","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"Manage_External_Subnet"},"api_version":"3.0","metadata":{"last_update_time":"1666001777447328","kind":"runbook","spec_version":2,"creation_time":"1659579846575592","name":"Manage_External_Subnet"}}