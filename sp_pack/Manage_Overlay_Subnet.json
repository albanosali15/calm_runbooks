{"status":{},"contains_secrets":true,"product_version":"3.6.0","spec":{"description":"runbook_for_subnet","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Precheck validation"},{"kind":"app_task","name":"Manage Subnet"}],"name":"e45355be_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Precheck validation"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Manage Subnet"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Precheck validation","attrs":{"exit_status":[],"script":"sleep(2)\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nmanagement_username = \"@@{management_pc_username}@@\".strip()\nmanagement_password = \"@@{management_pc_password}@@\".strip()\n\nPC_IP = \"@@{PC_IP}@@\".strip()\npc_username = \"@@{prism_central_username}@@\".strip()\npc_passwd = \"@@{prism_central_passwd}@@\".strip()\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_vpc_details(vpc_name):\n    vpc_name = vpc_name.strip()\n    vpc_details = {\"kind\": \"vpc\"}\n    url = _build_url(scheme=\"https\",resource_type=\"\/vpcs\/list\")               \n    data = requests.post(url, json=vpc_details,\n                         auth=HTTPBasicAuth(pc_username, pc_passwd),verify=False)\n    if vpc_name in str(data.json()):\n        for _vpc in data.json()['entities']:\n            if _vpc['spec']['name'] == vpc_name:\n                return _vpc['metadata']['uuid']\n        print(\"%s VPC not present on %s\"%(vpc_name, PC_IP))\n        exit(1)\n    else:\n        print(\"Input Error ---> %s VPC not present on %s\"%(vpc_name, PC_IP))\n        exit(1)\n        \ndef _get_subnet_details(subnet_name):\n    subnet_name = subnet_name.strip()\n    url = _build_url(scheme=\"https\",resource_type=\"\/subnets\/list\")               \n    data = requests.post(url, json={\"kind\": \"subnet\", \"filter\":\"name==%s\"%subnet_name},\n                         auth=HTTPBasicAuth(pc_username, pc_passwd),verify=False)\n    if subnet_name in str(data.json()):\n        for _subnet in data.json()['entities']:\n            if _subnet['spec']['name'] == subnet_name:\n                return _subnet['metadata']['uuid']\n        print(\"%s Subnet not present on %s\"%(subnet_name, PC_IP))\n        exit(1)\n    else:\n        print(\"Input Error ---> %s Subnet not present on %s\"%(subnet_name, PC_IP))\n        exit(1)\n        \ndef _get_project_details(project_name):\n    project_name = project_name.strip()\n    url = _build_url(scheme=\"https\",host=\"localhost\",resource_type=\"\/projects\/list\")               \n    data = requests.post(url, json={\"kind\": \"project\"},\n                         auth=HTTPBasicAuth(management_username, \n                         management_password),verify=False)\n    if project_name in str(data.json()):\n        for _project in data.json()['entities']:\n            if _project['spec']['name'] == project_name:\n                return _project['metadata']['uuid']\n        print(\"%s Project not present on localhost\"%(project_name))\n        exit(1)\n    else:\n        print(\"Input Error ---> %s Project not present on localhost\"%(project_name))\n        exit(1)\n\nif \"@@{add_subnet_to_project}@@\".lower() == \"yes\":\n    if \"@@{project_name}@@\".strip() not in [\"\",\"na\", \"none\"]:\n        project_uuid = _get_project_details(\"@@{project_name}@@\")\n        print(\"project_uuid={}\".format(project_uuid))\n    else:\n        print(\"Input Error :- Provide Valid Project Name to map Overlay subnet into project.\")\n        exit(1)\n        \noverlay_subnet_items = {}\nsubnet_uuid = \"\"\nif \"@@{operation}@@\" in [\"update\", \"delete\"]:\n    subnet_uuid = _get_subnet_details(\"@@{vlan_name}@@\")\n    print(\"vlan_uuid={}\".format(subnet_uuid))\n        \nif \"@@{vlan_name}@@\".strip().lower() in [\"\", \"na\", \"none\"]:\n    print(\"Input Error :- Provide valid Overlay Subnet Name.\")\n    exit(1)\n    \nif \"@@{operation}@@\" != \"delete\":\n    if (\"@@{network_ip}@@\".strip().lower() in [\"\", \"na\", \"none\"]) or ( \"\/\" not in \"@@{network_ip}@@\"):\n        print(\"Please provide valide network IP with Prefix.\")\n        print(\"Example :- 10.10.10.0\/24\")\n        exit(1)\n    network_ip, prefix = \"@@{network_ip}@@\".split(\"\/\")\n    \n    dns_servers = \"@@{dns_servers}@@\".split(\",\")\n    if \"@@{dns_servers}@@\".strip().lower() in [\"\", \"na\", \"none\"]:\n        dns_servers = []\n        \n    domain_search = \"@@{domain_search}@@\".split(\",\")\n    if \"@@{gateway_ip}@@\" == \"NA\":\n        print(\"Input Error :- Gateway IP is a mandatory parameter.\")\n        exit(1)\n        \n    if \"@@{vpc_name}@@\".strip().lower() in [\"\", \"na\", \"none\"]:\n        print(\"Input Error :- Provide valid VPC name for Create and Update operations.\")\n        exit(1)\n        \n    ip_pool = []\n    start_ip = end_ip = \"NA\"\n    if \"@@{ip_pool}@@\".strip().lower() not in [\"\", \"na\", \"none\"]:\n        ip_pools = \"@@{ip_pool}@@\".strip().split(\",\")\n        for ip in ip_pools:\n            if \"-\" not in ip:\n                print(\"Input Error :- Please Provide IP Pool in below format.\")\n                print(\"Example :- 10.10.10.2-10.10.10.8\")\n                exit(1)\n            start_ip, end_ip = ip.split(\"-\")\n            ip_pool.append({\"start_ip\":start_ip.strip(), \"end_ip\":end_ip.strip()})\n            \n    overlay_subnet_items =  {\n                              \"overlay_subnet\": {\n                                \"vlan_uuid\":subnet_uuid,\n                                \"vpc\": {\"uuid\": _get_vpc_details(\"@@{vpc_name}@@\")},\n                                \"ipam\": {\n                                  \"dhcp\": {\n                                    \"dns_servers\": dns_servers,\n                                    \"domain_name\": \"@@{domain_name}@@\".strip(),\n                                    \"domain_search\": domain_search,\n                                    \"boot_file_name\":\"@@{boot_file_name}@@\".strip(),\n                                    \"tftp_server\":\"@@{tftp_server}@@\".strip()\n                                  },\n                                  \"ip_pools\": ip_pool,\n                                  \"gateway_ip\": \"@@{gateway_ip}@@\".strip(),\n                                  \"network_ip\": network_ip,\n                                  \"network_prefix\": int(prefix)\n                                  }\n                               }\n                            }\nprint(\"overlay_subnet_items={}\".format(overlay_subnet_items))","eval_variables":["overlay_subnet_items","vlan_uuid","project_uuid"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Manage Subnet","attrs":{"script":"#script\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\nPC_IP = \"@@{PC_IP}@@\".strip()\npc_username = \"@@{prism_central_username}@@\".strip()\npc_passwd = \"@@{prism_central_passwd}@@\".strip()\n\nmanagement_pc_username = \"@@{management_pc_username}@@\".strip()\nmanagement_pc_password = \"@@{management_pc_password}@@\".strip()\n\ndef _build_url(scheme, resource_type, host=PC_IP, **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n\ndef _get_project_spec(project):\n    url = _build_url(scheme=\"https\", host=\"localhost\",\n                    resource_type=\"\/projects_internal\/{}\".format(project))\n    data = requests.get(url,auth=HTTPBasicAuth(management_pc_username, \n                                               management_pc_password),\n                        timeout=None, verify=False)\n    return data.json()\n        \ndef update_project(subnet_uuid):\n    project = {\"uuid\": \"@@{project_uuid}@@\"}\n    payload = _get_project_spec(project['uuid'])\n\n    for x in ['categories', 'categories_mapping', 'creation_time', 'last_update_time', 'owner_reference']:\n        if x in payload['metadata'].keys():\n            del payload['metadata'][x]\n    del payload['status']\n\n    payload['spec']['access_control_policy_list'][0]['operation'] = \"UPDATE\"\n    \n    payload[\"spec\"][\"project_detail\"][\"resources\"][\"external_network_list\"].append(\\\n                                 {'name': \"@@{vlan_name}@@\", 'uuid': subnet_uuid})\n    \n    url = _build_url(scheme=\"https\",host=\"localhost\",\n                    resource_type=\"\/projects_internal\/{}\".format(project['uuid']))\n    data = requests.put(url, json=payload,\n                        auth=HTTPBasicAuth(management_pc_username, \n                                           management_pc_password),\n                        timeout=None, verify=False)\n    if data.ok:\n        task = wait_for_completion_update(data)       \n        print(\"Project %s updated successfully\"%\"@@{project_name}@@\".strip())\n    else:\n        print(\"Error while updating project : %s\"%data.json())\n        exit(1)\n    \ndef wait_for_completion_update(data):\n    if data.ok:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\", host=\"localhost\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(management_pc_username, \n                                        management_pc_password),verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Error in project update ---> \",responce.json().get('message_list', \n                                        responce.json().get('error_detail', responce.json())))\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"COMPLETE\"\n    else:\n        state = data.json().get('state')\n        print(\"Error in project update ---> \",data.json().get('message_list', \n                                data.json().get('error_detail', data.json())))\n        exit(1)\n\ndef _get_default_spec():\n    return (\n        {\n          \"api_version\": \"3.1.0\",\n          \"metadata\": {\"kind\": \"subnet\"},\n          \"spec\": {\n                  \"name\": \"\",\n                  \"resources\": {\n                      \"ip_config\": {},\n                      \"subnet_type\": None,\n                      },\n                  },\n              }\n          )\n\ndef _get_ipam_spec(**params):\n    ipam_spec = {}\n    if params['set_ipam'] == 'yes':\n        ipam_spec = _get_default_ipconfig_spec()\n        ipam_config = params[\"ipam\"]\n        ipam_spec[\"subnet_ip\"] = ipam_config[\"network_ip\"]\n        ipam_spec[\"prefix_length\"] = ipam_config[\"network_prefix\"]\n        ipam_spec[\"default_gateway_ip\"] = ipam_config[\"gateway_ip\"]\n        if \"ip_pools\" in ipam_config and ipam_config[\"ip_pools\"] != []:\n            pools = []\n            ipam_spec[\"pool_list\"] = []\n            for ip_pools in ipam_config[\"ip_pools\"]:\n                if (ip_pools.get('start_ip', 'NA') != 'NA') and (ip_pools.get('end_ip', 'NA') != 'NA'):\n                    pools.append({\"range\": \"%s %s\"%(ip_pools['start_ip'],\n                                                    ip_pools['end_ip'])})\n            ipam_spec[\"pool_list\"] = pools\n        if \"dhcp_options\" in ipam_config:\n            dhcp_spec = _get_default_dhcp_spec()\n            dhcp_config = ipam_config[\"dhcp_options\"]\n            if dhcp_config['domain_name_server_list'] != 'NA': \n                dhcp_spec[\"domain_name_server_list\"] = dhcp_config[\"domain_name_server_list\"]\n            if dhcp_config[\"domain_search_list\"] != ['NA']:\n                dhcp_spec[\"domain_search_list\"] = dhcp_config[\"domain_search_list\"]\n            if dhcp_config[\"domain_name\"] != 'NA':\n                dhcp_spec[\"domain_name\"] = dhcp_config[\"domain_name\"]\n            if dhcp_config[\"boot_file_name\"] != 'NA':\n              dhcp_spec[\"boot_file_name\"] = dhcp_config[\"boot_file_name\"]\n            if dhcp_config[\"tftp_server_name\"] != 'NA':\n                dhcp_spec[\"tftp_server_name\"] = dhcp_config[\"tftp_server_name\"]\n            ipam_spec[\"dhcp_options\"] = dhcp_spec\n    return ipam_spec\n\ndef _get_default_ipconfig_spec():\n    return (\n        {\n         \"subnet_ip\": None,\n         \"prefix_length\": None,\n         \"default_gateway_ip\": None,\n        }\n      )\n\ndef _get_default_dhcp_spec():\n    return (\n      {\n        \"domain_name_server_list\": [],\n        \"domain_search_list\": [],\n        \"domain_name\": \"\",\n                \"boot_file_name\": \"\",\n                \"tftp_server_name\": \"\",\n       }\n    )\n  \ndef get_params(**params):\n    params['vpc_reference'] = {\"kind\":\"vpc\", \"uuid\": params[\"overlay_subnet\"][\"vpc\"][\"uuid\"]}\n    payload = _get_default_spec()\n    payload[\"spec\"]['name'] = params['subnet_name']\n    payload[\"spec\"][\"resources\"][\"subnet_type\"] = \"OVERLAY\"\n    payload[\"spec\"][\"resources\"][\"vpc_reference\"] = params['vpc_reference']\n    params['ipam_spec'] = _get_ipam_spec(**params)\n    payload[\"spec\"][\"resources\"][\"ip_config\"] = params['ipam_spec']\n    return payload\n\ndef overlay_subnet(**params):\n    payload = get_params(**params)\n    url = _build_url(\n                    scheme=\"https\",\n                    resource_type=\"\/subnets\")    \n    data = requests.post(url, json=payload,\n                         auth=HTTPBasicAuth(pc_username, pc_passwd),\n                         timeout=None, verify=False)\n    wait_for_completion(data)\n    subnet_uuid = data.json()[\"metadata\"][\"uuid\"]\n    print(\"%s overlay subnet created successfully.\"%payload[\"spec\"][\"name\"])\n    print(\"Please note subnet UUID for future reference :- \",data.json()[\"metadata\"][\"uuid\"])\n    \n    if \"@@{add_subnet_to_project}@@\".lower() == \"yes\":\n        update_project(subnet_uuid)\n\ndef update_subnet(**payload):\n    _uuid = \"\"\n    _spec = \"\"\n    \n    _url = _build_url(scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%payload[\"vlan_uuid\"])\n    _data = requests.get(_url, auth=HTTPBasicAuth(pc_username, pc_passwd),verify=False)\n    if _data.ok:\n        if _data.json()['spec']['name'] != payload['subnet_name']:\n            print(\"Input Error :- Provided UUID %s does not match with provided \"\\\n                \"VLAN name %s\"%(payload[\"vlan_uuid\"], payload['subnet_name']))\n            exit(1)\n        else:\n            _uuid = payload[\"vlan_uuid\"]\n            _spec = _data.json()\n    else:\n        print(_data.json().get('message_list',_data.json().get('error_detail', _data.json())))\n        exit(1)\n        \n    _params = {}\n    del _spec[\"status\"]\n    for x in [\"last_update_time\", \"creation_time\", \"spec_hash\", \"categories_mapping\", \"owner_reference\", \"categories\"]:\n        del _spec[\"metadata\"][x]\n        \n    _payload = get_params(**payload)\n    del _spec[\"spec\"]\n    _spec[\"spec\"] = _payload[\"spec\"]\n    \n    url = _build_url(\n                    scheme=\"https\",\n                    resource_type=\"\/subnets\/%s\"%_uuid)\n    data = requests.put(url, json=_spec,\n                         auth=HTTPBasicAuth(pc_username, pc_passwd),\n                         timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"%s overlay subnet updated successfully.\"%payload[\"subnet_name\"])\n    \n    if \"@@{add_subnet_to_project}@@\".lower() == \"yes\":\n        update_project(subnet_uuid=payload[\"vlan_uuid\"])\n\ndef delete_subnet(**params):\n    _uuid = \"\"\n    _url = _build_url(scheme=\"https\",resource_type=\"\/subnets\/%s\"%params[\"vlan_uuid\"])\n    _data = requests.get(_url, auth=HTTPBasicAuth(pc_username, pc_passwd),verify=False)\n    if _data.ok:\n        if _data.json()['spec']['name'] != params['subnet_name']:\n            print(\"Input Error :- Provided UUID %s does not match with provided \"\\\n                \"VLAN name %s\"%(params[\"vlan_uuid\"], params['subnet_name']))\n            exit(1)\n        else:\n            _uuid = params[\"vlan_uuid\"]\n    else:\n        print(_data.json().get('message_list',_data.json().get('error_detail', _data.json())))\n        exit(1)\n        \n    url = _build_url(scheme=\"https\", resource_type=\"\/subnets\/%s\"%_uuid)\n    data = requests.delete(url, auth=HTTPBasicAuth(pc_username, pc_passwd),\n                            timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"%s overlay subnet deleted successfully.\"%params[\"subnet_name\"])\n\ndef wait_for_completion(data):\n    if data.ok:\n        state = data.json()['status'].get('state')\n        if state == \"DELETE_PENDING\":\n            state = \"PENDING\"\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(pc_username,pc_passwd), \n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(responce.json().get('message_list',responce.json().get(\\\n                                          'error_detail', responce.json())))\n                state = 'FAILED'\n                exit(1)  \n                \n            else:\n                state = \"COMPLETE\"\n    else:\n        print(data.json().get('message_list',data.json().get('error_detail', data.json())))\n        exit(1)\n            \ndef set_params():\n    params = @@{overlay_subnet_items}@@\n    operation = \"@@{operation}@@\"\n    params['subnet_name'] = \"@@{vlan_name}@@\".strip()\n    params['vlan_uuid'] = \"@@{vlan_uuid}@@\"\n    if operation == \"delete\":\n        delete_subnet(**params)\n    else:                                                     \n        params['ipam'] = {}\n        params['set_ipam'] = \"yes\"\n        params['vpc_uuid'] = params['overlay_subnet']['vpc'].get('uuid', 'NA')\n        params['vpc_name'] = params['overlay_subnet']['vpc'].get('name', 'NA')\n        params['ipam']['network_ip'] = params['overlay_subnet']['ipam']['network_ip']\n        params['ipam']['network_prefix'] = params['overlay_subnet']['ipam']['network_prefix']\n        params['ipam']['gateway_ip'] = params['overlay_subnet']['ipam']['gateway_ip']\n        params['ipam']['ip_pools'] = {}\n        params['ipam']['ip_pools'] = params['overlay_subnet']['ipam'].get('ip_pools', [])\n        if params['ipam']['network_ip'] != \"NA\":\n            if 'dhcp' in params['overlay_subnet']['ipam'] and params['overlay_subnet']['ipam']['dhcp'] != {}:\n                params['ipam']['dhcp_options'] = {}\n                params['ipam']['dhcp_options']['domain_name_server_list'] = params['overlay_subnet']['ipam']['dhcp'].get('dns_servers', 'NA')\n                params['ipam']['dhcp_options']['domain_search_list'] = params['overlay_subnet']['ipam']['dhcp'].get('domain_search', ['NA'])\n                params['ipam']['dhcp_options']['domain_name'] = params['overlay_subnet']['ipam']['dhcp'].get('domain_name', 'NA')\n                params['ipam']['dhcp_options']['boot_file_name'] = params['overlay_subnet']['ipam']['dhcp'].get('boot_file_name', \"NA\")\n                params['ipam']['dhcp_options']['tftp_server_name'] = params['overlay_subnet']['ipam']['dhcp'].get('tftp_server', \"NA\")      \n        if operation == \"update\":\n            update_subnet(**params)\n        else:\n            overlay_subnet(**params)                                                      \n\nset_params()","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"dc151af2_runbook","main_task_local_reference":{"kind":"app_task","name":"e45355be_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"management_pc_username","value":"YjBne7yyqn14cA1HmSmyo+foFKjlE7JOoHJGVArpjV6p6SbuhQ==:utf-8","label":"Management PC Username","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"management_pc_password","value":"\/Y5pqx735FGDGi2NLYqqZ\/6OQNWdoURLqX40hdSGC0Lx09QfhgrKL4Xfkg==:utf-8","label":"Management PC Password","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"vlan_name","value":"Test_overlay_subnet","label":"Subnet Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"operation","value":"create","label":"Operation","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["create","update","delete"]}},{"val_type":"STRING","is_mandatory":true,"description":"\n","data_type":"BASE","type":"LOCAL","name":"vpc_name","value":"Green_VPC","label":"VPC Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for delete operation","data_type":"BASE","type":"LOCAL","name":"network_ip","value":"3.3.3.0\/24","label":"Network IP with Prefix","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for delete operation","data_type":"BASE","type":"LOCAL","name":"gateway_ip","value":"3.3.3.1","label":"Gateway IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for delete operation","data_type":"BASE","type":"LOCAL","name":"ip_pool","value":"3.3.3.2- 3.3.3.10","label":"IP Pools","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for delete operation","data_type":"BASE","type":"LOCAL","name":"dns_servers","value":"NA","label":"DNS Servers List","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for delete operation","data_type":"BASE","type":"LOCAL","name":"domain_name","value":"NA","label":"Domain Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for delete operation","data_type":"BASE","type":"LOCAL","name":"domain_search","value":"NA","label":"Domain Search List","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for delete operation","data_type":"BASE","type":"LOCAL","name":"boot_file_name","value":"NA","label":"Boot File Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"# Optional : Not required for delete operation","data_type":"BASE","type":"LOCAL","name":"tftp_server","value":"NA","label":"TFTP Server","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"add_subnet_to_project","value":"No","label":"Add Subnet to Project","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["Yes","No"]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"project_name","value":"","label":"Project Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Prism Central IP","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"10.42.92.21","label":"Workload PC IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_username","value":"jG\/A1NIDvSw6qCV2vzumLmdgUCDr6355d7zZpRYUpxBKXm5zog==:utf-8","label":"Workload PC Username","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_passwd","value":"JcFG1wC8sLwEucyXuukMfLdCyaRViu4sglXWiy5o+J78PQQS5IA8HiDjtw==:utf-8","label":"Workload PC Password","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"Manage_Overlay_Subnet"},"api_version":"3.0","metadata":{"last_update_time":"1663058847738376","kind":"runbook","spec_version":28,"creation_time":"1659579881581195","name":"Manage_Overlay_Subnet"}}