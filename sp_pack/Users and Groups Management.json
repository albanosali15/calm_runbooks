{"status":{},"contains_secrets":true,"product_version":"3.6.0","spec":{"description":"","resources":{"endpoints_information":[],"endpoint_definition_list":[],"client_attrs":{},"credential_definition_list":[],"runbook":{"task_definition_list":[{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[{"kind":"app_task","name":"Parameter Validation"},{"kind":"app_task","name":"Update Project with IDP"},{"kind":"app_task","name":"Update project with AD"}],"name":"82a50272_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"Parameter Validation"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Update project with AD"}},{"from_task_reference":{"kind":"app_task","name":"Parameter Validation"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Update Project with IDP"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Parameter Validation","attrs":{"exit_status":[],"script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\n#user_items = @@{user_items}@@\nPC_IP = \"@@{PC_IP}@@\"\npc_user = \"@@{prism_central_username}@@\"\npc_password = \"@@{prism_central_passwd}@@\"\n\ndef get_directory_uuid(domain_name):\n    url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/directory_services\/list\".format(PC_IP)\n    data = requests.post(url, json={\"kind\":\"directory_service\"},\n                        auth=HTTPBasicAuth(pc_user,pc_password),\n                        timeout=None, verify=False)\n    if not data.ok:\n        print(\"Error while fetching active directory details.\", data.json().get(\"message_list\", \n                                                                data.json().get(\"error_details\", \n                                                                data.json())))\n        exit(1)\n    else:\n        if data.json()['metadata']['total_matches'] == 0:\n            print(\"No active directories present on host - %s\"%PC_IP)\n            exit(1)\n        else:\n            for _directory in data.json()['entities']:\n                if _directory['status']['resources']['domain_name'] == domain_name:\n                    return _directory['metadata']['uuid']\n            print(\"Directory with %s domain name not present on %s\"%(domain_name,PC_IP))\n          \ndef get_project_uuid(name):\n    url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/projects\/list\".format(PC_IP)\n    data = requests.post(url,json={\"kind\":\"project\", \"filter\":\"name==%s\"%name},\n                        auth=HTTPBasicAuth(pc_user,pc_password),\n                        timeout=None, verify=False)\n    if not data.ok:\n        print(\"Error while fetching Project details.\", data.json().get(\"message_list\", \n                                                       data.json().get(\"error_details\", \n                                                       data.json())))\n        exit(1)\n    else:\n        if data.json()['metadata']['total_matches'] == 0:\n            print(\"%s Project not present on %s\"%(name, PC_IP))\n            exit(1)\n        else:\n            print(\"project_uuid=%s\"%data.json()['entities'][0]['metadata']['uuid'])\n            return data.json()['entities'][0]['metadata']['uuid']\n            \ndef get_idp_uuid():\n    url = \"https:\/\/{}:9440\/api\/nutanix\/v3\/identity_providers\/list\".format(PC_IP)\n    data = requests.post(url,json={\"kind\":\"identity_provider\"},\n                        auth=HTTPBasicAuth(pc_user,pc_password),\n                        timeout=None, verify=False)\n    if not data.ok:\n        print(\"Error while fetching IDP details.\", data.json().get(\"message_list\", \n                                                       data.json().get(\"error_details\", \n                                                       data.json())))\n        exit(1)\n    else:\n        if data.json()[\"entities\"][0][\"spec\"][\"name\"] == \"@@{idp_name}@@\".strip():\n        \treturn data.json()[\"entities\"][0][\"metadata\"][\"uuid\"]\n        else:\n            print(\"Please Provide valide IDP name. %s IDP Does not exist on %s\"%(\"@@{idp_name}@@\", PC_IP))\n            exit(1)\n        \nadmin_users = \"@@{admin_users}@@\"\nadmin_groups = \"@@{admin_groups}@@\"\ndev_users = \"@@{developer_users}@@\"\ndev_groups = \"@@{developer_groups}@@\"\nconsumer_users = \"@@{consumer_users}@@\"\nconsumer_groups = \"@@{consumer_groups}@@\"\noperator_users = \"@@{operator_users}@@\"\noperator_groups = \"@@{operator_groups}@@\"\noperation = \"@@{operation}@@\"\nauth_type = \"@@{authentication_type}@@\"\n\nusers_list = [admin_users, dev_users, consumer_users, operator_users]\ngroups_list = [admin_groups, dev_groups, consumer_groups, operator_groups]\nparams = {}\nparams[\"tenant_users\"] = []\nparams[\"tenant_group\"] = []\nfor _index,value in enumerate(users_list):\n    search = admin_users\n    _user_type = \"admin\"\n    if _index == 1:\n        search = dev_users\n        _user_type = \"developer\"\n    elif _index == 2:\n        search = consumer_users\n        _user_type = \"consumer\"\n    elif _index == 3:\n        search = operator_users\n        _user_type = \"operator\"\n    if search != \"NA\":\n        _user_list = []\n        for _user in value.split(\",\"):\n            _user_list.append(_user.strip())\n        params[\"tenant_users\"].append({_user_type:_user_list})\n        \nfor _index,value in enumerate(groups_list):\n    search = admin_groups\n    _user_type = \"admin\"\n    if _index == 1:\n        search = dev_groups\n        _user_type = \"developer\"\n    elif _index == 2:\n        search = consumer_groups\n        _user_type = \"consumer\"\n    elif _index == 3:\n        search = operator_groups\n        _user_type = \"operator\"\n    if search != \"NA\":\n        _user_list = []\n        for _user in value.split(\",\"):\n            _user_list.append(_user.strip())\n        params[\"tenant_group\"].append({_user_type:_user_list})\n\nif auth_type == \"AD\":\n    params[\"directory_uuid\"] = get_directory_uuid(\"@@{active_directory_domain}@@\")\nelse:\n    params[\"directory_uuid\"] = get_idp_uuid()\n    \nparams[\"project_details\"] = {\"name\":\"@@{project_name}@@\", \n                             \"uuid\":get_project_uuid(\"@@{project_name}@@\")}\nprint(\"user_items={}\".format(params))\n","eval_variables":["user_items"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Update Project with IDP","attrs":{"script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\npc_username = \"@@{prism_central_username}@@\"\npc_password = \"@@{prism_central_passwd}@@\"\n\ndef _build_url(scheme, resource_type, host=\"@@{PC_IP}@@\", **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n    \ndef get_role_uuid(role_name):\n    api_url = 'https:\/\/{}:9440\/api\/nutanix\/v3\/roles\/list'.format(\"@@{PC_IP}@@\")\n    payload = {\n      'filter': 'name=={}'.format(role_name),\n      'kind': 'role',\n      'offset': 0\n    }\n    r = requests.post(api_url, json=payload, \n                    auth=HTTPBasicAuth(pc_username, \n                                       pc_password), \n                    timeout=None, verify=False)\n    if r.json().get('entities', 'None') != 'None':\n        return r.json()['entities'][0]['metadata']['uuid']\n    else:\n        print(\"Error :- {}\".format(r.content))\n        exit(1)\n        \ndef _get_spec(name=None, uuid=None):\n    if uuid != \"None\":\n        url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects_internal\/{}\".format(uuid))\n        data = requests.get(url,\n                        auth=HTTPBasicAuth(pc_username, \n                                           pc_password),\n                        timeout=None, verify=False)\n        if data.ok:\n            return data.json()\n        else:\n            print(data.json())\n            exit(1)\n    else:\n        url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects\/{}\".format(name))\n        data = requests.post(url, json={\"kind\": \"project\", \"filter\":\"name==%s\"%name},\n                        auth=HTTPBasicAuth(pc_username, \n                                           pc_password),\n                        timeout=None, verify=False)\n        return data.json()\n\ndef get_user_list(user_name, user_uuid, idp_uuid):\n    return({\n                \"metadata\": {\n                  \"kind\": \"user\",\n                  \"uuid\": user_uuid\n                },\n                \"user\": {\n                  \"resources\": {\n                    \"identity_provider_user\": {\n                      \"username\": user_name,\n                      \"identity_provider_reference\": {\n                        \"uuid\": idp_uuid,\n                        \"kind\": \"identity_provider\"\n                      }\n                    }\n                  }\n                },\n                \"operation\": \"ADD\"\n              })\n  \ndef update_project(**params):\n    project = params['project_details']\n    if project.get('uuid', 'None') == 'None' and project.get('name', 'None') == 'None':\n        print(\"Input Error ----> Please provide project name or project uuid.\")\n        exit(1)\n\n    payload = _get_spec(uuid=project[\"uuid\"])\n    del payload[\"status\"]\n    for x in [\"categories\",\"owner_reference\",\"categories_mapping\",\"spec_hash\",\"creation_time\",\"last_update_time\"]:\n        del payload[\"metadata\"][x]\n        \n    user_list = []\n    if params.get(\"tenant_users\", []) != []:\n        users = []\n        for x in range(len(params['tenant_users'])):\n            users.append(params['tenant_users'][x].get(\"admin\",\\\n                      params['tenant_users'][x].get('operator',\\\n                      params['tenant_users'][x].get('developer',\\\n                      params['tenant_users'][x].get('consumer')))))\n        for user in users:\n            for _user in user:\n                user_list.append(create_user(_user, **params))\n    for _user in user_list:\n        payload[\"spec\"][\"project_detail\"][\"resources\"]\\\n            [\"user_reference_list\"].append({\"kind\":\"user\", \"uuid\": _user['uuid']})\n        payload[\"spec\"][\"user_list\"].append(get_user_list(user_name=_user[\"name\"], \n                                                          user_uuid=_user[\"uuid\"], \n                                                          idp_uuid=params[\"directory_uuid\"]))                                               \n    group_list = []\n    if params.get(\"tenant_group\", []) != []:\n        group = []\n        for x in range(len(params['tenant_group'])):\n            group.append(params['tenant_group'][x].get(\"admin\",\\\n                      params['tenant_group'][x].get('operator',\\\n                      params['tenant_group'][x].get('developer',\\\n                      params['tenant_group'][x].get('consumer')))))\n        for group in group:\n            for _group in group:\n                group_list.append(create_group(_group, **params))\n    for _group in group_list:\n        payload[\"spec\"][\"project_detail\"][\"resources\"]\\\n            [\"external_user_group_reference_list\"].append({\"kind\":\"usergroup\", \"uuid\": _group['uuid']})\n      \n    _colaboration = \"SELF_OWNED\"\n    if payload['spec']['access_control_policy_list'][0]['acp']['resources']\\\n        ['filter_list']['context_list'][0]['entity_filter_expression_list']\\\n        [0]['right_hand_side']['collection'] == \"ALL\":\n        _colaboration = \"ALL\"\n        \n    for x in range(len(payload['spec']['access_control_policy_list'])):\n        payload['spec']['access_control_policy_list'][x]['operation'] = \"UPDATE\"\n        \n    if params.get('tenant_users', 'None') != 'None':\n        for role in params['tenant_users']:\n            for x in range(len(payload['spec']['access_control_policy_list'])):\n                append = True\n                acp = {}\n                if (\"admin\" in role.keys()) and (\"ADMIN\" in payload['spec']['access_control_policy_list'][x]['acp']['name']):\n                    append = False\n                    for _user in user_list:\n                        if _user['name'] in role[\"admin\"]:\n                            payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_reference_list'].append(\\\n                                            {\"kind\":\"user\", \"uuid\": _user['uuid']})      \n                elif 'developer' in role.keys():\n                    if 'developer' in payload['spec']['access_control_policy_list'][x]['acp']['name']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['developer']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_reference_list'].append(\\\n                                            {\"kind\":\"user\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"developer\", users=role['developer'],\n                                           user_list=user_list, allow_colaboration=_colaboration)\n                                \n                elif 'operator' in role.keys():\n                    if 'operator' in payload['spec']['access_control_policy_list'][x]['acp']['name']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['operator']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_reference_list'].append(\\\n                                            {\"kind\":\"user\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"operator\", users=role['operator'],\n                                           user_list=user_list, allow_colaboration=_colaboration)\n                                \n                elif 'consumer' in role.keys():\n                    if 'consumer' in payload['spec']['access_control_policy_list'][x]['acp']['name']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['consumer']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_reference_list'].append(\\\n                                            {\"kind\":\"user\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"consumer\", users=role['consumer'],\n                                           user_list=user_list, allow_colaboration=_colaboration)\n                if append:\n                    payload['spec']['access_control_policy_list'].append(acp)\n                break\n\n    if params.get('tenant_group', 'None') != 'None':\n        for role in params['tenant_group']:\n            for x in range(len(payload['spec']['access_control_policy_list'])):\n                append = True\n                acp = {}\n                if (\"admin\" in role.keys()) and (\"ADMIN\" in payload['spec']['access_control_policy_list'][x]['acp']['name']):\n                    append = False\n                    for _user in user_list:\n                        if _user['name'] in role[\"admin\"]:\n                            payload['spec']['access_control_policy_list'][x]['acp']\\\n                                   ['resources']['user_group_reference_list'].append(\\\n                                            {\"kind\":\"user_group\", \"uuid\": _user['uuid']})\n                elif 'developer' in role.keys():\n                    if 'developer' in payload['spec']['access_control_policy_list'][x]['acp']['name']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['developer']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_group_reference_list'].append(\\\n                                            {\"kind\":\"user_group\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"developer\", groups=role['developer'],\n                                           group_list=group_list, allow_colaboration=_colaboration)                       \n                                \n                elif 'operator' in role.keys():\n                    if 'operator' in payload['spec']['access_control_policy_list'][x]['acp']['name']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['operator']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_group_reference_list'].append(\\\n                                            {\"kind\":\"user_group\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"operator\", groups=role['operator'],\n                                           group_list=group_list, allow_colaboration=_colaboration)\n                                \n                elif 'consumer' in role.keys():\n                    if 'consumer' in payload['spec']['access_control_policy_list'][x]['acp']['name']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['consumer']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_group_reference_list'].append(\\\n                                            {\"kind\":\"user_group\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"consumer\", groups=role['consumer'],\n                                           group_list=group_list, allow_colaboration=_colaboration)\n                if append:\n                    payload['spec']['access_control_policy_list'].append(acp)\n                break\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects_internal\/{}\".format(project['uuid']))\n    data = requests.put(url, json=payload,\n                        auth=HTTPBasicAuth(pc_username, \n                                           pc_password),\n                        timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"Project updated successfully !!!\")\n    \ndef wait_for_completion(data):\n    if data.status_code in [200, 202]:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(\n                                    pc_username, \n                                    pc_password),\n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Got error ---> \",responce.json())\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"COMPLETE\"\n    else:\n        if \"DUPLICATE\" not in str(data.json()):\n            state = data.json().get('state')\n            print(\"Got %s ---> \"%state, data.json())\n            exit(1)       \n\ndef generate_filter_list_operator(project_uuid, collection):\n    acl = []\n    acl.append({\"entity_filter_expression_list\":[\n        {\n            \"operator\": \"IN\",\n            \"right_hand_side\": {\"collection\": \"ALL\"},\n            \"left_hand_side\": {\"entity_type\": \"app_icon\"},\n        },\n        {\n            \"operator\": \"IN\",\n            \"right_hand_side\": {\"collection\": \"ALL\"},\n            \"left_hand_side\": {\"entity_type\": \"category\"},\n        },\n    ]})\n\n    acl.append({\n        \"scope_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": \"PROJECT\",\n                \"right_hand_side\": {\"uuid_list\": [project_uuid]},\n            }\n        ],\n        \"entity_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"ALL\"},\n                \"right_hand_side\": {\"collection\": collection},\n            }\n        ],\n    })\n    return acl   \n\ndef generate_filter_list_developer(project_uuid, collection):\n    acl = []\n    acl.append({\"entity_filter_expression_list\":[\n        {\n            \"operator\": \"IN\",\n            \"left_hand_side\": {\"entity_type\": \"image\"},\n            \"right_hand_side\": {\"collection\": \"ALL\"},\n        },\n        {\n            \"operator\": \"IN\",\n            \"left_hand_side\": {\"entity_type\": \"marketplace_item\"},\n            \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n        },\n        {\n            \"operator\": \"IN\",\n            \"right_hand_side\": {\"collection\": \"ALL\"},\n            \"left_hand_side\": {\"entity_type\": \"app_icon\"},\n        },\n        {\n            \"operator\": \"IN\",\n            \"right_hand_side\": {\"collection\": \"ALL\"},\n            \"left_hand_side\": {\"entity_type\": \"category\"},\n        },\n        {\n            \"operator\": \"IN\",\n            \"left_hand_side\": {\"entity_type\": \"app_task\"},\n            \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n        },\n        {\n            \"operator\": \"IN\",\n            \"left_hand_side\": {\"entity_type\": \"app_variable\"},\n            \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n        },\n    ]})\n\n    acl.append({\n        \"scope_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": \"PROJECT\",\n                \"right_hand_side\": {\"uuid_list\": [project_uuid]},\n            }\n        ],\n        \"entity_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"ALL\"},\n                \"right_hand_side\": {\"collection\": collection},\n            }\n        ],\n    })\n    return acl\n\ndef generate_filter_list_consumer(project_uuid, collection):\n    acl = []\n    acl.append({\"entity_filter_expression_list\":[\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"image\"},\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"marketplace_item\"},\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"app_icon\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"category\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"app_task\"},\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"app_variable\"},\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n            },\n        ]})\n    acl.append({\n        \"scope_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": \"PROJECT\",\n                \"right_hand_side\": {\"uuid_list\": [project_uuid]},\n            }\n        ],\n        \"entity_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"ALL\"},\n                \"right_hand_side\": {\"collection\": collection},\n            }\n        ]})\n    return acl \n  \ndef generate_acp(role, allow_colaboration=\"ALL\", users=None, groups=None, group_list=None, user_list=None):\n    user_details = @@{user_items}@@\n    project = user_details['project_details']\n    projectUuid = project['uuid']\n    admin_role_uuid = get_role_uuid(\"Project Admin\")\n    operator_role_uuid = get_role_uuid(\"Operator\")\n    developer_role_uuid = get_role_uuid(\"Developer\")\n    consumer_role_uuid = get_role_uuid(\"Consumer\")\n    \n    collection = \"SELF_OWNED\"\n    if allow_colaboration == \"ALL\":\n        collection = \"ALL\"\n    role_uuid = operator_role_uuid\n    filter_list = generate_filter_list_operator(projectUuid, collection)\n    if role == \"admin\":\n        role_uuid = admin_role_uuid\n        filter_list = generate_filter_list_admin(projectUuid, collection)\n    elif role == \"developer\":\n        role_uuid = developer_role_uuid\n        filter_list = generate_filter_list_developer(projectUuid, collection)\n    elif role == \"consumer\":\n        role_uuid = consumer_role_uuid\n        filter_list = generate_filter_list_consumer(projectUuid, collection)\n        \n    acp = {}\n    if groups == None:\n        _type = 'users'\n        user_reference_list = []\n        for _user in users:\n            for us in user_list:\n                if _user in us['name']:\n                    user_reference_list.append(\\\n                        {\"kind\":\"user\", \"uuid\": us['uuid']})\n        acp_list = {\n            'acp': {\n                'name': '{}-ACP-{}'.format(role,_type),\n                'resources': {\n                    'role_reference': {\n                        'kind': 'role',\n                        'uuid': role_uuid\n                        },\n                         \"user_reference_list\": user_reference_list,\n                         \"filter_list\": {'context_list': filter_list}\n                    },\n                    'description': 'ACP for {}'.format(projectUuid)\n                },\n                'metadata': {\n                    'kind': 'access_control_policy'\n                },\n                'operation': 'ADD'\n            }\n        access_control_policy_list = acp_list\n    else:\n        _type = 'groups'\n        group_reference_list = []\n        for _user in groups:\n            for us in group_list:\n                if _user in us['name']:\n                    group_reference_list.append(\\\n                        {\"kind\":\"user_group\", \"uuid\": us['uuid']})\n        acp_list = {\n            'acp': {\n                'name': '{}-ACP-{}'.format(role, _type),\n                'resources': {\n                    'role_reference': {\n                        'kind': 'role',\n                        'uuid': role_uuid\n                        },\n                         \"user_group_reference_list\": group_reference_list,\n                         \"filter_list\": {'context_list': filter_list}\n                    },\n                    'description': 'ACP for {}'.format(projectUuid)\n                },\n                'metadata': {\n                    'kind': 'access_control_policy'\n                },\n                'operation': 'ADD'\n            }\n        access_control_policy_list = acp_list\n    return access_control_policy_list\n\ndef _get_group_spec():\n    return ({\n              \"api_version\": \"3.1.0\",\n              \"metadata\": {\n                \"kind\": \"user_group\"\n                  },\n             \"spec\": {\n                \"resources\": {\n                      \"directory_service_user_group\": {\n                        \"distinguished_name\": \"\"\n                          }\n                    }\n                  }\n            })\n            \ndef convert_domain_to_ad_path(group_name):\n    path = ''\n    g_name, domain = group_name.split(\"@\")\n    path = \"cn=%s,cn=users\"%g_name\n    for i in domain.split(\".\"):\n        path = path + ',DC={}'.format(i)\n    \n    return path\n    \ndef create_group(group, **params):\n    payload = _get_group_spec()\n    group_name = convert_domain_to_ad_path(group)\n    payload['spec']['resources']['directory_service_user_group']\\\n                    ['distinguished_name'] = group_name\n    url = _build_url(scheme=\"https\",resource_type=\"\/user_groups\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(pc_username, \n                                           pc_password),\n                        timeout=None, verify=False)    \n    wait_for_completion(data)\n    \n    if not data.ok:\n        if \"DUPLICATE\" in str(data.json()):\n            url = _build_url(scheme=\"https\",resource_type=\"\/user_groups\/list\")                        \n            data = requests.post(url, json={\"kind\":\"user_group\", \"length\":9999},\n                                 auth=HTTPBasicAuth(pc_username, \n                                                    pc_password),\n                                 timeout=None, verify=False)   \n            if group.split(\"@\")[0] in str(data.json()):\n                for new_data in data.json()['entities']:\n                    if new_data['status']['resources']['display_name'] == group.split(\"@\")[0]:\n                        return {'uuid':new_data['metadata']['uuid'], 'name':group}\n        else:\n            print(\"Error while creating user_group ----> \",data.json()['message_list'])\n            exit(1)\n    else:\n        return {'uuid':data.json()['metadata']['uuid'], 'name':group}    \n            \ndef create_user(user, **params):\n    _payload = {\"entity_type\": \"abac_user_capability\",\n                \"group_member_attributes\": [\n               {\n                   \"attribute\": \"display_name\"\n               },\n               {\n                   \"attribute\": \"user_uuid\"\n               },\n               {\n                   \"attribute\": \"username\"\n               }\n           ],\n           \"query_name\": \"prism:BaseGroupModel\"\n         }\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/groups\")\n    data = requests.post(url, json=_payload,\n                        auth=HTTPBasicAuth(pc_username, pc_password),\n                        timeout=None, verify=False)\n    if data.ok:\n        for user_data in data.json()[\"group_results\"][0][\"entity_results\"]:\n            if user_data[\"data\"][2][\"values\"][0][\"values\"][0] == user.strip():\n                return {\"uuid\":user_data[\"entity_id\"], \"name\":user.strip()}\n    else:\n        print(\"Error while fetching user details :- \",data.json())\n        exit(1)\n                \n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/idempotence_identifiers\/salted\")\n    payload = {\"name_list\":[user]}\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(pc_username, pc_password),\n                        timeout=None, verify=False)                   \n    if data.ok:\n        _uuid = data.json()[\"name_uuid_list\"][0][user]\n        return {\"uuid\":_uuid, \"name\":user.strip()}\n    else:\n        print(\"Error while fetching user details :- \",data.json())\n        exit(1)\n        \ndef delete_user(**params):\n    project = params['project_details']\n    if project.get('uuid', 'None') == 'None' and project.get('name', 'None') == 'None':\n        print(\"Input Error ----> Please provide project name or project uuid.\")\n    payload = _get_spec(uuid=project['uuid'])\n    for x in ['categories', 'categories_mapping', 'creation_time', 'last_update_time', 'owner_reference']:\n        del payload['metadata'][x]\n    del payload['status']\n    \n    user_list = []\n    all_users = []\n    if params.get(\"tenant_users\", \"None\") != \"None\":\n        for x in range(len(params['tenant_users'])):\n            all_users.append(params['tenant_users'][x].get(\"admin\",\\\n                      params['tenant_users'][x].get('operator',\\\n                      params['tenant_users'][x].get('developer',\\\n                      params['tenant_users'][x].get('consumer')))))\n        for user in all_users:\n            for _user in user:\n                user_list.append(create_user(_user, **params))\n\n    group_list = []\n    all_groups = []\n    if params.get(\"tenant_group\", \"None\") != \"None\":\n        for x in range(len(params['tenant_group'])):\n            all_groups.append(params['tenant_group'][x].get(\"admin\",\\\n                      params['tenant_group'][x].get('operator',\\\n                      params['tenant_group'][x].get('developer',\\\n                      params['tenant_group'][x].get('consumer')))))\n        for group in all_groups:\n            for _group in group:\n                group_list.append(create_group(_group, **params))\n    \n    if params.get('tenant_users', 'None') != 'None':\n        for _user in all_users:\n            for user in _user:\n                for _index, _policy in enumerate(payload['spec']['access_control_policy_list']):\n                    _policy['operation'] = \"UPDATE\"\n                    for users_list in _policy['acp']['resources']['user_reference_list']:\n                        if user in users_list['name']:\n                            payload['spec']['access_control_policy_list'][_index]\\\n                                ['acp']['resources']['user_reference_list'].remove(users_list)\n                            \n    if params.get('tenant_group', 'None') != 'None':\n        for _user in all_groups:\n            for user in _user:\n                for _index,_policy in enumerate(payload['spec']['access_control_policy_list']):\n                    _policy['operation'] = \"UPDATE\"\n                    for users_list in _policy['acp']['resources']['user_group_reference_list']:\n                        if user.split('@')[0] in users_list['name']:\n                            payload['spec']['access_control_policy_list'][_index]\\\n                                ['acp']['resources']['user_group_reference_list'].remove(users_list)\n                            \n    if params.get('tenant_users', 'None') != 'None':\n        _list = payload[\"spec\"][\"project_detail\"][\"resources\"][\"user_reference_list\"]\n        for tenant_users in user_list:\n            for _index, _user in enumerate(_list):\n                if tenant_users['uuid'] == _user['uuid']:\n                    del payload[\"spec\"][\"project_detail\"][\"resources\"]\\\n                        [\"user_reference_list\"][_index]\n\n    if params.get('tenant_group', 'None') != 'None':\n        _list = payload[\"spec\"][\"project_detail\"][\"resources\"][\"external_user_group_reference_list\"]\n        for tenant_groups in group_list:\n            for _index, _group in enumerate(_list):\n                if tenant_groups['uuid'] == _group['uuid']:\n                    del payload[\"spec\"][\"project_detail\"][\"resources\"]\\\n                        [\"external_user_group_reference_list\"][_index]                            \n                                \n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects_internal\/{}\".format(project['uuid']))\n    data = requests.put(url, json=payload,\n                        auth=HTTPBasicAuth(pc_username, \n                                           pc_password),\n                        timeout=None, verify=False)\n    wait_for_completion(data)\n\n    if \"@@{operation}@@\" == \"delete_user\":\n        print(\"%s, %s user deleted successfully.\"%(params.get('tenant_group'),\n                                                  params.get('tenant_users')))                                       \n      \nif \"@@{authentication_type}@@\" == \"IDP\":\n    params = @@{user_items}@@\n    operation = \"@@{operation}@@\"\n    if operation == \"add_user\":\n        update_project(**params)\n    elif operation == \"delete_user\":\n        delete_user(**params)\n    elif operation == \"update\":\n        delete_user(**params)\n        update_project(**params)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"retries":"0","description":"","inherit_target":false,"child_tasks_local_reference_list":[],"name":"Update project with AD","attrs":{"script":"# script\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\n\ndef _build_url(scheme, resource_type, host=\"@@{PC_IP}@@\", **params):\n    _base_url = \"\/api\/nutanix\/v3\"\n    url = \"{proto}:\/\/{host}\".format(proto=scheme, host=host)\n    port = params.get('nutanix_port', '9440')\n    if port:\n        url = url + \":{0}\".format(port) + _base_url\n    if resource_type.startswith(\"\/\"):\n        url += resource_type\n    else:\n        url += \"\/{0}\".format(resource_type)\n    return url\n    \ndef get_role_uuid(role_name):\n    api_url = 'https:\/\/{}:9440\/api\/nutanix\/v3\/roles\/list'.format(\"@@{PC_IP}@@\")\n    payload = {\n      'filter': 'name=={}'.format(role_name),\n      'kind': 'role',\n      'offset': 0\n    }\n    r = requests.post(api_url, json=payload, \n                    auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                       \"@@{prism_central_passwd}@@\"), \n                    timeout=None, verify=False)\n    if r.json().get('entities', 'None') != 'None':\n        return r.json()['entities'][0]['metadata']['uuid']\n    else:\n        print(\"Error :- {}\".format(r.content))\n        exit(1)\n\ndef get_user_list(user_name, user_uuid, ad_uuid):\n    return({\n                \"metadata\": {\n                  \"kind\": \"user\",\n                  \"uuid\": user_uuid\n                },\n                \"user\": {\n                  \"resources\": {\n                    \"directory_service_user\": {\n                      \"user_principal_name\": user_name,\n                      \"directory_service_reference\": {\n                        \"uuid\": ad_uuid,\n                        \"kind\": \"directory_service\"\n                      }\n                    }\n                  }\n                },\n                \"operation\": \"ADD\"\n              })\n  \ndef _get_spec(name=None, uuid=None):\n    if uuid != \"None\":\n        url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects_internal\/{}\".format(uuid))\n        data = requests.get(url,\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)\n        return data.json()\n    else:\n        url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects\/{}\".format(name))\n        data = requests.post(url, json={\"kind\": \"project\", \"filter\":\"name==%s\"%name},\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)\n        return data.json()\n  \ndef update_project(**params):\n    global cluster_uuid\n    project = params['project_details']\n    if project.get('uuid', 'None') == 'None' and project.get('name', 'None') == 'None':\n        print(\"Input Error ----> Please provide project name or project uuid.\")\n        \n    payload = None\n    user_list = []\n    if params.get(\"tenant_users\", []) != []:\n        users = []\n        for x in range(len(params['tenant_users'])):\n            users.append(params['tenant_users'][x].get(\"admin\",\\\n                      params['tenant_users'][x].get('operator',\\\n                      params['tenant_users'][x].get('developer',\\\n                      params['tenant_users'][x].get('consumer')))))\n        for user in users:\n            for _user in user:\n                user_list.append(create_user(_user, **params))\n                \n        if \"@@{operation}@@\" in [\"add_user\",\"update\"]:\n            payload = _get_spec(uuid=project.get('uuid', 'None'))\n            del payload[\"status\"]\n            #for x in [\"categories\",\"owner_reference\",\"categories_mapping\",\"spec_hash\",\"creation_time\",\"last_update_time\"]:\n            #    if x in payload[\"metadata\"].keys():\n            #        del payload[\"metadata\"][x]\n             \n            cluster_uuid = payload[\"spec\"][\"project_detail\"][\"resources\"][\"cluster_reference_list\"][0][\"uuid\"]\n            for user in user_list:\n                payload[\"spec\"][\"project_detail\"][\"resources\"]\\\n                    [\"user_reference_list\"].append({\"kind\":\"user\", \"uuid\": user['uuid']})\n                #payload[\"spec\"][\"user_list\"].append(get_user_list(user_name=user['name'],\n                #                                                  user_uuid=user[\"uuid\"],\n                #                                                  ad_uuid=params[\"directory_uuid\"]))\n\n    group_list = []\n    if params.get(\"tenant_group\", []) != []:\n        group = []\n        for x in range(len(params['tenant_group'])):\n            group.append(params['tenant_group'][x].get(\"admin\",\\\n                      params['tenant_group'][x].get('operator',\\\n                      params['tenant_group'][x].get('developer',\\\n                      params['tenant_group'][x].get('consumer')))))\n        for group in group:\n            for _group in group:\n                group_list.append(create_group(_group, **params))\n        if \"@@{operation}@@\" in [\"add_user\",\"update\"]:\n            payload = _get_spec(uuid=project.get('uuid', 'None'))\n            del payload[\"status\"]\n            for x in [\"categories\",\"owner_reference\",\"categories_mapping\",\"spec_hash\",\"creation_time\",\"last_update_time\"]:\n                if x in payload[\"metadata\"].keys():\n                    del payload[\"metadata\"][x]\n                    \n            for add_user in group_list:\n                payload[\"spec\"][\"project_detail\"][\"resources\"]\\\n                    ['external_user_group_reference_list'].append(\\\n                                        {\"kind\": \"user_group\",'uuid': add_user['uuid']})\n    \n    if payload == None:\n        payload = _get_spec(name=project.get('name', None),uuid=project.get('uuid', 'None'))\n        for x in ['categories', 'categories_mapping', 'creation_time', 'last_update_time', 'owner_reference']:\n            del payload['metadata'][x]\n        del payload['status']\n    \n    _colaboration = \"SELF_OWNED\"\n    if payload['spec']['access_control_policy_list'][0]['acp']['resources']\\\n        ['filter_list']['context_list'][0]['entity_filter_expression_list']\\\n        [0]['right_hand_side']['collection'] == \"ALL\":\n        _colaboration = \"ALL\"\n        \n    for x in range(len(payload['spec']['access_control_policy_list'])):\n        payload['spec']['access_control_policy_list'][x]['operation'] = \"UPDATE\"\n        \n    if params.get('tenant_users', 'None') != 'None':\n        for role in params['tenant_users']:\n            for x in range(len(payload['spec']['access_control_policy_list'])):\n                append = True\n                acp = {}\n                if \"admin\" in role.keys():\n                    if \"admin\" in payload['spec']['access_control_policy_list'][x]['acp']['description'].lower():\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role[\"admin\"]:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_reference_list'].append(\\\n                                            {\"kind\":\"user\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"admin\", users=role[\"admin\"], \n                                           user_list=user_list, allow_colaboration=_colaboration)            \n                elif 'developer' in role.keys():\n                    if 'developer' in payload['spec']['access_control_policy_list'][x]['acp']['description'].lower():\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['developer']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_reference_list'].append(\\\n                                            {\"kind\":\"user\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"developer\", users=role['developer'],\n                                           user_list=user_list, allow_colaboration=_colaboration)\n                                \n                elif 'operator' in role.keys():\n                    if 'operator' in payload['spec']['access_control_policy_list'][x]['acp']['description'].lower():\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['operator']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_reference_list'].append(\\\n                                            {\"kind\":\"user\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"operator\", users=role['operator'],\n                                           user_list=user_list, allow_colaboration=_colaboration)\n                                \n                elif 'consumer' in role.keys():\n                    if 'consumer' in payload['spec']['access_control_policy_list'][x]['acp']['description'].lower():\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['consumer']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_reference_list'].append(\\\n                                            {\"kind\":\"user\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"consumer\", users=role['consumer'],\n                                           user_list=user_list, allow_colaboration=_colaboration)\n                if append:\n                    payload['spec']['access_control_policy_list'].append(acp)\n                break\n\n    if params.get('tenant_group', 'None') != 'None':\n        for role in params['tenant_group']:\n            for x in range(len(payload['spec']['access_control_policy_list'])):\n                append = True\n                acp = {}\n                if \"admin\" in role.keys():\n                    if \"admin\" in payload['spec']['access_control_policy_list'][x]['acp']['description']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role[\"admin\"]:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_group_reference_list'].append(\\\n                                            {\"kind\":\"user_group\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"admin\", groups=role[\"admin\"],\n                                           group_list=group_list, allow_colaboration=_colaboration)\n                        \n                elif 'developer' in role.keys():\n                    if 'developer' in payload['spec']['access_control_policy_list'][x]['acp']['description']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['developer']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_group_reference_list'].append(\\\n                                            {\"kind\":\"user_group\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"developer\", groups=role['developer'],\n                                           group_list=group_list, allow_colaboration=_colaboration)                       \n                                \n                elif 'operator' in role.keys():\n                    if 'operator' in payload['spec']['access_control_policy_list'][x]['acp']['description']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['operator']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_group_reference_list'].append(\\\n                                            {\"kind\":\"user_group\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"operator\", groups=role['operator'],\n                                           group_list=group_list, allow_colaboration=_colaboration)\n                                \n                elif 'consumer' in role.keys():\n                    if 'consumer' in payload['spec']['access_control_policy_list'][x]['acp']['description']:\n                        append = False\n                        for _user in user_list:\n                            if _user['name'] in role['consumer']:\n                                payload['spec']['access_control_policy_list'][x]['acp']\\\n                                       ['resources']['user_group_reference_list'].append(\\\n                                            {\"kind\":\"user_group\", \"uuid\": _user['uuid']})\n                    else:\n                        acp = generate_acp(role=\"consumer\", groups=role['consumer'],\n                                           group_list=group_list, allow_colaboration=_colaboration)\n                if append:\n                    payload['spec']['access_control_policy_list'].append(acp)\n                break\n\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects_internal\/{}\".format(project['uuid']))\n\n    data = requests.put(url, json=payload,\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)\n    wait_for_completion(data)\n    print(\"Project updated successfully\")\n    \ndef wait_for_completion(data):\n    if data.status_code in [200, 202]:\n        state = data.json()['status'].get('state')\n        while state == \"PENDING\":\n            _uuid = data.json()['status']['execution_context']['task_uuid']\n            url = _build_url(scheme=\"https\",\n                             resource_type=\"\/tasks\/%s\"%_uuid)\n            responce = requests.get(url, auth=HTTPBasicAuth(\n                                    \"@@{prism_central_username}@@\", \n                                    \"@@{prism_central_passwd}@@\"),\n                                    verify=False)\n            if responce.json()['status'] in ['PENDING', 'RUNNING', 'QUEUED']:\n                state = 'PENDING'\n                sleep(5)                \n            elif responce.json()['status'] == 'FAILED':\n                print(\"Got error ---> \",responce.json())\n                state = 'FAILED'\n                exit(1)\n            else:\n                state = \"COMPLETE\"\n    else:\n        if \"DUPLICATE\" not in str(data.json()):\n            state = data.json().get('state')\n            print(\"Got %s ---> \"%state, data.json())\n            exit(1)\n\ndef generate_filter_list_admin(project_uuid, collection):\n    acl = []\n    acl.append({\"entity_filter_expression_list\":[\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"image\"},\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"marketplace_item\"},\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"directory_service\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"role\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"uuid_list\": [project_uuid]},\n                \"left_hand_side\": {\"entity_type\": \"project\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"user\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"user_group\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n                \"left_hand_side\": {\"entity_type\": \"environment\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"app_icon\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"right_hand_side\": {\"collection\": \"ALL\"},\n                \"left_hand_side\": {\"entity_type\": \"category\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"app_task\"},\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n            },\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"app_variable\"},\n                \"right_hand_side\": {\"collection\": \"SELF_OWNED\"},\n            },\n        ]})\n\n    acl.append({\n        \"scope_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": \"PROJECT\",\n                \"right_hand_side\": {\"uuid_list\": []},\n            }\n        ],\n        \"entity_filter_expression_list\": [\n            {\n                \"operator\": \"IN\",\n                \"left_hand_side\": {\"entity_type\": \"ALL\"},\n                \"right_hand_side\": {\"collection\": collection},\n            }\n        ],\n    })\n    return acl\n\ndef generate_filter_list_operator(project_uuid, collection):\n    global cluster_uuid\n    return {\"context_list\": [\n                                {\n                                    \"scope_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": \"PROJECT\",\n                                            \"right_hand_side\": {\n                                                \"uuid_list\": [\n                                                    project_uuid\n                                                ]\n                                            }\n                                        }\n                                    ],\n                                    \"entity_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"ALL\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"SELF_OWNED\"\n                                            }\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"entity_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            },\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"app_icon\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            },\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"category\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"vm_recovery_point\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"cluster\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"uuid_list\": [\n                                                    cluster_uuid\n                                                ]\n                                            }\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"scope_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": \"PROJECT\",\n                                            \"right_hand_side\": {\n                                                \"uuid_list\": [\n                                                    project_uuid\n                                                ]\n                                            }\n                                        }\n                                    ],\n                                    \"entity_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"blueprint\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"environment\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"marketplace_item\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            }\n                                        }\n                                    ]\n                                }\n                            ]\n                        }  \n\ndef generate_filter_list_developer(project_uuid, collection):\n    global cluster_uuid\n    return   {\n              \"context_list\": [\n                                {\n                                    \"entity_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"collection\": \"SELF_OWNED\"\n                                            },\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"ALL\"\n                                            }\n                                        }\n                                    ],\n                                    \"scope_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"uuid_list\": [\n                                                    project_uuid\n                                                ]\n                                            },\n                                            \"left_hand_side\": \"PROJECT\"\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"entity_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            },\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"app_icon\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"collection\": \"SELF_OWNED\"\n                                            },\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"app_task\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"collection\": \"SELF_OWNED\"\n                                            },\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"app_variable\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            },\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"category\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"uuid_list\": [\n                                                    cluster_uuid\n                                                ]\n                                            },\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"cluster\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            },\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"image\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"collection\": \"SELF_OWNED\"\n                                            },\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"marketplace_item\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            },\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"vm_recovery_point\"\n                                            }\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"entity_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            },\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"blueprint\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            },\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"environment\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            },\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"marketplace_item\"\n                                            }\n                                        }\n                                    ],\n                                    \"scope_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"uuid_list\": [\n                                                    project_uuid\n                                                ]\n                                            },\n                                            \"left_hand_side\": \"PROJECT\"\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n  \ndef generate_filter_list_consumer(project_uuid, collection):\n    global cluster_uuid\n    return {\"context_list\": [\n                                {\n                                    \"scope_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": \"PROJECT\",\n                                            \"right_hand_side\": {\n                                                \"uuid_list\": [\n                                                    project_uuid\n                                                ]\n                                            }\n                                        }\n                                    ],\n                                    \"entity_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"ALL\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"SELF_OWNED\"\n                                            }\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"entity_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"image\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"marketplace_item\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"SELF_OWNED\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            },\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"app_icon\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            },\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"category\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"app_task\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"SELF_OWNED\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"app_variable\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"SELF_OWNED\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"vm_recovery_point\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"cluster\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"uuid_list\": [\n                                                    cluster_uuid\n                                                ]\n                                            }\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"scope_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": \"PROJECT\",\n                                            \"right_hand_side\": {\n                                                \"uuid_list\": [\n                                                    project_uuid\n                                                ]\n                                            }\n                                        }\n                                    ],\n                                    \"entity_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"blueprint\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"environment\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"marketplace_item\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            }\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n  \ndef generate_acp(role, allow_colaboration=\"ALL\", users=None, groups=None, group_list=None, user_list=None):\n    user_details = @@{user_items}@@\n    project = user_details['project_details']\n    projectUuid = project['uuid']\n    admin_role_uuid = get_role_uuid(\"Project Admin\")\n    operator_role_uuid = get_role_uuid(\"Operator\")\n    developer_role_uuid = get_role_uuid(\"Developer\")\n    consumer_role_uuid = get_role_uuid(\"Consumer\")\n    \n    collection = \"SELF_OWNED\"\n    if allow_colaboration == \"ALL\":\n        collection = \"ALL\"\n    role_uuid = operator_role_uuid\n    filter_list = generate_filter_list_operator(projectUuid, collection)\n    if role == \"admin\":\n        role_uuid = admin_role_uuid\n        filter_list = generate_filter_list_admin(projectUuid, collection)\n    elif role == \"developer\":\n        role_uuid = developer_role_uuid\n        filter_list = generate_filter_list_developer(projectUuid, collection)\n    elif role == \"consumer\":\n        role_uuid = consumer_role_uuid\n        filter_list = generate_filter_list_consumer(projectUuid, collection)\n        \n    acp = {}\n    if groups == None:\n        _type = 'users'\n        user_reference_list = []\n        for _user in users:\n            for us in user_list:\n                if _user in us['name']:\n                    user_reference_list.append(\\\n                        {\"kind\":\"user\", \"uuid\": us['uuid']})\n        acp_list = {\n            'acp': {\n                'name': 'ACP-TENANT-{}-{}-@@{calm_now}@@'.format(role,_type),\n                'resources': {\n                    'role_reference': {\n                        'kind': 'role',\n                        'uuid': role_uuid\n                        },\n                         \"user_reference_list\": user_reference_list,\n                         \"filter_list\": filter_list\n                    },\n                    'description': '%s role for %s'%(role, projectUuid)\n                },\n                'metadata': {\n                    'kind': 'access_control_policy'\n                },\n                'operation': 'ADD'\n            }\n        access_control_policy_list = acp_list\n    else:\n        _type = 'groups'\n        group_reference_list = []\n        for _user in groups:\n            for us in group_list:\n                if _user in us['name']:\n                    group_reference_list.append(\\\n                        {\"kind\":\"user_group\", \"uuid\": us['uuid']})\n        acp_list = {\n            'acp': {\n                'name': 'ACP-TENANT-{}-{}-@@{calm_now}@@'.format(role, _type),\n                'resources': {\n                    'role_reference': {\n                        'kind': 'role',\n                        'uuid': role_uuid\n                        },\n                         \"user_group_reference_list\": group_reference_list,\n                         \"filter_list\": filter_list\n                    },\n                    'description': '%s group role for %s'%(role, projectUuid)\n                },\n                'metadata': {\n                    'kind': 'access_control_policy'\n                },\n                'operation': 'ADD'\n            }\n        access_control_policy_list = acp_list\n    return access_control_policy_list\n  \ndef _get_user_spec():\n    return ({\n        \"api_version\": \"3.1.0\",\n        \"metadata\": {\n            \"kind\" : \"user\"\n            },\n        \"spec\": {\n            \"resources\": {}\n            }\n        })\n\ndef _get_group_spec():\n    return ({\n              \"api_version\": \"3.1.0\",\n              \"metadata\": {\n                \"kind\": \"user_group\"\n                  },\n             \"spec\": {\n                \"resources\": {\n                      \"directory_service_user_group\": {\n                        \"distinguished_name\": \"\"\n                          }\n                    }\n                  }\n            })\n            \ndef convert_domain_to_ad_path(group_name):\n    path = ''\n    g_name, domain = group_name.split(\"@\")\n    path = \"cn=%s,cn=users\"%g_name\n    for i in domain.split(\".\"):\n        path = path + ',DC={}'.format(i)\n    \n    return path\n    \ndef create_group(group, **params):\n    payload = _get_group_spec()\n    group_name = convert_domain_to_ad_path(group)\n    payload['spec']['resources']['directory_service_user_group']\\\n                    ['distinguished_name'] = group_name\n    url = _build_url(scheme=\"https\",resource_type=\"\/user_groups\")\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)    \n    wait_for_completion(data)\n    \n    if not data.ok:\n        if \"DUPLICATE\" in str(data.json()):\n            url = _build_url(scheme=\"https\",resource_type=\"\/user_groups\/list\")                        \n            data = requests.post(url, json={\"kind\":\"user_group\", \"length\":9999},\n                                 auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                                    \"@@{prism_central_passwd}@@\"),\n                                 timeout=None, verify=False)   \n            if group.split(\"@\")[0] in str(data.json()):\n                for new_data in data.json()['entities']:\n                    if new_data['status']['resources']['display_name'] == group.split(\"@\")[0]:\n                        return {'uuid':new_data['metadata']['uuid'], 'name':group}\n        else:\n            print(\"Error while creating user_group ----> \",data.json()['message_list'])\n            exit(1)\n    else:\n        return {'uuid':data.json()['metadata']['uuid'], 'name':group}    \n            \ndef create_user(user, **params):\n    _url = _build_url(scheme=\"https\",resource_type=\"\/users\/list\")                        \n    _data = requests.post(_url, json={\"kind\":\"user\", \"length\":9999},\n                                 auth=HTTPBasicAuth(\"@@{prism_central_username}@@\",\n                                                    \"@@{prism_central_passwd}@@\"),\n                                 timeout=None, verify=False)\n    if _data.ok:\n        if user in str(_data.json()):\n            for new_data in _data.json()['entities']:\n                if new_data['status']['name'] == user:\n                    _uuid = new_data['metadata']['uuid']\n                    return {'uuid':_uuid, 'name': user}\n            print(\"Error while fetching user details.\")\n            exit(1)\n    else:\n        print(\"Error while fetching user details -- \",_data.json())\n        exit(1)\n        \n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/idempotence_identifiers\/salted\")\n    payload = {\"name_list\":[user]}\n    data = requests.post(url, json=payload,\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\",\n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)                   \n    if data.ok:\n        _uuid = data.json()[\"name_uuid_list\"][0][user]\n        print(\"user_uuid----> %s\"%_uuid)\n        return {'uuid':_uuid, 'name': user}\n    else:\n        print(\"Error while fetching user details :- \",data.json())\n        exit(1)\n      \ndef delete_user(**params):\n    project = params['project_details']\n    if project.get('uuid', 'None') == 'None' and project.get('name', 'None') == 'None':\n        print(\"Input Error ----> Please provide project name or project uuid.\")\n    payload = _get_spec(name=project.get('name', None),uuid=project.get('uuid', 'None'))\n    for x in ['categories', 'categories_mapping', 'creation_time', 'last_update_time', 'owner_reference']:\n        del payload['metadata'][x]\n    del payload['status']\n    \n    user_list = []\n    all_users = []\n    if params.get(\"tenant_users\", \"None\") != \"None\":\n        for x in range(len(params['tenant_users'])):\n            all_users.append(params['tenant_users'][x].get(\"admin\",\\\n                      params['tenant_users'][x].get('operator',\\\n                      params['tenant_users'][x].get('developer',\\\n                      params['tenant_users'][x].get('consumer')))))\n        for user in all_users:\n            for _user in user:\n                user_list.append(create_user(_user, **params))\n\n    group_list = []\n    all_groups = []\n    if params.get(\"tenant_group\", \"None\") != \"None\":\n        for x in range(len(params['tenant_group'])):\n            all_groups.append(params['tenant_group'][x].get(\"admin\",\\\n                      params['tenant_group'][x].get('operator',\\\n                      params['tenant_group'][x].get('developer',\\\n                      params['tenant_group'][x].get('consumer')))))\n        for group in all_groups:\n            for _group in group:\n                group_list.append(create_group(_group, **params))\n    \n    if params.get('tenant_users', 'None') != 'None':\n        for _user in all_users:\n            for user in _user:\n                for _index, _policy in enumerate(payload['spec']['access_control_policy_list']):\n                    _policy['operation'] = \"UPDATE\"\n                    for users_list in _policy['acp']['resources']['user_reference_list']:\n                        if user in users_list['name']:\n                            payload['spec']['access_control_policy_list'][_index]\\\n                                ['acp']['resources']['user_reference_list'].remove(users_list)        \n                            \n    if params.get('tenant_group', 'None') != 'None':\n        for _user in all_groups:\n            for user in _user:\n                for _index,_policy in enumerate(payload['spec']['access_control_policy_list']):\n                    _policy['operation'] = \"UPDATE\"\n                    for users_list in _policy['acp']['resources']['user_group_reference_list']:\n                        if user.split('@')[0] in users_list['name']:\n                            payload['spec']['access_control_policy_list'][_index]\\\n                                ['acp']['resources']['user_group_reference_list'].remove(users_list)\n                                \n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects_internal\/{}\".format(project['uuid']))\n    data = requests.put(url, json=payload,\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)\n    wait_for_completion(data)\n\n    payload = _get_project_spec(name=project.get('name', None),\n                uuid=project.get('uuid', 'None'))\n    for x in ['categories', 'categories_mapping', 'creation_time', 'last_update_time', 'owner_reference']:\n        del payload['metadata'][x]\n    del payload['status']\n\n    if params.get('tenant_users', 'None') != 'None':\n        _list = payload['spec']['resources']['user_reference_list']\n        for tenant_users in user_list:\n            for _index, _user in enumerate(_list):\n                if tenant_users['uuid'] == _user['uuid']:\n                    del payload['spec']['resources']\\\n                        ['user_reference_list'][_index]\n\n    if params.get('tenant_group', 'None') != 'None':\n        _list = payload['spec']['resources']['external_user_group_reference_list']\n        for tenant_groups in group_list:\n            for _index, _group in enumerate(_list):\n                if tenant_groups['uuid'] == _group['uuid']:\n                    del payload['spec']['resources']\\\n                            ['external_user_group_reference_list'][_index]\n    print(payload)\n    url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects\/{}\".format(project['uuid']))\n    data = requests.put(url, json=payload,\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)\n    wait_for_completion(data)\n    if \"@@{operation}@@\" == \"delete_user\":\n        print(\"%s, %s user deleted successfully.\"%(params.get('tenant_group'),\n                                                  params.get('tenant_users')))                                       \ndef _get_project_spec(name=None, uuid=None):\n    if uuid != \"None\":\n        url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects_internal\/{}\".format(uuid))\n        data = requests.get(url,\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)\n        return data.json()\n    else:\n        url = _build_url(scheme=\"https\",\n                    resource_type=\"\/projects\/{}\".format(name))\n        data = requests.post(url, json={\"kind\": \"project\", \"filter\":\"name==%s\"%name},\n                        auth=HTTPBasicAuth(\"@@{prism_central_username}@@\", \n                                           \"@@{prism_central_passwd}@@\"),\n                        timeout=None, verify=False)\n        return data.json()\n\ncluster_uuid = \"\"\nif \"@@{authentication_type}@@\" == \"AD\":\n    params = @@{user_items}@@\n    operation = \"@@{operation}@@\"\n    if operation == \"add_user\":\n        update_project(**params)\n    elif operation == \"delete_user\":\n        delete_user(**params)\n    elif operation == \"update\":\n        delete_user(**params)\n        update_project(**params)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"d26c4e78_runbook","main_task_local_reference":{"kind":"app_task","name":"82a50272_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"PC_IP","value":"10.42.244.10","label":"PC IP","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Project where users\/groups action needed.","data_type":"BASE","type":"LOCAL","name":"project_name","value":"Green_project","label":"Project Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Select whitelisted authentication type in provided project.","data_type":"BASE","type":"LOCAL","name":"authentication_type","value":"AD","label":"Authentication Type [ Used in Project ]","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["AD","IDP"]}},{"val_type":"STRING","is_mandatory":true,"description":"Provide only if provided project has whitelisted IDP. Otherwise keep NA","data_type":"BASE","type":"LOCAL","name":"idp_name","value":"Calm_IDP","label":"IDP Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"Whitelisted Active Directory Domain Name  for Project. Provide only if used Active Directory users in projects.","data_type":"BASE","type":"LOCAL","name":"active_directory_domain","value":"green.lab.sp.local","label":"Active Directory Domain Name","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"operation","value":"add_user","label":"","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["add_user","delete_user","update"]}},{"val_type":"STRING","is_mandatory":true,"description":"If don't have admin users, Keep NA value in the Input field. ","data_type":"BASE","type":"LOCAL","name":"admin_users","value":"NA","label":"Admin Users","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"If don't have Developer users, Keep NA value in the Input field. ","data_type":"BASE","type":"LOCAL","name":"developer_users","value":"developer@green.lab.sp.local","label":"Developer Users","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"If don't have Consumer users, Keep NA value in the Input field. ","data_type":"BASE","type":"LOCAL","name":"consumer_users","value":"NA","label":"Consumer Users","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"If don't have Operator users, Keep NA value in the Input field. ","data_type":"BASE","type":"LOCAL","name":"operator_users","value":"NA","label":"Operator Users","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"If don't have admin groups, Keep NA value in the Input field. ","data_type":"BASE","type":"LOCAL","name":"admin_groups","value":"NA","label":"Admin Groups","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"If don't have Developer groups, Keep NA value in the Input field. ","data_type":"BASE","type":"LOCAL","name":"developer_groups","value":"NA","label":"Developer Groups","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"If don't have Operator Groups, Keep NA value in the Input field. ","data_type":"BASE","type":"LOCAL","name":"operator_groups","value":"NA","label":"Operator Groups","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"If don't have Consumer groups, Keep NA value in the Input field. ","data_type":"BASE","type":"LOCAL","name":"consumer_groups","value":"NA","label":"Consumer Groups","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_username","value":"OrqCskxUQtvSOzezg7WPVFIsE2aFz0HIRcQ+wAeB5reHN42VvTfc8bZkdpuU4txU3oESda4=:utf-8","label":"Project User Username","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"SECRET","name":"prism_central_passwd","value":"5QZKsI4fZ5\/ln4S8hFRbECpS2SQWTiTWOowNdISsD+KCi2anCToG1p0P:utf-8","label":"Project User Password","attrs":{"is_secret_modified":false,"secret_reference":{},"type":"SECRET"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}},"name":"Users and Groups Management"},"api_version":"3.0","metadata":{"last_update_time":"1662376362121886","kind":"runbook","spec_version":2,"creation_time":"1662375711154545","name":"Users and Groups Management"}}